{"version":3,"sources":["Components/Calendar/CalendarControl.tsx","Components/Calendar/CalendarCoin.tsx","Components/Calendar/ActivityTiles.tsx","Components/Calendar/TotalByDateShift.tsx","Components/Calendar/LabCalendar.tsx","Components/Calendar/CalendarMain.tsx"],"names":["CalendarControl","props","getUpdatedDatevalue","isNext","offset","dateValue","calDateObj","Date","setDate","getDate","getLastFlag","offsetvalue","newCalDate","today","handleOffsetAddition","ev","preventDefault","stopPropagation","operation","currentTarget","id","state","calDate","opFlag","setState","lastDisabled","nextDisabled","handleChange","handleDateSelect","updatedDate","formatCalDate","this","style","overflow","width","padding","className","float","fontSize","fontWeight","textAlign","FLatDatePickr","showNonFormLabel","labelHead","isPast","updateFunc","dateInput","Link","title","onClick","disabled","Icon","iconName","React","CalendarCoin","renderCoin","shiftObj","shiftColor","isStar","location","date","locationId","handleIconClick","shiftData","locationCapacity","prevProps","prevState","length","map","key","ActivityNumber","ShiftColor","uuidv4","require","ActivityTiles","CreateChunkAndFill","maxTilesPerRow","pageLinksArr","splitArray","chunk","i","b","j","push","getLocationSpecificArr","equipmentNames","equipArr","split","LocationsData","filteredLocation","_","filter","LocationId","currLocation","equip","EquipmentArr","indexOf","activityTilesArr","heading","ofcLocId","AppConfig","ActivityForm","officeSpaceUsageLocation","elem","headkey","activityTiles","backgroundColor","margin","item","key1","EquipmentName","contactUserNameEmail","IsEmployee","BookedForEmail","BookedByEmail","ActivityId","boxShadow","Depths","depth16","borderRadius","minHeight","color","ActivityName","data-title","substring","ExperimentId","FontIcon","verticalAlign","BookedForName","paddingLeft","wordBreak","href","display","flexDirection","BookedByName","ExperimentName","join","height","TotalByDateShift","TotalCountArr","eachCountArr","ShiftData","countByShift","Calendar","getDataFromDB","isPageLoad","promises","currUser","context","userName","getLocationsEquipments","getShiftDataForCalendar","getCalendarDataByDate","Promise","all","then","responses","nextDays","locationEquiData","getLocationsformLocEquip","calendarDataArr","formLocationDateJson","locationdata","activitiesData","calendarData","totolCountArr","isLoading","gridElement","document","getElementById","gridHeight","clientHeight","catch","error","console","log","response","handleControlInput","flag","getNextDaysArr","handleShiftClick","event","userClickAction","getfilteredData","filterByLocationShiftIdDate","ShiftId","activityHeader","formatActivityHeaderDate","ShiftName","LocationName","LocationCapacity","filteredData","tilesListKey","loadSpinner","labelTxt","BlockingSpinner","label","hideDialog","contextType","UserInfoContext","dir","DateString","CalData","calData","DayIndex","TotalInLocation","Spinner","size","SpinnerSize","large","MessageBar","CalendarMain","handleRedirection"],"mappings":"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","file":"static/js/3.f5016bff.chunk.js","sourcesContent":["import * as React from 'react';\r\nimport {Icon} from 'office-ui-fabric-react';\r\nimport FLatDatePickr from  '../utils/FLatDatePickr'\r\nimport {Link} from 'office-ui-fabric-react/lib/Link';\r\nimport {today, formatCalDate} from './CalendarService';\r\nimport { ICalendarControlProps, ICalendarControlState } from './intefaces/ICalendarControl';\r\n\r\nexport default class CalendarControl extends React.Component<ICalendarControlProps,ICalendarControlState> {\r\n    constructor(props:ICalendarControlProps) {\r\n        super(props);\r\n        this.state = {\r\n            calDate: today,\r\n            lastDisabled: false,\r\n            nextDisabled: false,\r\n            offset: 1,\r\n        };\r\n    }\r\n    componentDidMount() {\r\n        const {calDate} :any = this.props;\r\n        this.setState({\r\n            calDate: calDate,\r\n        });\r\n    }\r\n    getUpdatedDatevalue = (isNext:boolean, offset:number, dateValue:any) => {\r\n        var calDateObj = new Date(dateValue);\r\n        if (isNext) {\r\n            calDateObj.setDate(calDateObj.getDate() + 7);\r\n        } else {\r\n            calDateObj.setDate(calDateObj.getDate() - 7);\r\n        }\r\n        // if (calDateObj < today) {\r\n        //     calDateObj = today;\r\n        // }\r\n        return calDateObj;\r\n    };\r\n    getLastFlag = (offsetvalue:number, newCalDate:any) => {\r\n        var checkFlag = false;\r\n        if (newCalDate <= today) {\r\n            return true;\r\n        }\r\n        return checkFlag;\r\n    };\r\n    handleOffsetAddition = (ev:any) => {\r\n        ev.preventDefault();\r\n        ev.stopPropagation();\r\n        let operation = ev.currentTarget.id;\r\n        const {offset, calDate} = this.state;\r\n        var opFlag = true;\r\n        if (operation === 'next') {\r\n            opFlag = true;\r\n            let offsetvalue = offset + 1;\r\n            var newCalDate = this.getUpdatedDatevalue(\r\n                true,\r\n                offsetvalue,\r\n                calDate,\r\n            );\r\n            let checkLastFlag = false;//this.getLastFlag(offsetvalue, newCalDate);\r\n            this.setState({\r\n                offset: offsetvalue,\r\n                lastDisabled: checkLastFlag,\r\n                nextDisabled: false,\r\n                calDate: newCalDate, //< today ? today : newCalDate,\r\n            });\r\n        } else {\r\n            opFlag = false;\r\n            let offsetvalue = offset - 1;\r\n            var newCalDate = this.getUpdatedDatevalue(\r\n                false,\r\n                offsetvalue,\r\n                calDate,\r\n            );\r\n            let checkLastFlag = false//this.getLastFlag(offsetvalue, newCalDate);\r\n            this.setState({\r\n                offset: offsetvalue,\r\n                lastDisabled: checkLastFlag,\r\n                nextDisabled: false,\r\n                calDate: newCalDate, //< today ? today : newCalDate,\r\n            });\r\n        }\r\n        this.props.handleChange(newCalDate, opFlag);\r\n    };\r\n\r\n    handleDateSelect = (updatedDate:any) => {\r\n        const {calDate}:any = this.state;\r\n        if (updatedDate &&\r\n            formatCalDate(updatedDate) != formatCalDate(calDate)) \r\n        {\r\n            let checkLastFlag = false; //this.getLastFlag(1, updatedDate);\r\n            this.setState({\r\n                calDate: updatedDate,\r\n                lastDisabled: checkLastFlag,\r\n                nextDisabled: false,\r\n                offset: 1,\r\n            });\r\n            this.props.handleChange(updatedDate,false);\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const {calDate, nextDisabled, lastDisabled} = this.state;\r\n        return (\r\n            /* <div className=\"ms-Grid-row CalendarControls\"> */\r\n            <div style={{overflow: \"auto\", width:\"100%\", padding:\"30px 0 10px 0\"}}>\r\n                <div className={\"CalControl\"} style={{width:\"52%\", float:\"left\"}}>\r\n                    <div style={{fontSize: \"12pt\", fontWeight: \"bold\", float: \"left\", width:\"20%\", textAlign:\"left\"}}>\r\n                        Calendar\r\n                    </div>\r\n                    <div className={\"CalMainControl\"} style={{float: \"right\",width: \"50%\"}}>                    \r\n                        <div className=\"dateControls\" style={{width: \"50%\", float:\"left\"}}>                    \r\n                            <FLatDatePickr\r\n                                showNonFormLabel={false}\r\n                                labelHead=\"Start Date\"\r\n                                isPast= {true}\r\n                                updateFunc={this.handleDateSelect}\r\n                                dateInput={calDate}                                \r\n                            />\r\n                        </div>\r\n                        <div className=\"navControl\" style={{width:\"43%\", float:\"right\"}}>\r\n                            <Link\r\n                                title=\"Get Last 7 Days Activities\"\r\n                                onClick={this.handleOffsetAddition}\r\n                                id={'last'}\r\n                                disabled={lastDisabled}                                \r\n                            >\r\n                                Last 7 Days\r\n                            </Link>\r\n                            <span style={{padding:\"0 5px 0 5px\"}}>|</span>\r\n                            <Link\r\n                                title=\"Get Last 7 Days Activities\"\r\n                                onClick={this.handleOffsetAddition}\r\n                                id={'next'}\r\n                                disabled={nextDisabled}\r\n                            >\r\n                                {' '}\r\n                                Next 7 Days\r\n                            </Link>\r\n                        </div>\r\n                    </div>                    \r\n                </div>\r\n                <div className=\"CalendarLedger\" style={{width:\"47%\", float:\"right\", padding:\"0px 0 10px 0\"}}>\r\n                    <div className=\"ledgerIconDiv\">\r\n                        <Icon\r\n                            iconName=\"SquareShapeSolid\"\r\n                            className=\"calendar_icon calendar_icon_white\"\r\n                        />\r\n                        <label className=\"ms-Label\"> No Bookings</label>\r\n                    </div>\r\n                    <div className=\"ledgerIconDiv\">\r\n                        <Icon\r\n                            iconName=\"SquareShapeSolid\"\r\n                            className=\"calendar_icon calendar_icon_green\"\r\n                        />\r\n                        <label className=\"ms-Label\"> Partially Booked</label>\r\n                    </div>\r\n                    <div className=\"ledgerIconDiv\">\r\n                        <Icon\r\n                            iconName=\"SquareShapeSolid\"\r\n                            className=\"calendar_icon calendar_icon_grey\"\r\n                        />\r\n                        <label className=\"ms-Label\"> Fully Booked</label>\r\n                    </div>\r\n                    <div className=\"ledgerIconDiv\">\r\n                        <Icon\r\n                            iconName=\"SquareShapeSolid\"\r\n                            className=\"calendar_icon calendar_icon_red\"\r\n                        />\r\n                        <label className=\"ms-Label\"> Overbooked</label>\r\n                    </div>\r\n                    <div className=\"ledgerIconDiv\">\r\n                        <Icon\r\n                            iconName=\"Contact\"\r\n                            style={{fontWeight: \"bold\"}}\r\n                            //className=\"calendar_icon calendar_icon_yellow\"\r\n                        />\r\n                        <label className=\"ms-Label\"> My Activities</label>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import *as React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {Icon} from 'office-ui-fabric-react';\r\nimport { ICalendarCoinProps, ICalendarCoinState } from './intefaces/ICalendarCoin';\r\nimport { IShiftData, ICalendarData } from './intefaces/ICalendar';\r\n\r\nexport default class CalendarCoin extends React.Component<ICalendarCoinProps,ICalendarCoinState> {\r\n    constructor(props:ICalendarCoinProps) {\r\n        super(props);\r\n        this.state = {\r\n            shiftData: [],            \r\n            locationCapacity:0,\r\n            locationId:0,\r\n            date:''\r\n        };\r\n    }    \r\n    componentDidMount() {\r\n        const {shiftData, date, locationCapacity,locationId} = this.props;\r\n        this.setState({\r\n            locationId,\r\n            locationCapacity,\r\n            shiftData,\r\n            date\r\n        });\r\n    }\r\n    componentDidUpdate(prevProps: ICalendarCoinProps, prevState:ICalendarCoinState) {\r\n        const {shiftData, locationId, date, locationCapacity} = this.state;\r\n        if (prevProps.shiftData.length !== shiftData.length){\r\n            this.setState({\r\n                shiftData: this.props.shiftData,\r\n                locationId:this.props.locationId,\r\n                locationCapacity:this.props.locationCapacity,\r\n                date:this.props.date,\r\n            });\r\n        }\r\n        if (prevProps.locationId !== locationId){\r\n            this.setState({\r\n                shiftData: this.props.shiftData,\r\n                locationId:this.props.locationId,\r\n                locationCapacity:this.props.locationCapacity,\r\n                date:this.props.date\r\n            });\r\n        }\r\n        if (prevProps.locationCapacity !== locationCapacity){\r\n            this.setState({\r\n                shiftData: this.props.shiftData,\r\n                locationId:this.props.locationId,\r\n                locationCapacity:this.props.locationCapacity,\r\n                date:this.props.date\r\n            });\r\n        }\r\n        if (prevProps.date !== date){\r\n            this.setState({\r\n                shiftData: this.props.shiftData,\r\n                locationId:this.props.locationId,\r\n                locationCapacity:this.props.locationCapacity,\r\n                date:this.props.date\r\n            });\r\n        }\r\n    }\r\n    renderCoin = (shiftObj:IShiftData, shiftColor:string,isStar:boolean,location:ICalendarData) => {\r\n        const {locationId,date}= this.state;\r\n        switch (shiftColor) {\r\n            case 'White':\r\n                return (\r\n                    <Icon\r\n                        iconName={!isStar?\"SquareShapeSolid\":\"Contact\"}\r\n                        className={!isStar? \"calendar_icon calendar_icon_white\":\"calendar_icon_white starIconClass\"}\r\n                        onClick={(ev) =>this.props.handleIconClick(ev,date,location,shiftObj)}\r\n                    />\r\n                );\r\n            case 'Green':\r\n                return (\r\n                    <Icon\r\n                        iconName={!isStar?\"SquareShapeSolid\":\"Contact\"}                        \r\n                        className={!isStar? \"calendar_icon calendar_icon_green\":\"calendar_icon_green starIconClass\"}\r\n                        onClick={(ev) =>this.props.handleIconClick(ev,date,location,shiftObj)}\r\n                    />\r\n                );\r\n            case 'Grey':\r\n                return (\r\n                    <Icon\r\n                        iconName={!isStar?\"SquareShapeSolid\":\"Contact\"}\r\n                        className={!isStar? \"calendar_icon calendar_icon_grey\":\"calendar_icon_grey starIconClass\"}\r\n                        onClick={(ev) =>this.props.handleIconClick(ev,date,location,shiftObj)}\r\n                    />\r\n                );\r\n            case 'Red':\r\n                return (\r\n                    <Icon\r\n                        iconName={!isStar?\"SquareShapeSolid\":\"Contact\"}\r\n                        className={!isStar? \"calendar_icon calendar_icon_red\":\"calendar_icon_red starIconClass\"}\r\n                        onClick={(ev) =>this.props.handleIconClick(ev,date,location,shiftObj)}\r\n                    />\r\n                );\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n    render() {\r\n        const {shiftData, locationCapacity} = this.state;\r\n        const {location} = this.props;\r\n        return (\r\n        <div className={'ms-Grid-row CalendarCoinClass'}>\r\n            {shiftData.length>0\r\n                ? shiftData.map((shiftObj, key) => {\r\n                    return (\r\n                        <div key={key + 'coin'}\r\n                            className={'ms-Grid-col ms-sm3 calendatCoinDiv'}\r\n                            title={shiftObj.ActivityNumber +'/' +locationCapacity}>\r\n                            {this.renderCoin(shiftObj,shiftObj.ShiftColor,shiftObj.isStar,location)}\r\n                        </div>\r\n                    );\r\n                })\r\n            : ''}\r\n        </div>\r\n        );\r\n    }\r\n}","import * as React from 'react';\r\nimport {chunk} from 'lodash';\r\nimport {Depths} from '@uifabric/fluent-theme/lib/fluent/FluentDepths';\r\nimport { IActivityTilesProps, IActivityTilesState } from './intefaces/IActivityTiles';\r\nimport { FontIcon } from 'office-ui-fabric-react/lib/Icon';\r\nimport AppConfig from '../../Constans';\r\nimport { IActivityComplete, ICalLocation } from './intefaces/ICalendar';\r\nimport _ from 'lodash';\r\nconst uuidv4 = require('uuid/v4');\r\n\r\nexport default class ActivityTiles extends React.Component<IActivityTilesProps,IActivityTilesState> {\r\n    constructor(props:IActivityTilesProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            activityTilesArr: [],\r\n        };\r\n    }\r\n    componentDidMount() {\r\n        const {activityTilesArr} = this.props;\r\n        this.setState({\r\n            activityTilesArr,\r\n        });\r\n    }\r\n    componentDidUpdate(prevProps:IActivityTilesProps,prevState:IActivityTilesState) {\r\n        const {activityTilesArr} = this.props;\r\n        if (activityTilesArr.length !== this.props.activityTilesArr.length) {\r\n            this.setState({\r\n                activityTilesArr: this.props.activityTilesArr,\r\n            });\r\n        }\r\n    }\r\n    CreateChunkAndFill = (maxTilesPerRow:number, pageLinksArr:IActivityComplete[]) => {\r\n        var splitArray:any = chunk(pageLinksArr, maxTilesPerRow);\r\n        for (var i = 0; i < splitArray.length; i++) {\r\n            if (splitArray[i].length < maxTilesPerRow) {\r\n                var b = maxTilesPerRow - splitArray[i].length;\r\n                for (var j = 0; j < b; j++) {\r\n                    splitArray[i].push({});\r\n                }\r\n            }\r\n        }\r\n        return splitArray;\r\n    }\r\n    getLocationSpecificArr = (equipmentNames:string,locationId:number):string[] => {\r\n        var equipArr:string[]  = equipmentNames?.split(\",\");\r\n        const {LocationsData} = this.props;\r\n        if(equipArr.length>0){\r\n            var filteredLocation:ICalLocation[] = _.filter(LocationsData,{LocationId:locationId});\r\n            if(filteredLocation && filteredLocation.length>0){\r\n                let currLocation:ICalLocation = filteredLocation[0];\r\n                let locSpecificEquips:string[] = equipArr.filter((equip) =>{\r\n                        if(currLocation.EquipmentArr.indexOf(equip) !== -1){\r\n                            return true;\r\n                        }\r\n                        else{\r\n                            return false;\r\n                        }\r\n                    });\r\n                return locSpecificEquips;\r\n            }\r\n        }\r\n        return equipArr;\r\n    }\r\n    render() {\r\n        const {maxTilesPerRow,heading} = this.props;\r\n        const {activityTilesArr} = this.state;\r\n        var splitArray = this.CreateChunkAndFill(\r\n            maxTilesPerRow,\r\n            activityTilesArr,\r\n        ); \r\n\r\n        var ofcLocId = AppConfig.ActivityForm.officeSpaceUsageLocation;  \r\n        return (\r\n            <>\r\n                <div style={{padding: \"5px 5px 10px 5px\", fontWeight: \"bold\", fontSize: \"1em\"}}>\r\n                    {\r\n                        heading.split(\"|\").map((elem,headkey)=>{return <div key={headkey}>{elem}</div>})\r\n                    }\r\n                </div>\r\n                {splitArray.map((activityTiles:IActivityComplete[], key:any) => {\r\n                    return (\r\n                        <div key={uuidv4()} style={{backgroundColor: \"transparent\", margin: \"0 auto \", width:\"95%\",fontSize:\"14px\"}}>\r\n                            {activityTiles.map((item:IActivityComplete, key1:any) => {\r\n                                const equipArr:string[] = item.EquipmentName?this.getLocationSpecificArr(item.EquipmentName,item.LocationId):[];\r\n                                const contactUserNameEmail = item.IsEmployee?item.BookedForEmail:item.BookedByEmail;\r\n                                return item.ActivityId ? (        \r\n                                    <div key={uuidv4()}>                            \r\n                                        <div  \r\n                                            style={{\r\n                                                boxShadow: Depths.depth16,\r\n                                                borderRadius: \"10px\", \r\n                                                //backgroundColor: \"#4f4e4d\", \r\n                                                minHeight: \"100px\",\r\n                                                color: \"#fff\"                                                                                                                                  \r\n                                            }}>\r\n                                            <div title={item.ActivityName} data-title={item.ActivityName} className={'activityContaitner'} \r\n                                            style={{padding: \"0px\"}}>\r\n                                                <div className={\"activityHeadingSection\"} \r\n                                                style={{backgroundColor: \"#4f4e4d\", borderRadius:\"10px 10px 0px 0px\", padding:\"5px 5px 5px 10px\", minHeight: \"20px\"}}>\r\n                                                    <div style={{width: \"80%\", float:\"left\"}}>\r\n                                                        {item.ActivityName.length > 20 ? item.ActivityName.substring(0, 30)+\"...\" : item.ActivityName}                                                        \r\n                                                    </div>\r\n                                                    <div style={{width: \"20%\", float:\"right\", textAlign: \"right\"}}>\r\n                                                        <span>\r\n                                                        {\r\n                                                            item.ExperimentId ? <FontIcon iconName=\"TestPlan\" title=\"Part of an experiment\" style={{color: \"#fff\", fontSize:\"1.25em\", verticalAlign:\"bottom\"}}/> : \"\"    \r\n                                                        }\r\n                                                        </span>                                                       \r\n                                                    </div>\r\n                                                </div>                                            \r\n                                                <div title={item.BookedForName} style={{color:\"#4f4e4d\", paddingLeft:\"10px\",wordBreak:\"break-all\" }}>\r\n                                                    <span style={{fontWeight: \"bold\"}}>Booked For:</span>\r\n                                                    <div style={{fontSize: \"1em\"}}>\r\n                                                        {item.IsEmployee?\r\n                                                        <span style={{wordBreak:\"break-word\"}}>\r\n                                                            {item.BookedForName}\r\n                                                            <a href={\"msteams:/l/chat/0/0?users=\"+contactUserNameEmail}  style={{paddingLeft:\"10px\"}}>\r\n                                                                    <FontIcon iconName=\"TeamsLogo16\" title={\"Chat\"} \r\n                                                                    style={{color: \"#5A5B96\", fontSize:\"1em\", verticalAlign:\"bottom\"}}/>      \r\n                                                            </a>\r\n                                                        </span>\r\n                                                        :(\r\n                                                        <div style={{display:'flex',flexDirection: 'column'}}>\r\n                                                            <span>{item.BookedForEmail}</span><span>{'(Host: '+ item.BookedByName+')'}\r\n                                                                <a href={\"msteams:/l/chat/0/0?users=\"+contactUserNameEmail}  style={{paddingLeft:\"10px\"}}>\r\n                                                                    <FontIcon iconName=\"TeamsLogo16\" title={\"Chat\"} \r\n                                                                    style={{color: \"#5A5B96\", fontSize:\"1em\", verticalAlign:\"bottom\"}}/>      \r\n                                                                </a>\r\n                                                            </span>\r\n                                                        </div>)} \r\n                                                    </div>  \r\n                                                </div>\r\n                                                {\r\n                                                    item.ExperimentName ? <div style={{color:\"#4f4e4d\", padding:\"5px 10px 5px 10px\", overflow: \"auto\"}}>\r\n                                                    <span style={{fontWeight: \"bold\"}}>Experiment Name:</span>                                                 \r\n                                                    <div style={{fontSize: \"1em\"}}> { item.ExperimentName } </div>\r\n                                                </div> : \"\" \r\n                                                }\r\n                                                {item.LocationId === ofcLocId ?\"\":(\r\n                                                <div title={\"Equipments\"} \r\n                                                    style={{color:\"#4f4e4d\", padding:\"5px 10px 5px 10px\", overflow: \"auto\"}}>\r\n                                                    <span style={{fontWeight: \"bold\"}}>Equipment Reserved:</span>                                                 \r\n                                                    <div style={{fontSize: \"1em\"}}> { equipArr.length>0 ? equipArr.join(\", \") : \"None\" } </div>\r\n                                                </div>\r\n                                                )}\r\n                                            </div>\r\n                                        </div>\r\n                                        <div style={{height:\"10px\"}}></div>\r\n                                    </div>\r\n                                ) : <div key={key1}></div>;\r\n                            })}\r\n                        </div>\r\n                    );\r\n                })}\r\n            </>\r\n        );\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport { ICalData } from './intefaces/ICalendar';\r\nconst uuidv4 = require('uuid/v4');\r\nexport interface ITotalByDateShiftProps {\r\n    TotalCountArr:ICalData[];\r\n}\r\nexport default class TotalByDateShift extends React.Component<ITotalByDateShiftProps, {}> {\r\n public render() {\r\n      const {TotalCountArr} = this.props;\r\n    return (\r\n      <tr>\r\n        <td key={uuidv4()}>\r\n            Total Distinct People\r\n        </td>\r\n        {TotalCountArr.map((eachCountArr)=>{\r\n            return(\r\n            <td key={uuidv4()}>\r\n                <div className={'ms-Grid-row CalendarCoinClass'}>\r\n                    {eachCountArr.ShiftData.map((countByShift,key) =>{\r\n                        return(\r\n                            <div key={key + 'coin'}\r\n                                className={'ms-Grid-col ms-sm3 calendatCoinDiv'}>\r\n                                {countByShift.ActivityNumber}\r\n                            </div>\r\n                        )\r\n                    })}\r\n                </div>\r\n            </td>)\r\n        })}\r\n      </tr>\r\n    );\r\n  }\r\n}\r\n","import * as React from 'react';\r\nimport _ from 'lodash';\r\nimport {Icon} from 'office-ui-fabric-react';\r\nimport {Depths} from '@uifabric/fluent-theme/lib/fluent/FluentDepths';\r\nimport {Spinner, SpinnerSize} from 'office-ui-fabric-react/lib/Spinner';\r\nimport {\r\n    MessageBar,\r\n    MessageBarType,\r\n} from 'office-ui-fabric-react/lib/MessageBar';\r\n\r\nimport CalendarControl from './CalendarControl';\r\nimport {\r\n    getNextDaysArr,\r\n    today,\r\n    getCalendarDataByDate,\r\n    getShiftDataForCalendar,\r\n    formLocationDateJson,\r\n    CalendarLinks,\r\n    filterByLocationShiftIdDate,\r\n    formatActivityHeaderDate,\r\n    getLocationsEquipments,\r\n    getLocationsformLocEquip,\r\n} from './CalendarService';\r\nimport AppConfig from '../../Constans';\r\nimport CalendarCoin from './CalendarCoin';\r\nimport ActivityTiles from './ActivityTiles';\r\nimport { ICalendarProps, ICalendarState, ICalendarData, IShiftData, IActivityComplete, ICalData } from './intefaces/ICalendar';\r\nimport { BlockingSpinner } from '../Common/dialogs/BlockingSpinner';\r\nimport { UserInfoContext } from '../../Main';\r\nimport { groupByEquipment } from \"../utils/Utils\";\r\nimport TotalByDateShift from './TotalByDateShift';\r\n\r\nconst uuidv4 = require('uuid/v4');\r\n\r\nexport default class Calendar extends React.Component<ICalendarProps,ICalendarState> {    \r\n    constructor(props:ICalendarProps) {\r\n        super(props);\r\n        Calendar.contextType = UserInfoContext;\r\n        this.state = {\r\n            nextDays: [],\r\n            calDate: today,\r\n            locationdata: [],\r\n            shiftData: [],\r\n            activitiesData: [],\r\n            calendarData: [],\r\n            totolCountArr:[] as ICalData[],\r\n            isLoading: true,\r\n            userClickAction: false,\r\n            filteredData: [],\r\n            activityHeader:'Activities',\r\n            tilesListKey: uuidv4(),\r\n            gridHeight: 0\r\n        };\r\n    }\r\n    componentDidMount() {        \r\n        this.setState({\r\n            nextDays: getNextDaysArr(today, 6),\r\n            isLoading: true\r\n        });\r\n        this.getDataFromDB(null, true);        \r\n    }\r\n    getDataFromDB = (updatedDate:any, isPageLoad:boolean) => {\r\n        const promises = [];\r\n        var calDate = updatedDate ? updatedDate : this.state.calDate,\r\n        currUser = this.context.userName;\r\n        if (isPageLoad) {\r\n            promises.push(getLocationsEquipments());\r\n            promises.push(getShiftDataForCalendar());\r\n            promises.push(getCalendarDataByDate(calDate));\r\n            Promise.all(promises)\r\n                .then(responses => {                      \r\n                    if (responses && responses.length > 0) {\r\n                        const {nextDays} = this.state;\r\n                        var locationEquiData =  getLocationsformLocEquip(responses[0]); \r\n                        var calendarDataArr = formLocationDateJson(nextDays,locationEquiData,responses[1],responses[2],currUser);  \r\n                        this.setState({\r\n                            locationdata: locationEquiData,\r\n                            shiftData: responses[1],\r\n                            activitiesData: calendarDataArr.activitiesData,\r\n                            calendarData: calendarDataArr.calendarData,\r\n                            totolCountArr:calendarDataArr.totolCountArr,\r\n                            isLoading: false,\r\n                        });                        \r\n                    }                    \r\n                })\r\n                .then(() => {\r\n                    let gridElement = document.getElementById('calendarGrid');                    \r\n                    this.setState({\r\n                        gridHeight: gridElement?gridElement.clientHeight: this.state.gridHeight\r\n                    });\r\n                })\r\n                .catch(error => {\r\n                    console.log(error);\r\n                });\r\n        } else {\r\n            //else not page load - for change function \r\n            this.setState({isLoading: true});\r\n            getCalendarDataByDate(calDate)\r\n                .then(response => {\r\n                    if (response) {\r\n                        const {nextDays, locationdata, shiftData} = this.state;\r\n                        var calendarDataArr = formLocationDateJson(nextDays,locationdata,shiftData,response,currUser);                       \r\n                        this.setState({\r\n                            activitiesData: calendarDataArr.activitiesData,\r\n                            calendarData: calendarDataArr.calendarData,\r\n                            totolCountArr:calendarDataArr.totolCountArr,\r\n                            isLoading: false,\r\n                        });                        \r\n                    }\r\n                })\r\n                .then(() => {\r\n                    let gridElement = document.getElementById('calendarGrid');                    \r\n                    this.setState({\r\n                        gridHeight: gridElement?gridElement.clientHeight: this.state.gridHeight\r\n                    });                    \r\n                })\r\n                .catch(error => {\r\n                    console.log(error);\r\n                });\r\n        }        \r\n    }\r\n    handleControlInput = (updatedDate:any, flag:boolean) => {\r\n        this.setState({\r\n            calDate: updatedDate,\r\n            nextDays: flag\r\n                ? getNextDaysArr(updatedDate, 6)\r\n                : getNextDaysArr(updatedDate, 6),\r\n        });\r\n        this.getDataFromDB(updatedDate, false);\r\n    }\r\n    handleShiftClick = (event:any, date:any,  location:ICalendarData , shiftData:IShiftData) => {        \r\n        event.preventDefault();\r\n        var locationId =  location.LocationId;\r\n        this.setState({\r\n            userClickAction: true,\r\n        });\r\n        const {activitiesData,locationdata} = this.state;            \r\n        var getfilteredData = filterByLocationShiftIdDate(\r\n            activitiesData,\r\n            locationId,\r\n            date,\r\n            shiftData.ShiftId\r\n        );        \r\n        //var groupedByEquip = groupByEquipment(getfilteredData);\r\n    \r\n        var activityHeader:string = formatActivityHeaderDate(date) + \" \"+ shiftData.ShiftName + \"|\"+location.LocationName +\" - \"+shiftData.ActivityNumber+\"/\"+location.LocationCapacity ;\r\n        this.setState({\r\n            userClickAction: false,\r\n            filteredData: getfilteredData,\r\n            tilesListKey: uuidv4(),\r\n            activityHeader\r\n        });\r\n        // this.props.handleShiftClick(activityHeader, getfilteredData);\r\n    }        \r\n\r\n    loadSpinner = (labelTxt:string,isLoading:boolean) => {\r\n        return (\r\n            <div className=\"centeredContainer\">\r\n                <BlockingSpinner label={labelTxt} hideDialog={!isLoading}/>\r\n            </div>\r\n        );\r\n    }\r\n    render() {\r\n        const itemToDisplay = 4;\r\n        const {\r\n            calDate,\r\n            nextDays,            \r\n            calendarData,\r\n            locationdata,\r\n            isLoading,\r\n            filteredData,\r\n            activityHeader,\r\n            userClickAction,\r\n            totolCountArr,\r\n            tilesListKey\r\n        } = this.state;                \r\n        return (\r\n            <div style={{width:\"100%\", textAlign:\"center\",overflow:\"auto\"}}>  \r\n                <div className=\"Calendar\">\r\n                <CalendarControl calDate={calDate} handleChange={this.handleControlInput} />\r\n                    <div dir=\"ltr\" style={{boxShadow: Depths.depth16}}>                        \r\n                        <div className={\"CalendarBody\"}>                        \r\n                        {!isLoading ? (\r\n                            <div id=\"calendarGrid\" className=\"CalendarGrid\" style={{boxShadow: Depths.depth16, padding: \"0px\"}}>\r\n                                {nextDays.length > 0 ? (\r\n                                    <table>\r\n                                        <thead>\r\n                                            <tr key={'row0'}>\r\n                                                <th key={'th1'}>Location</th>\r\n                                                {nextDays.map((item, key) => {\r\n                                                    return (\r\n                                                        <th key={key}>\r\n                                                            <div>\r\n                                                                {item.DateString}\r\n                                                            </div>\r\n                                                        </th>\r\n                                                    );\r\n                                                })}\r\n                                            </tr>\r\n                                        </thead>\r\n                                        <tbody>\r\n                                            {calendarData.length > 0 &&(\r\n                                                <>\r\n                                                {calendarData.map((location:ICalendarData, key:any) => {\r\n                                                    return (\r\n                                                        <tr key={'Lockey'+location.LocationId}>\r\n                                                            <td key={'col-loc' +location.LocationId}>\r\n                                                                {location.LocationName}\r\n                                                            </td>\r\n                                                            {location.CalData.map((calData,key1) => {\r\n                                                                return (\r\n                                                                    <td key={'col-' +calData.DayIndex +key1}\r\n                                                                        title={'No. of Activities: '+calData.TotalInLocation}>\r\n                                                                        {calData.ShiftData  && (\r\n                                                                            <CalendarCoin key={calData.DayIndex}\r\n                                                                                locationCapacity={location.LocationCapacity}\r\n                                                                                location={location}\r\n                                                                                locationId={location.LocationId}\r\n                                                                                date={calData.Date}\r\n                                                                                shiftData={calData.ShiftData}\r\n                                                                                handleIconClick={this.handleShiftClick}\r\n                                                                            />\r\n                                                                        )}\r\n                                                                    </td>\r\n                                                                )})}\r\n                                                        </tr>\r\n                                                    )})}\r\n                                                    <TotalByDateShift TotalCountArr={totolCountArr}/>\r\n                                                </>\r\n                                            )}\r\n                                        </tbody>\r\n                                    </table>\r\n                                ) : (\r\n                                    this.loadSpinner('Processing Calendar',isLoading)\r\n                                )}\r\n                            </div>                           \r\n                        ) : (\r\n                            this.loadSpinner('Loading...',isLoading)\r\n                        )}\r\n                        {isLoading?\r\n                                (<div></div>):\r\n                                (\r\n                                <>\r\n                                    {userClickAction?(\r\n                                        <div className=\"centeredContainer\">\r\n                                            <Spinner size={SpinnerSize.large} />\r\n                                        </div>\r\n                                    ):\r\n                                    (\r\n                                        <div className={\"ActivityCards\"} style={{height: this.state.gridHeight}}>\r\n                                            {filteredData.length>0 ? (\r\n                                                    <ActivityTiles key={tilesListKey}\r\n                                                        LocationsData = {locationdata}\r\n                                                        activityTilesArr={filteredData} \r\n                                                        maxTilesPerRow={1}\r\n                                                        heading={activityHeader}\r\n                                                    />\r\n                                                ) : \r\n                                                (<MessageBar>Please click on the shift icon to get the details of the activities.</MessageBar>)\r\n                                            }\r\n                                        </div>\r\n                                    )}\r\n                                </>\r\n                                )}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Calendar from './LabCalendar';\r\nimport PageTiles from '../Common/PageTiles';\r\nimport './Calendar.css';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\n// import {CalendarLinks} from './CalendarService.js';\r\ninterface ICalendarMainProps{\r\n    handleRedirection:(selectedKey:any)=>void;\r\n}\r\nexport default class CalendarMain extends React.Component<RouteComponentProps & ICalendarMainProps,{}> {\r\n    constructor(props:any) {\r\n        super(props);        \r\n        this.props.handleRedirection('4');\r\n    }\r\n    componentDidMount() {}\r\n    render() {\r\n        return (\r\n            <div className=\"ms-Grid CalendarMain\" dir=\"ltr\">               \r\n                <Calendar />                    \r\n                <div className={'ms-Grid-row ActivityCard'}></div>\r\n            </div>\r\n        );\r\n    }\r\n}"],"sourceRoot":""}