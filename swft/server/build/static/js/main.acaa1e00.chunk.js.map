{"version":3,"sources":["Components/utils/FLatDatePickr.jsx","services/location-service.js","routes/HomeConfig.js","Components/Common/HomeButton.tsx","routes/Home.tsx","Components/FormWrapper.tsx","services/activity-service.js","services/experiment-service.js","Components/Activity/ActivityService.js","Components/Activity/LocationShiftAvailability.tsx","Components/Activity/SwitchSelector.tsx","Components/Activity/DateAndShifts.tsx","Components/utils/CustomPeoplePicker.js","Components/utils/People/FormatPeoplePicker.js","Components/Common/BookedForEmail.tsx","Components/Activity/NamePersonVisitor.tsx","Components/Activity/LocationsAndEquipments.tsx","Components/Common/dialogs/ModalDialog.jsx","Components/Common/ActionScreen.tsx","Components/Common/dialogs/BlockingDialog.jsx","Components/Common/dialogs/ButtonWithDialog.tsx","Components/Activity/CreateActivityForm.tsx","Components/Activity/EditActivityForm.tsx","routes/PlanActivity.tsx","routes/PlanOfficeSpace.tsx","services/activity-grid-service.js","Components/ActivityGrid/ExperimentGrid.tsx","Components/ActivityGrid/GroupGridItems.ts","Components/ActivityGrid/ActivityGrid.tsx","Components/Experiment/Experiment.tsx","routes/MyActivites.tsx","Components/Experiment/ExperimentService.ts","routes/PlanExperiment.tsx","App.jsx","serviceWorker.ts","index.tsx","Main/Headers/AppFooter.tsx","Main/Headers/MainHeader.tsx","Main/PathNames.ts","routes/PageNotFound.tsx","Main/AppRoute.tsx","services/systemadmin-service.js","Main/MainApp.tsx","Constans.js","Components/utils/Utils.js","authProvider.js","services/CachecManager.js","services/graph-service.js","Components/Common/dialogs/BlockingSpinner.tsx","services/calendar-service.js","Components/Calendar/CalendarService.js","services/shift-service.js"],"names":["uuidv4","require","FLatDatePickr","props","handleDateSelect","dateTime","console","log","length","setState","date","updateFunc","today","Date","state","viewForm","isPast","key","this","dateInput","prevProps","prevState","labelHead","showNonFormLabel","required","currOptions","wrap","enableTime","dateFormat","minDate","className","value","options","onClose","disabled","type","data-input","placeholder","title","iconProps","iconName","data-clear","ariaLabel","onClick","Component","LocationService","getLocationEquipmentData","Promise","resolve","reject","axios","then","locationEquipments","data","catch","error","response","HomePageConfig","HeaderText","ActionLinks","Text","Icon","Tooltip","RedirectURI","RedirectKey","GuideLinks","HomeButton","handleSelection","item","ev","preventDefault","window","open","handlePageTileClick","link","disabledBtn","style","boxShadow","Depths","depth16","minHeight","border","width","textAlign","FontIcon","paddingLeft","fontSize","verticalAlign","color","React","Home","shouldRedirect","redirectURI","handleRedirection","getHomePageConfig","homePageConfig","JSON","parse","process","REACT_APP_HOME_PAGE_CONFIG","pageConfig","columnWidth","actionLinkColumnClass","dir","paddingTop","dangerouslySetInnerHTML","__html","map","linkArr","ind","_link","_ind","borderRight","marginTop","to","FormWrapper","depth4","fontWeight","FormHeading","children","moment","processActivity","activityObj","jsonObj","ActivityName","activityName","ActivityDescription","activityDescription","DayOffset","AppConfig","ActivityForm","OfcAndIndiActivityType","ActivityDate","activityDate","format","AtivityDateFormat","ShiftIds","selectedShiftIds","BookedByName","bookedByEmail","DisplayName","BookedByEmail","Email","IsEmployee","showVisitorField","BookedForEmail","visitorEmail","BookedForName","split","bookedForEmail","LocationIds","selectedLocations","EquipmentIds","selectedEquipments","ExperimentId","experimentDate","ExperimentStartDate","actviityDate","offsetValue","Math","ceil","diff","ActivityService","cloneActivity","getActivityById","id","shifts","deleteActivityRecordById","notes","payLoadObj","ActivityId","Notes","processDeleteActivity","createActivityRecord","activity","updateActivityRecord","Id","CloneIndividualActivity","actObj","res","processExperiment","experiment","Name","Description","ProjectId","Remarks","Owner","StatusId","UpdateActivities","StartDate","PlanExperiment","ExpDateFormat","ExperimentService","getProjects","projects","addExperiment","result","updateExperiment","recordsets","getExperiment","_expObj","recordset","expDate","utc","DateFormats","NoTimeDate","_experiment","OwnerName","getActivitiesForExp","deleteExperiment","expId","deleteActivities","jsonOnj","cloneExperiment","output","CloneActivity","formatActivityDate","formatNonTimeDate","getUniqueLocationObjs","equipmentLocationsArr","office","pushedLocations","push","officeSpaceUsageLocation","_","o","indexOf","LocationId","obj","LocationName","LocationDescription","LocationCapacity","getShiftData","ShiftService","getShiftsData","getLocationEquipments","getActivityByID","activityId","validateEmail","email","test","String","toLowerCase","LocationShiftAvailability","reduceLSAByLocations","lsaArr","shiftArr","locationSortedData","orderBy","reducedArr","forEach","reducedItems","filter","l","_locationItem","Object","assign","set","ShiftId","Status","NoOfActivities","IndicationColor","isLoaded","selectedDate","shiftLocationDataArr","errorMsg","showErrorMsg","callForShiftLocationAvailabilityData","Locations","Shifts","getShiftLocationAvaliability","shiftLocationAvailabilities","locations","lsActivityData","isOffice","pushedLSAs","locaIndex","locationObj","lsaObj","shiftIndex","shiftObj","ShiftName","ShiftStartHour","StartHour","ShiftStartMin","StartMin","ShiftEndHour","EndHour","ShiftEndMin","EndMin","ShiftDisplayName","filterdlsaArr","bookedForArr","uniqPersons","TBDRejectShiftId","OnAlert","stringify","formLocationShiftAvailabilityArr","sendLsaArr","ErrorLSADataFetchMessage","msg","MessageBar","messageBarType","MessageBarType","sortedShifts","renderErrorMsg","s","_locItem","get","Spinner","size","SpinnerSize","large","label","SwitchSelector","event","currData","currentTarget","dataset","indexvalue","parseInt","cusindex","updatedArr","arrayInput","isSelected","selected","handleChangeFunction","renderSwithcSelector","data-cusindex","data-selected","Label","DateAndShifts","getOffsetValue","date1","date2","actDate","handleDateSelectChange","ExpDate","offset","Offset","handleFormFieldChange","handleShiftSelection","updatedShiftArr","shiftTimmings","errorMsgs","prevExpDate","prevActDate","role","data-automation-id","ExpId","display","alignItems","renderErrorMsgForField","marginBottom","NoShiftsErrorMsg","pickrClassName","root","PeoplePicker","getInitials","displayName","returnItials","substring","dispSplitArr","_peopleList","_searchResults","cacheAccountInfo","CacheManager","getCacheItem","accountInfo","accessToken","jwtAccessToken","getAuthenticatedClient","err","selectedPeople","isLoadingPeople","isLoadingPics","_mapUsersToPersonas","users","useMailProp","p","mail","scoredEmailAddresses","address","persona","Persona","text","secondaryText","userPrincipalName","presence","PersonaPresence","none","imageInitials","givenName","surname","initialsColor","floor","random","getProfilePics","filterText","items","concat","_listContainsPersona","getPeople","people","searchText","searchForPeople","updateSelection","placeholderTxt","description","onResolveSuggestions","_onFilterChanged","bind","pickerSuggestionsProps","suggestionsHeaderText","noResultsFoundText","searchForMoreText","searchingText","loadingText","isLoading","inputProps","itemLimit","selectedItems","getTextFromItem","onChange","_onSelectionChanged","onGetMoreResults","_onGetMoreResults","styles","convertUserObjToWrapper","userObjArr","uniqOwnersObj","owenerEmails","uniqOwners","index","len","eachUserObj","UserLogin","handleAddClick","selectedUsers","wrapperArr","eachWrapper","convertWrapperToUserObj","updatePeoplePickerChange","property","pickrKey","preState","txtFieldClass","wrapper","selectors","subComponentStyles","toggleFieldClass","container","NamePersonVisitor","handleToggleChange","eventObj","target","name","handleOnChange","val","fieldName","updateBookedForEmail","selectedFor","TextField","errorMessage","Toggle","onText","offText","checked","backgroundColor","LocationsAndEquipments","getOptionsSelected","locValues","i","handleDropDownChange","currTarget","values","handleEquipmentSelectionChange","handleLocationDropDownChange","equipmentsSelected","Equipments","locSpecificEquips","equipment","EquipmentId","locEquipmentIds","handleLocationSelectionChange","renderEquipments","equipments","toString","EquipmentName","renderLocations","location","locationEquipKey","multiple","e","NoLocationEquipmentErrorMsg","containerStyle","flexFlow","maxWidth","ModalDialog","showModal","Modal","isOpen","onDismiss","_closeModal","containerClassName","dragOptions","undefined","isBlocking","ActionScreen","getIcon","actionType","handlRedirectionClick","action","isRedirect","redirectAction","redirectClone","href","origin","setTimeout","shouldDefaultRedirect","timmer","dialogTitle","subText","isActionBtnVisible","leftBtnText","rightBtnURI","rightBtnText","defaulltRedirectURI","leftBtnURI","PrimaryButton","data-action","stylesBlock","BlockingDialog","Dialog","hidden","hideDialog","dialogContentProps","DialogType","normal","modalProps","dismissClick","DialogFooter","actionBtnTxt","handleAction","DefaultButton","dismisBtnTxt","ButtonWithDialog","buttonType","CommandBarButton","iconString","buttonTxt","onBtnClick","CustClassName","descFieldClass","wrappetr","field","height","InitialErrorMsg","updateStateLSA","raiseError","alertLSAFullyBooked","LsaArr","FullyBookedAlertMsg","checkExpDateIsPast","currExpDate","diffDates","arrangeFormFields","locationEquipmentData","currentUserName","context","currentUserEmail","userName","showTBD","tbdShiftArr","TBDRejectDispName","tbdShift","sndex","shiftElm","element","uniqLocationsArr","newActivity","ExpData","ExperimentOwner","ExpOwnerEmail","ExpStartDate","ShiftTimmings","handleActivityActions","updateProp","handleEquipmentSelection","handleLocationSelection","locationValues","equipValues","trim","validateFields","fieldsArr","fieldValueArr","flag","errorArr","eachField","emailId","addValidationError","isNaN","getTime","currActivityDate","currDate","errMsg","message","flushErrors","previousState","errorMessageArr","fullCapLSA","raiseAlert","lsa","shiftSelected","locSelected","handleFormSaveClick","LSAFullyBooked","callForCreate","ErrorValidationMessage","handleFormSaveClickAction","activityType","SaveFlag","isCreated","CreationErrorMessage","loadSpinner","labelTxt","BlockingSpinner","clearShiftSelection","shiftRec","handleCancelClick","hideCancelDialog","handleCancelAction","contextType","UserInfoContext","formFieldKey","promises","all","responses","ErrorDataFetchMessage","ExperimentNotSaved","NotPopActions","formHeading","dialogMsg","FullyBookedDialogMsg","multiline","FormRedirectionTimmer","activityNotes","InitialActivity","EditActivityForm","initialEditActivity","checkIfUSerAdmiOrEditor","editActivity","isAdmin","toUpperCase","checkIfRecordIsEditable","isEditable","officeLocId","ActivityStatus","InactiveStatusId","ExperimentStatusId","currActivityData","getActivityDetailData","activityShifts","getShiftsSelection","canEdit","canUserEdit","editActivityId","InitialShifts","LocationEquipmentData","updateExperimentForm","handleCloneClick","hideCloneDialog","isClone","newId","CloneErrorMessage","callForUpdate","notesWithUserProfile","hideUpdateDialog","isUpdated","UpdateErrorMessage","alertFlag","handleUpdateAction","handleNotesChange","handleDelete","hideDeleteDialog","handleDeleteAction","deleteFlag","isDeleted","DeleteErrorMessage","handleEditClick","locEquiptData","shiftRecord","activityDetails","ActivytData","ActivityShift","ActivityLocation","ActivityEquipment","formHeading1","formHeading2","updateTxt","handleActionAndRediret","PlanActivity","isViewForm","isNewForm","itemId","qString","search","queryString","keyIdValue","keyViewFlagValue","IdParam","ViewParam","keyVal","margin","PlanOfficeSpace","keyValue","ActivityGridService","getActivitiesForUser","userEmail","statusId","experimentId","activityGridData","GetExpWithoutActivitiesGridForUser","detailsListStyles","headerWrapper","ExperimentGrid","_getDataFromDB","ExperimentsWithoutActivites","showErrorMessage","_onRenderRow","customStyles","itemIndex","DetailsRow","checkIsPastRecord","_getColumns","minWidth","onRender","gridLabel","overflow","paddingBottom","float","labelPosition","DetailsList","compact","columns","onRenderRow","constrainMode","ConstrainMode","horizontalConstrained","checkboxVisibility","CheckboxVisibility","always","onShouldVirtualize","selectionMode","SelectionMode","selectionPreservedOnEmptyClick","getExpData","currRecord","currUserObj","Expname","ExperimentName","ExpOwner","isExpEditable","mergeStyles","MessageText","ActivityGrid","_selection","_onRenderGroupHeader","_onToggleCollapse","padding","cursor","group","isCollapsed","paddingRight","getEditExpLink","onToggleCollapse","_onItemSelectionChange","selIndices","getSelectedIndices","selectedActivityIndex","hideEditActBtn","hideEditExpBtn","_onAddActClick","_onEditActClick","selIndex","_onAddExpClick","_onEditExpClick","_onActBtnClick","_onExpBtnClick","_onShowAllActivitiesChange","showAllActivities","showAllActivitiesLoading","gridObj","groupByKey","groupByHeading","sortItemByKey","sortGroupKey","groupedGridItems","ItemsArr","GroupArr","groupByArr","groupBy","lastIndex","groups","keys","eachGroup","startIndex","count","currGroup","sort","a","b","groupAndSortGridItems","_groupActivitiesById","newGridLabel","activities","_checkIfGroupedItemExists","proPValueStr","itemToAdd","isPresent","valueArr","rawArray","groupedArr","groupedItem","_getGroups","_key","_name","g","showEdit","_getEditLink","editLink","officeSpaceUsageLocationName","linkURL","uniqShiftArr","shift","uniqLocArr","loc","uniqEquipArr","eq","Selection","onSelectionChanged","Checkbox","small","groupProps","onRenderHeader","selection","GroupData","MyActivites","InitalExpErrrMsgs","validateExpFields","newExperiment","validationObj","isValid","ErrorMsgs","now","Experiment","sortActivities","FormActionLoading","FormAction","InfoMessage","NoActivities","ShowAddActivity","reloadActivityGrid","FormActionMsg","AID","deleteMulActivities","SelectedActivities","idArray","DeleteActivity","ShowDialog","ActivityIds","Mode","onClickDeleteMulActivities","addActClickState","FormId","LoadingActivitForm","onClickAddActivity","viewActClickState","acitvityId","onClickViewActivity","editActClickState","onClickEditActivity","cloneActClickState","CloneActivitForm","onClickCloneActivity","toggleHideDialog","confirmationAction","RedirectUri","renderConfirm","closeButtonAriaLabel","UnsavedEditForm","UnsavedAddForm","UnsavedAddEditFormViewClick","UnsavedAddEditForm","CloneActConfirmation","UnsavedChangesLost","DeleteActConfirm","loadMasterData","_projects","Projects","validateForm","Utils","DisableForm","DisableAdd","HeaderMessage","DeletedExperiment","HeaderMessageType","NoEditPastExp","NoAdminExpOwner","setCurrentUserAsOwner","currUserAsOwner","loadAddForm","curUserProfile","PlanexLoading","loadEditForm","_activities","ExperimentActivities","reduecActivityArray","PreviousStartDate","NoExperimentWithId","checkAndReduceField","fieldValue","_disableDelete","_currActivityDate","DisableDelete","onChangeExperimentName","onProjectChange","option","onSelectExpDate","updatedDate","_previousStartDate","onSelectExperimentOwner","onChangeExperimentDesc","onDeleteExperiment","confirm","DeleteExptConfirm","onCloseExperiment","onSaveExperiment","mode","validatonObj","SaveExpProcessing","EID","ExperimentErrMsgs","TopLabel","ExptDetailsSaved","success","onDismissHeaderMessage","onClickDeleteExp","_hideDeleteDialog","HideDeleteDialog","DeleteNotes","onChangeDeleteNotes","onClickDeleteConfirmation","DeleteNotesError","onClickCloneExperiment","HideCloneDialog","onClickConfirmCloneExperiment","CloningExpLoaderTxt","_url","CloneExpId","CloneSuccessMessage","getActivityColumns","PlanActivityLabel","AddExperiment","SpinnerType","dismissButtonAriaLabel","Dropdown","selectedKey","marginLeft","DeleteActToolTip","renderTimmerMessages","ReloadActivity","FormMode","ParentId","formKey","formMode","_idValue","_pidValue","ParentIdParam","history","createBrowserHistory","initializeIcons","App","logoinCall","authProvider","login","provider","forceLogin","authenticationState","Fragment","AuthenticationState","Authenticated","Main","InProgress","Unauthenticated","ActionButton","allowDisabledFocus","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","AppFooter","Footer","pivotStyle","linkIsSelected","coinStyles","initials","personaStyles","primaryText","tertiaryText","MainHeader","handleUserInfoPanelClick","previous","logoutCall","logout","handlePivotClick","headerButtonProps","itemKey","isNavigate","renderTertiaryText","userDetail","appImageURL","appLogoText","src","alt","Pivot","aria-label","linkFormat","PivotLinkFormat","links","onLinkClick","PivotItem","headerText","coinSize","PersonaSize","size24","coinProps","hidePersonaDetails","Panel","isLightDismiss","PanelType","smallFixedFar","showSecondaryText","onRenderTertiaryText","PathNames","PathName","PathKey","PageNotFound","useBoolean","toggleRedirect","toggle","top","Link","default","CalendarMain","AppRoute","getSelectedKeyFromConfig","pathName","filteredPathNames","handleClick","pathname","Icons","appIconName","Images","AppHeaderImage","Headings","AppLogoText","account","fallback","exact","path","component","SystemAdminService","getSystemAdmin","systemAdmin","MainApp","getAccessToken","getSytstemAdminData","systemAdmins","createCacheItem","isUserAdmin","isUserArr","sysAdmin","SystemAdminEmailId","Provider","MainAppHeading","sectionAppHeading","sectionQuestionsHeading","UserTimeZone","viewFormDateFormat","flatPickrOutputFormat","flatPickrInputFormat","utcDateFormat","REACT_APP_OFFICE_LOCATION_ID","REACT_APP_OFFICE_LOCATION_NAME","Calendar","Heading","NextDateDispString","CalendarDateFormat","groupByEquipment","strEqualsCI","string1","string2","getDayName","dayNumber","long","allcaps","days","scopes","MsalAuthProvider","auth","authority","clientId","postLogoutRedirectUri","redirectUri","validateAuthority","navigateToLoginRequestUrl","cache","cacheLocation","storeAuthStateInCookie","loginType","LoginType","Redirect","tokenRefreshUri","uuidv1","storageType","localStorage","storagekeyString","storageitem","ExpiryDate","createdDate","expiryHrs","storageObj","keyStr","created","expireTime","setItem","removeCacheItem","removeItem","updateCacheItem","cacheObj","getItem","isCacheExpired","cacheItem","graph","isCahce","validToken","newAccInfo","acquireTokenSilent","client","Client","init","debugLogging","done","api","select","requestData","apply","personas","header","responseType","imageUrl","URL","createObjectURL","largeHeader","content","borderTop","main","ariaLive","CalendarDataService","getCalendarData","calenderDate","CalenderDate","processCalendarData","calendarData","getLocationdata","formatCalDate","getLocationsformLocEquip","locationEquipArr","arrayTofilter","locationIdArr","resultantArr","locEquipRecord","equipNames","EquipmentArr","formatActivityHeaderDate","_d","filterByLocationShiftIdDate","calData","locationId","shiftId","formLocationDateJson","nextDatesArr","locationData","shiftData","currUserEmail","resultantJsonArr","eachLocation","CalData","shiftObjDataObj","jndex","shiftObjArr","eachShiftObj","shiftObjLocal","ActivityNumber","ShiftColor","isStar","eachNextDates","objNextDates","DayIndex","ShiftData","splice","DateStringDB","completeObj","returnObj","locationDateJson","resultantGroupedArr","groupedEquipmentsArr","eachLocationDateJson","locCapacity","dayobj","groupByLocationAndDate","groupedByEquip","TotalInLocation","groupByShift","shiftActivities","noOfActivities","indicateShiftColor","allBookedForEmails","isCurrUserData","activitiesData","groupCalendarDataByLocByShift","actCountObjArr","filterByShiftDate","uiqActIds","countShiftWiseTotalPerDay","totolCountArr","getShiftDataForCalendar","getCalendarDataByDate","CalendarDatatService","getLocationsEquipments","locationEquipData","daysArr","getNextDaysArr","startDate","daysToAdd","strdateSting","aryDates","currentDate","setDate","getDate","nextDateObj","arrdateObj","Day","getDay","DateObj","DateString","processShiftLocationAvailability"],"mappings":"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","file":"static/js/main.acaa1e00.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Flatpickr from 'react-flatpickr';\r\nimport 'flatpickr/dist/themes/airbnb.css';\r\nimport './FlatDatePickr.css';\r\nimport {IconButton} from 'office-ui-fabric-react';\r\nimport {Label} from 'office-ui-fabric-react/lib/Label';\r\nconst uuidv4 = require('uuid/v4');\r\n\r\nclass FLatDatePickr extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            date: null,\r\n            viewForm:false,\r\n            isPast:false,\r\n            key:uuidv4()\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        const {dateInput,viewForm,isPast} = this.props;\r\n        if (dateInput) {\r\n            this.setState({\r\n                date: dateInput,\r\n                viewForm:viewForm,\r\n                isPast:isPast\r\n            });\r\n        }\r\n    }\r\n    componentDidUpdate(prevProps, prevState) {\r\n        const {dateInput,viewForm,isPast} = this.props;\r\n        if (prevProps.dateInput !== dateInput) {\r\n            this.setState({\r\n                date: dateInput,\r\n                viewForm\r\n            });\r\n        }\r\n        if (prevProps.viewForm !== viewForm) {\r\n            this.setState({\r\n                date: dateInput,\r\n                viewForm,\r\n                key:uuidv4()\r\n            });\r\n        }\r\n        if (prevProps.isPast !== isPast) {\r\n            this.setState({\r\n                date: dateInput,\r\n                viewForm,\r\n                isPast,\r\n                key:uuidv4()\r\n            });\r\n        }\r\n    }\r\n\r\n    handleDateSelect = dateTime => {\r\n        console.log(dateTime);\r\n        if (dateTime.length) {\r\n            this.setState({\r\n                date: dateTime,\r\n            });\r\n            this.props.updateFunc(dateTime[0]);\r\n        } else {\r\n            var today = new Date();\r\n            this.setState({\r\n                date: today,\r\n            });\r\n            this.props.updateFunc(today);\r\n        }\r\n    };\r\n    render() {\r\n        const {date, viewForm,isPast} = this.state;\r\n        const {labelHead, showNonFormLabel, required} = this.props;\r\n        const btnIcon = {iconName: 'Clear'};  \r\n        var dateOptions = {\r\n            wrap: true,\r\n            enableTime: false,\r\n            minDate: 'today',\r\n            dateFormat: 'm/d/Y'\r\n        };     \r\n        var dateOptionwithoutMindate = {\r\n            wrap: true,\r\n            enableTime: false,\r\n            dateFormat: 'm/d/Y'\r\n        };  \r\n        var currOptions = (isPast || viewForm)?dateOptionwithoutMindate:dateOptions;\r\n        return (\r\n            <div className={'flatPickerDiv'}>\r\n                {!showNonFormLabel && labelHead && (\r\n                    <Label className={required && 'requiredLabel'}>\r\n                        {labelHead}\r\n                    </Label>\r\n                )}\r\n                {showNonFormLabel && labelHead && (\r\n                    <label className={required && 'requiredLabel'}>\r\n                        {labelHead}\r\n                    </label>\r\n                )}\r\n                <Flatpickr\r\n                    key={uuidv4()}\r\n                    value={date}\r\n                    options={currOptions}\r\n                    className={viewForm?'flatPickerClass viewFormDisabled':'flatPickerClass'}\r\n                    onClose={this.handleDateSelect}\r\n                >\r\n                    <input\r\n                        disabled={viewForm}\r\n                        type=\"text\"\r\n                        data-input\r\n                        placeholder=\"Select Date..\"\r\n                        title={labelHead}\r\n                    />\r\n                    {viewForm?'':(\r\n                        <IconButton\r\n                            iconProps={btnIcon}\r\n                            data-clear\r\n                            disabled={viewForm}\r\n                            title=\"Clear\"\r\n                            ariaLabel=\"clear\"\r\n                            onClick={this.handleDateSelect}\r\n                        />\r\n                    )}\r\n                </Flatpickr>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nFLatDatePickr.propTypes = {\r\n    labelHead: PropTypes.string.isRequired,\r\n    updateFunc: PropTypes.func.isRequired,\r\n    dateInput: PropTypes.any,\r\n    required: PropTypes.bool,\r\n    isPast:PropTypes.bool,\r\n    viewForm:PropTypes.bool,\r\n    showNonFormLabel: PropTypes.bool,\r\n};\r\n\r\nexport default FLatDatePickr;\r\n","import * as axios from 'axios';\r\n\r\nvar LocationService = {\r\n    // SendEmail: () => {\r\n    getLocationEquipmentData() {\r\n        return new Promise((resolve, reject) => {\r\n            axios\r\n                .get('/api/Location/GetLocationEquipment')\r\n                .then(locationEquipments => {\r\n                    resolve(locationEquipments.data);\r\n                })\r\n                .catch(error => {\r\n                    console.log(error.response);\r\n                    reject(error);\r\n                });\r\n        });\r\n    },\r\n};\r\nexport default LocationService;\r\n","import { strict } from \"assert\";\r\n\r\nexport const  HomePageConfig = {\r\n    HeaderText: \"<div>Welcome to SWFT. Please use this tool to plan all your lab and office activities.</div><div>If you need help, please try the help guides and videos on the right. If you are still having problems then please <a href='https://forms.office.com/Pages/ResponsePage.aspx?id=DpvWqfKXUkmc7miDkuQ4tN7XxzwPpIZImNnRJywlQoBURVYxTkJKUlRaRkxDS1VMM01UVEpGNFpSNS4u' target='_blank'>submit a helpdesk ticket.</a></div>\",    \r\n    ActionLinks: [\r\n        [\r\n            {\r\n                Text: 'Plan an Experiment',\r\n                Icon: '',\r\n                Tooltip: '',\r\n                RedirectURI: '/PlanExperiment',\r\n                RedirectKey: '1',\r\n            },\r\n            {\r\n                Text: 'Plan Lab Activity',\r\n                Icon: '',\r\n                Tooltip: '',\r\n                RedirectURI: '/PlanActivity',\r\n                RedirectKey: '2',\r\n            },\r\n            {\r\n                Text: 'Plan Office Usage',\r\n                Icon: '',\r\n                Tooltip: '',\r\n                RedirectURI: '/PlanOfficeSpace',\r\n                RedirectKey: '3',\r\n            },\r\n        ],\r\n        [\r\n            {\r\n                Text: 'View Calendar',\r\n                Icon: '',\r\n                Tooltip: '',\r\n                RedirectURI: '/Calendar',\r\n                RedirectKey: '4',\r\n            },\r\n            {\r\n                Text: 'View My Activities',\r\n                Icon: '',\r\n                Tooltip: '',\r\n                RedirectURI: '/MyActivities',\r\n                RedirectKey: '5',\r\n            },\r\n            {\r\n                Text: 'View Lab Today',\r\n                Icon: 'PowerBILogo',\r\n                Tooltip: 'Redirects to Power BI',\r\n                RedirectURI: '',\r\n                RedirectKey: '',\r\n            },\r\n            {\r\n                Text: 'View Near Term Report',\r\n                Icon: 'PowerBILogo',\r\n                Tooltip: 'Redirects to Power BI',\r\n                RedirectURI: '',\r\n                RedirectKey: '',\r\n            },\r\n        ]\r\n    ],\r\n    GuideLinks: [\r\n        {\r\n            Text: 'Introduction to SWFT',\r\n            Icon: 'PDF',\r\n            Tooltip: '',\r\n            RedirectURI: '',\r\n            RedirectKey: '',\r\n        },\r\n        {\r\n            Text: 'Quick Overview',\r\n            Icon: 'MyMoviesTV',\r\n            Tooltip: '',\r\n            RedirectURI: '',\r\n            RedirectKey: '',\r\n        },\r\n        {\r\n            Text: 'Plan an Experiment',\r\n            Icon: 'MyMoviesTV',\r\n            Tooltip: '',\r\n            RedirectURI: '',\r\n            RedirectKey: '',\r\n        },\r\n        {\r\n            Text: 'Plan Lab Activity',\r\n            Icon: 'MyMoviesTV',\r\n            Tooltip: '',\r\n            RedirectURI: '',\r\n            RedirectKey: '',\r\n        },\r\n        {\r\n            Text: 'Plan Office Usage',\r\n            Icon: 'MyMoviesTV',\r\n            Tooltip: '',\r\n            RedirectURI: '',\r\n            RedirectKey: '',\r\n        },\r\n        {\r\n            Text: 'Clone an Experiment or Activity',\r\n            Icon: 'MyMoviesTV',\r\n            Tooltip: '',\r\n            RedirectURI: '',\r\n            RedirectKey: '',\r\n        }\r\n    ]\r\n    \r\n};\r\n","import *as React from 'react';\r\nimport {chunk} from 'lodash';\r\nimport {Depths} from '@uifabric/fluent-theme/lib/fluent/FluentDepths';\r\nimport { FontIcon } from 'office-ui-fabric-react/lib/Icon';\r\nimport { IHomePageLink, IHomeButtonProps } from './IHomeButton';\r\nimport { link } from 'fs';\r\n\r\nexport default class HomeButton extends React.Component<IHomeButtonProps,{}> {    \r\n    render() {\r\n        const { link } = this.props;\r\n        let disabledBtn = link.RedirectURI?\"ms-Grid PageTile\":\"ms-Grid PageTile disabledHomeBtn\";\r\n        return (            \r\n            <div className={disabledBtn} \r\n                title={link.Tooltip}    \r\n                onClick={ev =>this.handleSelection(link,ev)}\r\n                style={{boxShadow: Depths.depth16, minHeight:\"65px\", border:\"solid 2px gray\"}} >                                                                               \r\n                <div className=\"ms-Grid-row\" style={{width:\"100%\"}} > \r\n                    <div className=\"ms-Grid-col ms-sm4 ms-md4 ms-lg4\" style={{textAlign:\"center\"}}>\r\n                    { link.Icon ? <FontIcon iconName={link.Icon} style={{paddingLeft:\"20px\", fontSize:\"1.7em\", verticalAlign:\"bottom\", color:\"#EDBD11\"}}></FontIcon> : \"\" }\r\n                    </div>\r\n                    <div className=\"ms-Grid-col ms-sm8 ms-md8 ms-lg8\">\r\n                        { link.Text }\r\n                    </div>                        \r\n                </div>              \r\n            </div>\r\n        );\r\n    }    \r\n    handleSelection = (item:IHomePageLink, ev:any) => {\r\n        ev.preventDefault();\r\n        if(!item.RedirectKey){\r\n            window.open(item.RedirectURI, \"_blank\");\r\n        }\r\n        this.props.handlePageTileClick(item);\r\n    }\r\n}\r\n\r\n","import *as React from 'react';\r\nimport './Home.css';\r\nimport {HomePageConfig} from './HomeConfig';\r\nimport PageTiles from '../Components/Common/PageTiles';\r\nimport {Redirect} from 'react-router-dom';\r\nimport { IHomePageLink } from '../Components/Common/IHomeButton';\r\nimport HomeButton from \"../Components/Common/HomeButton\";\r\n\r\ninterface IHomeState{\r\n    shouldRedirect:boolean;\r\n    redirectURI:any;\r\n}\r\ninterface IHomeProps{\r\n    handleRedirection:(selectedKey:any)=>void;\r\n}\r\ninterface IHomePageConfig{\r\n    HeaderText ?: string;\r\n    ActionLinks : IHomePageLink[][];\r\n    GuideLinks : IHomePageLink[];\r\n}\r\nexport class Home extends React.Component<IHomeProps,IHomeState> {\r\n    constructor(props:IHomeProps) {\r\n        super(props);\r\n        this.state ={\r\n            shouldRedirect: false,\r\n            redirectURI:'/Home'\r\n        };\r\n        this.props.handleRedirection('0');\r\n    }\r\n    \r\n    handlePageTileClick = (item: IHomePageLink) => {\r\n        this.setState({\r\n            shouldRedirect: item.RedirectKey!=\"\",\r\n            redirectURI:item.RedirectURI \r\n        });\r\n        this.props.handleRedirection(item.RedirectKey);\r\n    };\r\n    getHomePageConfig = () =>{\r\n     try {\r\n        var homePageConfig = JSON.parse(process.env.REACT_APP_HOME_PAGE_CONFIG?process.env.REACT_APP_HOME_PAGE_CONFIG:'');\r\n        if (!homePageConfig) {\r\n            return HomePageConfig as IHomePageConfig;\r\n        }else\r\n        {\r\n            return homePageConfig as IHomePageConfig; //JSON.parse(homePageConfig);\r\n        } \r\n     } catch (error) {\r\n         console.log(error);\r\n         return HomePageConfig;\r\n     }\r\n    }\r\n    render() {\r\n        const {shouldRedirect,redirectURI} = this.state;\r\n        const pageConfig = this.getHomePageConfig();\r\n        const columnWidth = 12 / pageConfig.ActionLinks?.length;\r\n        const actionLinkColumnClass = `ms-Grid-col ms-sm12 ms-md${columnWidth} ms-lg${columnWidth}`;\r\n        return (\r\n            <div className=\"ms-Grid Home\" dir=\"ltr\">\r\n                <div className=\"ms-Grid-row\" style={{textAlign: \"left\", paddingTop:\"20px\"}}>\r\n                    { \r\n                        pageConfig.HeaderText && (\r\n                            <div className=\"ms-Grid-col ms-sm12\" style={{fontSize: \"14pt\", paddingTop:\"10px\"}} dangerouslySetInnerHTML={{__html: pageConfig.HeaderText}}></div>\r\n                        )\r\n                    }\r\n                </div>\r\n                <div className=\"ms-Grid-row\" style={{paddingTop:\"50px\"}}>\r\n                    <div className=\"ms-Grid-col ms-sm12 ms-md7 ms-lg7\">\r\n                        <div className=\"ms-Grid\">\r\n                            <div className=\"ms-Grid-row\">\r\n                                {\r\n                                    pageConfig.ActionLinks.map((linkArr: IHomePageLink[], ind) => {\r\n                                        return (\r\n                                            <div className={actionLinkColumnClass}>\r\n                                                {\r\n                                                    linkArr.map((_link: IHomePageLink, _ind) => {\r\n                                                        return <HomeButton key={_ind} link={ _link } handlePageTileClick={this.handlePageTileClick}></HomeButton>\r\n                                                    })\r\n                                                }\r\n                                            </div>                                            \r\n                                        );\r\n                                    })\r\n                                }                                                                                     \r\n                            </div>\r\n                        </div>\r\n\r\n                        {/* <PageTiles\r\n                            maxTilesPerRow={itemToDisplay}\r\n                            pageLinksArr={pageConfig.HomePageLinks}\r\n                            handlePageTileClick={this.handlePageTileClick}\r\n                        /> */}\r\n                    </div>\r\n                    <div className=\"ms-Grid-col ms-sm12 ms-md2 ms-lg2\">\r\n                        <div style={{width:\"50%\", borderRight:\"solid 5px gray\", minHeight:\"430px\", marginTop:\"7px\"}}></div>\r\n                    </div>\r\n                    <div className=\"ms-Grid-col ms-sm12 ms-md3 ms-lg3\">\r\n                        {\r\n                            pageConfig.GuideLinks.map((_link: IHomePageLink, _ind) => {\r\n                                return <HomeButton link={ _link } handlePageTileClick={this.handlePageTileClick}></HomeButton>;\r\n                            })\r\n                        }\r\n                    </div>\r\n                </div>\r\n                {shouldRedirect?\r\n                <Redirect to={redirectURI} />:\"\"}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport {Depths} from '@uifabric/fluent-theme/lib/fluent/FluentDepths';\r\nimport PropTypes from 'prop-types';\r\ninterface IFormWrapper {\r\n    FormHeading:string\r\n}\r\nexport default function FormWrapper(props:React.PropsWithChildren<IFormWrapper>) {\r\n    return (\r\n        <div className=\"FormWrapper\" style={{boxShadow: Depths.depth4}}>\r\n            <div className=\"formSection\">\r\n                <div className=\"sectionContainer\">\r\n                    <div className=\"subHeading\">\r\n                        <div style={{fontSize: \"12pt\", fontWeight: \"bold\"}}>{props.FormHeading}</div>\r\n                    </div>\r\n                    <div className=\"FormBody\">{props.children}</div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n \r\n","import * as axios from 'axios';\r\nimport AppConfig from '../Constans';\r\nconst moment = require('moment');\r\nfunction processDeleteActivity(id,notes) {\r\n    let jsonObj = {};\r\n    try {\r\n        jsonObj.ActivityId = id;\r\n        jsonObj.ExperimentId = 0;\r\n        jsonObj.Notes = notes;\r\n    } catch (error) {\r\n        console.log(error);\r\n        jsonObj = false;\r\n    }\r\n    return jsonObj;\r\n}\r\nfunction processActivity(activityObj,type) {\r\n    let jsonObj = {};\r\n    try {\r\n        jsonObj.ActivityName = activityObj.activityName;\r\n        jsonObj.ActivityDescription = activityObj.activityDescription;\r\n        jsonObj.DayOffset = type === AppConfig.ActivityForm.OfcAndIndiActivityType? 0: activityObj.DayOffset;\r\n        jsonObj.ActivityDate = activityObj.activityDate\r\n        ? moment(activityObj.activityDate).format(AppConfig.ActivityForm.AtivityDateFormat)\r\n        : '';\r\n        jsonObj.ShiftIds = activityObj.selectedShiftIds;\r\n        jsonObj.BookedByName = activityObj.bookedByEmail.DisplayName;\r\n        jsonObj.BookedByEmail = activityObj.bookedByEmail.Email;\r\n        jsonObj.IsEmployee = !activityObj.showVisitorField;\r\n        if(activityObj.showVisitorField){\r\n            jsonObj.BookedForEmail = activityObj.visitorEmail;\r\n            jsonObj.BookedForName = activityObj.visitorEmail.split('@')[0];\r\n        }else{\r\n            if(activityObj.bookedForEmail.length>0){\r\n                jsonObj.BookedForName = activityObj.bookedForEmail[0].DisplayName;            \r\n                jsonObj.BookedForEmail = activityObj.bookedForEmail[0].Email; \r\n            }\r\n            else{\r\n                return false;\r\n            }\r\n        }      \r\n        jsonObj.LocationIds = activityObj.selectedLocations;\r\n        jsonObj.EquipmentIds = activityObj.selectedEquipments; \r\n        jsonObj.ExperimentId = activityObj.ExperimentId?activityObj.ExperimentId:null;\r\n        if(activityObj.ExperimentId){\r\n            let experimentDate = moment(activityObj.ExperimentStartDate);\r\n            let actviityDate = moment(activityObj.activityDate);\r\n            let offsetValue = Math.ceil(actviityDate.diff(experimentDate,'days'));\r\n            jsonObj.DayOffset = offsetValue;\r\n        }       \r\n    } catch (error) {\r\n        console.log(error);\r\n        jsonObj = false;\r\n    }\r\n    return jsonObj;\r\n}\r\nvar ActivityService = {\r\n    cloneActivity(jsonObj) {\r\n        return new Promise((resolve, reject) => {\r\n            axios\r\n            .post(`/api/Activity/Clone`,jsonObj)\r\n                .then(response => {\r\n                    resolve(response.data);\r\n                })\r\n                .catch(error => {\r\n                    console.log(error.response);\r\n                    reject(error);\r\n                });\r\n        });\r\n    },\r\n    getActivityById(id) {\r\n        return new Promise((resolve, reject) => {\r\n            axios\r\n                .get(`/api/Activity/${id}`)\r\n                .then(shifts => {\r\n                    resolve(shifts.data);\r\n                })\r\n                .catch(error => {\r\n                    console.log(error.response);\r\n                    reject(error);\r\n                });\r\n        });\r\n    },\r\n    deleteActivityRecordById(id,notes) {        \r\n        return new Promise((resolve, reject) => {\r\n            let payLoadObj = processDeleteActivity(id,notes);\r\n            if (!payLoadObj) {\r\n                let msg = 'Error in processing Data. Activity Date not found';\r\n                reject(msg);\r\n            }\r\n            axios\r\n                .put(`/api/Activity/Delete`,{jsonObj:payLoadObj})\r\n                .then(shifts => {\r\n                    resolve(shifts.data);\r\n                })\r\n                .catch(error => {\r\n                    console.log(error.response);\r\n                    reject(error);\r\n                });\r\n        });\r\n    },\r\n    createActivityRecord(activityObj,type) {\r\n        return new Promise((resolve, reject) => {\r\n            let payLoadObj = processActivity(activityObj,type);\r\n            if (!payLoadObj) {\r\n                let msg = 'Error in processing Data. Activity Date not found';\r\n                reject(msg);\r\n            }else{\r\n                payLoadObj.Notes = \"Creation of activity by \"+ payLoadObj.BookedByName +\" for \"+payLoadObj.BookedForName+\" on \"\r\n            + payLoadObj.ActivityDate;\r\n            }\r\n            axios\r\n                .post('/api/Activity', {\r\n                    jsonObj: payLoadObj,\r\n                })\r\n                .then(activity => {\r\n                    resolve(activity.data);\r\n                })\r\n                .catch(error => {\r\n                    console.log(error.response);\r\n                    reject(error);\r\n                });\r\n        });\r\n    },\r\n    updateActivityRecord(activityObj,type,notes) {\r\n        return new Promise((resolve, reject) => {\r\n            let payLoadObj = processActivity(activityObj,type);\r\n            if (!payLoadObj) {\r\n                let msg = 'Error in processing Data. Activity Date not found';\r\n                reject(msg);\r\n            }else{\r\n                payLoadObj.Id = activityObj.Id;\r\n                payLoadObj.Notes = notes;\r\n            }\r\n            axios\r\n                .put('/api/Activity', {\r\n                    jsonObj: payLoadObj,\r\n                })\r\n                .then(activity => {\r\n                    resolve(activity.data);\r\n                })\r\n                .catch(error => {\r\n                    console.log(error.response);\r\n                    reject(error);\r\n                });\r\n        });\r\n    },\r\n    CloneIndividualActivity(actObj){\r\n        return new Promise((resolve, reject) => {\r\n            axios\r\n                .post('/api/Activity/Clone', actObj)\r\n                .then(res => {\r\n                    resolve(res.data);\r\n                })\r\n                .catch(error => {\r\n                    console.log(error);\r\n                    reject(error);\r\n                });\r\n        });\r\n    }\r\n};\r\nexport default ActivityService;\r\n","import * as axios from 'axios';\r\nimport AppConfig from '../Constans';\r\nconst moment = require('moment');\r\n\r\nfunction processExperiment(experiment) {\r\n    let jsonObj = {};\r\n    jsonObj.Id = experiment.Id;\r\n    jsonObj.Name = experiment.Name;\r\n    jsonObj.Description = experiment.Description;\r\n    jsonObj.ProjectId = experiment.ProjectId;\r\n    jsonObj.Remarks = experiment.Remarks;\r\n    jsonObj.Owner = experiment.Owner;\r\n    jsonObj.StatusId = 1;\r\n    jsonObj.UpdateActivities = experiment.UpdateActivities;\r\n    jsonObj.StartDate = experiment.StartDate\r\n    ? moment(experiment.StartDate).format(AppConfig.PlanExperiment.ExpDateFormat)\r\n    : '';\r\n    return jsonObj\r\n}\r\nlet ExperimentService = {\r\n    getProjects() {\r\n        return new Promise((resolve, reject) => {\r\n            axios\r\n                .get('/api/Experiment/GetProjects')\r\n                .then(projects => {\r\n                    resolve(projects);\r\n                })\r\n                .catch(error => {\r\n                    console.log(error);\r\n                    reject(error);\r\n                });\r\n        });\r\n    },\r\n    addExperiment(experiment){\r\n        return new Promise((resolve, reject)=>{\r\n            axios\r\n            .post('/api/Experiment/Add', processExperiment(experiment))\r\n            .then(result => {\r\n                resolve(result.data);\r\n            })\r\n            .catch(error => {\r\n                console.log(error);\r\n                reject(error);\r\n            });\r\n        });\r\n    },\r\n    updateExperiment(experiment){\r\n        return new Promise((resolve, reject)=>{           \r\n            axios\r\n            .post('/api/Experiment/Update', processExperiment(experiment))\r\n            .then(result => {\r\n                resolve(result.data.recordsets);\r\n            })\r\n            .catch(error => {\r\n                console.log(error);\r\n                reject(error);\r\n            });\r\n        });\r\n    },\r\n    getExperiment(id){\r\n        return new Promise((resolve, reject) => {\r\n            axios\r\n                .get(`/api/Experiment/${id}`)\r\n                .then(res => {\r\n                    let _expObj = res.data.recordset.length > 0  ? res.data.recordset[0] : null;\r\n                    if(_expObj){\r\n                        var expDate =_expObj.StartDate?new Date(moment.utc(_expObj.StartDate).format(AppConfig.DateFormats.NoTimeDate)):null;\r\n                        let _experiment = {\r\n                            \"Id\": _expObj.Id,\r\n                            \"Name\": _expObj.Name,\r\n                            \"StartDate\": expDate? expDate:null,\r\n                            \"Description\": _expObj.Description,\r\n                            \"StatusId\": _expObj.StatusId,\r\n                            \"Remarks\": _expObj.Remarks,\r\n                            \"ProjectId\": _expObj.ProjectId,\r\n                            \"Owner\": [{\r\n                                \"Email\": _expObj.Owner,\r\n                                \"DisplayName\": _expObj.OwnerName\r\n                            }]\r\n                        }; \r\n                        resolve(_experiment);\r\n                    }\r\n                    else{\r\n                        resolve(null);   \r\n                    }\r\n                })\r\n                .catch(error => {\r\n                    console.log(error);\r\n                    reject(error);\r\n                });\r\n        });\r\n    },\r\n    getActivitiesForExp(id){\r\n        return new Promise((resolve, reject) => {\r\n            axios\r\n                .get(`/api/Experiment/${id}/activities`)\r\n                .then(res => {\r\n                    resolve(res.data);\r\n                })\r\n                .catch(error => {\r\n                    console.log(error);\r\n                    reject(error);\r\n                });\r\n        });\r\n    },\r\n    deleteExperiment(expId, notes){\r\n        return new Promise((resolve, reject) => {\r\n            axios\r\n                .post('/api/Experiment/Delete', {\r\n                    \"ExperimentId\": expId,\r\n                    \"Notes\": notes\r\n                })\r\n                .then(res => {\r\n                    resolve(res.data);\r\n                })\r\n                .catch(error => {\r\n                    console.log(error);\r\n                    reject(error);\r\n                });\r\n        });\r\n    },\r\n    deleteActivities(jsonOnj){\r\n        return new Promise((resolve, reject) => {\r\n            axios\r\n                .post(`/api/Experiment/activities/delete`,jsonOnj)\r\n                .then(res => {\r\n                    resolve(res.data);\r\n                })\r\n                .catch(error => {\r\n                    console.log(error);\r\n                    reject(error);\r\n                });\r\n        });\r\n    },\r\n    cloneExperiment(expId){\r\n        return new Promise((resolve, reject) => {\r\n            axios\r\n                .post('/api/Experiment/Clone', {\r\n                    \"ExperimentId\": expId\r\n                })\r\n                .then(res => {\r\n                    resolve(res.data.output);\r\n                })\r\n                .catch(error => {\r\n                    console.log(error);\r\n                    reject(error);\r\n                });\r\n        });\r\n    },\r\n    CloneActivity(actObj){\r\n        return new Promise((resolve, reject) => {\r\n            axios\r\n                .post('/api/Activity/Clone', actObj)\r\n                .then(res => {\r\n                    resolve(res.data);\r\n                })\r\n                .catch(error => {\r\n                    console.log(error);\r\n                    reject(error);\r\n                });\r\n        });\r\n    }\r\n};\r\nexport default ExperimentService;","import * as _ from 'lodash';\r\nimport ShiftService from '../../services/shift-service';\r\nimport LocationService from '../../services/location-service';\r\nimport AppConfig from '../../Constans';\r\nimport ActivityService from '../../services/activity-service';\r\nimport ExperimentService from '../../services/experiment-service';\r\nvar moment = require('moment');\r\n\r\n\r\nexport function formatActivityDate(date) {\r\n    if (date) {\r\n        return moment(date).format(AppConfig.ActivityForm.AtivityDateFormat);\r\n    } else {\r\n        return moment().format(AppConfig.ActivityForm.AtivityDateFormat);\r\n    }\r\n}\r\nexport function formatNonTimeDate(date) {\r\n    if(date){\r\n        return moment.utc(date).format(AppConfig.DateFormats.NoTimeDate);\r\n    }else{\r\n        return null;\r\n    }\r\n}\r\nexport function differentiateOfficeFromActivity(isOffice,locationDetails){\r\n\r\n}\r\nexport function getUniqueLocationObjs(equipmentLocationsArr,office) {\r\n    var pushedLocations = [];\r\n    if(!office){\r\n        //remove location Offfice form form\r\n        pushedLocations.push(AppConfig.ActivityForm.officeSpaceUsageLocation);\r\n    }\r\n    let uniqArr = _.filter(equipmentLocationsArr, function (o) {\r\n        if (pushedLocations.indexOf(o.LocationId) === -1) {\r\n            pushedLocations.push(o.LocationId);\r\n            let obj = {};\r\n            obj.LocationId = o.LocationId;\r\n            obj.LocationName = o.LocationName;\r\n            obj.LocationDescription = o.LocationDescription;\r\n            obj.LocationCapacity = o.LocationCapacity;\r\n            return obj;\r\n        }\r\n    });\r\n    return uniqArr;\r\n}\r\nexport function formLocationShiftAvailabilityArr(locations,shifts,lsActivityData,isOffice) {\r\n    var pushedLSAs = [];\r\n    for (let locaIndex = 0; locaIndex < locations.length; locaIndex++) {\r\n        let locationObj = locations[locaIndex];\r\n        let lsaObj = {};\r\n        lsaObj.LocationId = locationObj.LocationId;\r\n        lsaObj.LocationName = locationObj.LocationName;\r\n        lsaObj.LocationDescription = locationObj.LocationDescription;\r\n        lsaObj.LocationCapacity = locationObj.LocationCapacity;\r\n        for (let shiftIndex = 0; shiftIndex < shifts.length; shiftIndex++) {\r\n            let shiftObj = shifts[shiftIndex];\r\n            lsaObj.ShiftId = shiftObj.Id;\r\n            lsaObj.ShiftName = shiftObj.Name;\r\n            lsaObj.ShiftStartHour = shiftObj.StartHour;\r\n            lsaObj.ShiftStartMin = shiftObj.StartMin;\r\n            lsaObj.ShiftEndHour = shiftObj.EndHour;\r\n            lsaObj.ShiftEndMin = shiftObj.EndMin;\r\n            lsaObj.ShiftDisplayName = shiftObj.DisplayName;\r\n            if(lsActivityData.length>0){\r\n                let filterdlsaArr = _.filter(lsActivityData,{ShiftId:shiftObj.Id,LocationId:locationObj.LocationId});\r\n                if(filterdlsaArr.length>0){\r\n                    var bookedForArr = [];\r\n                    bookedForArr =  _.map(filterdlsaArr,'BookedForEmail');\r\n                    let uniqPersons = _.uniq(bookedForArr);\r\n                    if(shiftObj.Id === AppConfig.ActivityForm.TBDRejectShiftId){\r\n                        lsaObj.NoOfActivities = uniqPersons.length;\r\n                        lsaObj.Status = uniqPersons.length +\"/?\";\r\n                        lsaObj.IndicationColor = \"Green\";                        \r\n                        lsaObj.OnAlert = false;                        \r\n                    }else{\r\n                        lsaObj.NoOfActivities = uniqPersons.length;\r\n                        lsaObj.Status = uniqPersons.length + \"/\" +locationObj.LocationCapacity;\r\n                        lsaObj.IndicationColor = uniqPersons.length >= locationObj.LocationCapacity ?\"Red\": \"Green\";\r\n                        lsaObj.OnAlert = uniqPersons.length >= locationObj.LocationCapacity;\r\n                    }\r\n                }\r\n                else{\r\n                    if(shiftObj.Id === AppConfig.ActivityForm.TBDRejectShiftId){\r\n                        lsaObj.NoOfActivities = 0;\r\n                        lsaObj.Status = \"0/?\";\r\n                        lsaObj.IndicationColor = \"Green\";  \r\n                        lsaObj.OnAlert = false;                        \r\n                    }else{\r\n                        lsaObj.NoOfActivities = 0;\r\n                        lsaObj.Status = \"0/\"+locationObj.LocationCapacity;\r\n                        lsaObj.IndicationColor = \"Green\";\r\n                        lsaObj.OnAlert = false;  \r\n                    }\r\n                }\r\n\r\n            }\r\n            else{\r\n                if(shiftObj.Id === AppConfig.ActivityForm.TBDRejectShiftId){\r\n                    lsaObj.Status = \"0/?\";\r\n                    \r\n                }else{\r\n                    lsaObj.Status = \"0/\"+locationObj.LocationCapacity;\r\n                }\r\n                lsaObj.IndicationColor = \"Green\";\r\n            }  \r\n            if(isOffice){\r\n                if(lsaObj.LocationId === AppConfig.ActivityForm.officeSpaceUsageLocation){\r\n                    pushedLSAs.push(JSON.parse(JSON.stringify(lsaObj)));\r\n                }\r\n            }\r\n            else{\r\n                pushedLSAs.push(JSON.parse(JSON.stringify(lsaObj)));\r\n            }          \r\n        }\r\n    }\r\n \r\n    return _.orderBy(pushedLSAs,'ShiftName');\r\n}\r\nexport function getShiftData() {\r\n    return new Promise((resolve, reject) => {\r\n        ShiftService.getShiftsData()\r\n            .then(shifts => resolve(shifts))\r\n            .catch(error => {\r\n                reject(error);\r\n            });\r\n    });\r\n}\r\nexport function getShiftLocationAvaliability(activityObj) {\r\n    return new Promise((resolve, reject) => {\r\n        ShiftService.getShiftLocationAvaliability(activityObj)\r\n            .then(shiftLocationAvailabilities =>\r\n                resolve(shiftLocationAvailabilities),\r\n            )\r\n            .catch(error => {\r\n                reject(error);\r\n            });\r\n    });\r\n}\r\nexport function getLocationEquipments() {\r\n    return new Promise((resolve, reject) => {\r\n        LocationService.getLocationEquipmentData()\r\n            .then(shifts => resolve(shifts))\r\n            .catch(error => {\r\n                reject(error);\r\n            });\r\n    });\r\n}\r\nexport function createActivity(activityObj,type) {\r\n    return new Promise((resolve, reject) => {\r\n        ActivityService.createActivityRecord(activityObj,type)\r\n            .then(activity => resolve(activity))\r\n            .catch(error => {\r\n                reject(error);\r\n            });\r\n    });\r\n}\r\nexport function cloneActivity(activityObj) {\r\n    return new Promise((resolve, reject) => {\r\n        ActivityService.CloneIndividualActivity(activityObj)\r\n            .then(activity => resolve(activity))\r\n            .catch(error => {\r\n                reject(error);\r\n            });\r\n    });\r\n}\r\nexport function updateActivity(activityObj,type,notes) {\r\n    return new Promise((resolve, reject) => {\r\n        ActivityService.updateActivityRecord(activityObj,type,notes)\r\n            .then(activity => resolve(activity))\r\n            .catch(error => {\r\n                reject(error);\r\n            });\r\n    });\r\n}\r\nexport function getActivityByID(activityId) {\r\n    return new Promise((resolve, reject) => {\r\n        ActivityService.getActivityById(activityId)\r\n            .then(activity => resolve(activity))\r\n            .catch(error => {\r\n                reject(error);\r\n            });\r\n    });\r\n}\r\nexport function deleteActivityRecordByID(id,notes) {\r\n    return new Promise((resolve, reject) => {\r\n        ActivityService.deleteActivityRecordById(id,notes)\r\n            .then(deleteFlag => resolve(deleteFlag))\r\n            .catch(error => {\r\n                reject(error);\r\n            });\r\n    });\r\n}\r\nexport function validateEmail(email) {\r\n    var re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n    return re.test(String(email).toLowerCase());\r\n}\r\n","import * as React from 'react';\r\nimport {\r\n    MessageBar,\r\n    MessageBarType,\r\n} from 'office-ui-fabric-react/lib/MessageBar';\r\nimport {Spinner, SpinnerSize} from 'office-ui-fabric-react/lib/Spinner';\r\nimport {getShiftLocationAvaliability, formLocationShiftAvailabilityArr, formatActivityDate} from './ActivityService';\r\nimport {Icon} from 'office-ui-fabric-react';\r\nimport { ILocationShiftAvailabilityProps, ILocationShiftAvailabilityState, ILocationShiftAvailability } from './interfaces/ILocationShiftAvailability';\r\nimport AppConfig from '../../Constans';\r\nimport './StickyTable.css';\r\nimport _ from 'lodash';\r\nimport { IActivityShift } from './interfaces/IActivityForm';\r\nimport { Z_STREAM_END } from 'zlib';\r\n\r\nconst uuidv4 = require('uuid/v4');\r\n\r\nexport default class LocationShiftAvailability extends React.Component<ILocationShiftAvailabilityProps,ILocationShiftAvailabilityState> {\r\n    constructor(props:ILocationShiftAvailabilityProps) {\r\n        super(props);\r\n        this.state = {\r\n            isLoaded: false,\r\n            selectedDate: new Date(formatActivityDate()),\r\n            shiftLocationDataArr: [],\r\n            errorMsg:'',\r\n            showErrorMsg:false\r\n        };\r\n    }\r\n    componentDidMount() {\r\n        const {activityDate} = this.props;\r\n        this.setState({\r\n            selectedDate: activityDate,\r\n        });\r\n        this.callForShiftLocationAvailabilityData(activityDate);\r\n    }\r\n    callForShiftLocationAvailabilityData(activityDate:any) {\r\n        const{Locations,Shifts} = this.props;\r\n        getShiftLocationAvaliability({activityDate})\r\n        .then(shiftLocationAvailabilities => {\r\n                if (shiftLocationAvailabilities) {\r\n                    var lsaArr:any = formLocationShiftAvailabilityArr(Locations,Shifts,shiftLocationAvailabilities,this.props.office);               \r\n                    this.setState({\r\n                        shiftLocationDataArr: lsaArr,\r\n                        isLoaded: true,\r\n                    });\r\n                    this.props.sendLsaArr(lsaArr);\r\n                }\r\n                else{\r\n                    this.setState({\r\n                        isLoaded:true,\r\n                        showErrorMsg: true,\r\n                        errorMsg: AppConfig.ActivityForm.ErrorLSADataFetchMessage\r\n                    }); \r\n                    console.log(\"No Shift Location Availabilities\");\r\n                }\r\n            })\r\n            .catch(error => {\r\n                this.setState({\r\n                    isLoaded:true,\r\n                    showErrorMsg: true,\r\n                    errorMsg: AppConfig.ActivityForm.ErrorLSADataFetchMessage\r\n                });\r\n                console.log(error);\r\n            });\r\n    }\r\n    componentDidUpdate(prevProps:ILocationShiftAvailabilityProps,prevState:ILocationShiftAvailabilityState ) {\r\n        const {activityDate} = this.props;\r\n        if (prevProps.activityDate !== activityDate) {\r\n            this.setState({\r\n                isLoaded: false,\r\n            });\r\n            this.callForShiftLocationAvailabilityData(activityDate);\r\n        }\r\n    }\r\n    renderErrorMsg(msg:string){\r\n        return(\r\n            <MessageBar messageBarType={MessageBarType.error}>\r\n                {msg}\r\n            </MessageBar>\r\n        );\r\n    }\r\n    reduceLSAByLocations = (lsaArr: ILocationShiftAvailability[], shiftArr: IActivityShift[])=>{\r\n        const locationSortedData = _.orderBy([...lsaArr], ['LocationName', 'ShiftName']);\r\n        let reducedArr: any[] = [];\r\n        _.forEach(locationSortedData, (item, ind)=>{\r\n            let reducedItems = reducedArr.filter((l)=>{return l.LocationId===item.LocationId});\r\n            if(reducedItems.length===0){\r\n                //create a copy of the item with location properties only\r\n                let _locationItem = Object.assign({}, {\r\n                    \"LocationId\": item.LocationId, \r\n                    \"LocationName\": item.LocationName, \r\n                    \"LocationDescription\": item.LocationDescription\r\n                });\r\n                _.set(_locationItem, \"status-\"+item.ShiftId, item.Status);\r\n                _.set(_locationItem, \"count-\"+item.ShiftId, item.NoOfActivities);\r\n                _.set(_locationItem, \"color-\"+item.ShiftId, item.IndicationColor);\r\n                reducedArr.push(_locationItem);\r\n            }\r\n            else{\r\n                let _locationItem = reducedItems[0];\r\n                _.set(_locationItem, \"status-\"+item.ShiftId, item.Status);\r\n                _.set(_locationItem, \"count-\"+item.ShiftId, item.NoOfActivities);\r\n                _.set(_locationItem, \"color-\"+item.ShiftId, item.IndicationColor);\r\n            }\r\n        });    \r\n        return reducedArr;\r\n    }\r\n    render() {\r\n        const {isLoaded, shiftLocationDataArr,showErrorMsg,errorMsg} = this.state;\r\n        const reducedArr = this.reduceLSAByLocations(shiftLocationDataArr, this.props.Shifts);\r\n        const sortedShifts = _.orderBy([...this.props.Shifts], ['Name']);\r\n        return (\r\n            <div className={'LocationShiftAvailability'}>\r\n                {isLoaded ? (showErrorMsg?this.renderErrorMsg(errorMsg)\r\n                    :(<div>\r\n                        {shiftLocationDataArr.length === 0 ? (\r\n                            <>\r\n                                <MessageBar>\r\n                                    No Activities for the day!.\r\n                                    <Icon\r\n                                        iconName=\"Emoji2\"\r\n                                        className=\"iconPadClasss\"\r\n                                    />\r\n                                </MessageBar>\r\n                            </>\r\n                        ) : (\r\n                            <table className=\"stickyTable\">\r\n                                <thead>\r\n                                    <tr key={'row0'}>                                        \r\n                                        <th key={'loc0'}>Location</th>\r\n                                        {\r\n                                            sortedShifts.map((s)=>{ return <th key={'shift'+s.Id}>{s.Name}</th>; })\r\n                                        }\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    {reducedArr.map(\r\n                                        (_locItem, _ind) => {\r\n                                            return (\r\n                                                <tr key={uuidv4()}>                                                    \r\n                                                    <td key={ 'loc' + _locItem.LocationId } title={ _locItem.LocationDescription }>\r\n                                                        {_locItem.LocationName}\r\n                                                    </td>\r\n                                                    {\r\n                                                        sortedShifts.map((s)=>{ return (\r\n                                                            <td key={ 'shift' + s.Id + _ind } className={ 'rowColor' + _.get(_locItem, 'color-'+s.Id) }>\r\n                                                                {this.props.office?_.get(_locItem, 'count-'+s.Id):_.get(_locItem, 'status-'+s.Id)}  \r\n                                                            </td>\r\n                                                        );})\r\n                                                    }                                                    \r\n                                                </tr>\r\n                                            );\r\n                                        },\r\n                                    )}\r\n                                </tbody>\r\n                            </table>\r\n                        )}\r\n                    </div>)\r\n                ) : (\r\n                    <>\r\n                        <div className=\"sectionSpinner\">\r\n                            <Spinner\r\n                                size={SpinnerSize.large}\r\n                                label={'Loading...'}\r\n                            />\r\n                        </div>\r\n                    </>\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport './SwitchSelector.css';\r\nimport {Label} from 'office-ui-fabric-react/lib/Label';\r\nimport {ISwitchSelectorProps, ISwitchSelectorState} from './interfaces/ISwitchSelector';\r\nimport { IActivityShift } from './interfaces/IActivityForm';\r\n\r\nexport default class SwitchSelector extends React.Component<ISwitchSelectorProps,ISwitchSelectorState> {\r\n    constructor(props:ISwitchSelectorProps) {\r\n        super(props);\r\n        this.state = {\r\n            arrayInput: [],\r\n        };\r\n    }\r\n    componentDidMount() {\r\n        const {arrayInput} = this.props;\r\n        this.setState({\r\n            arrayInput,\r\n        });\r\n    }\r\n    componentDidUpdate(prevProps:ISwitchSelectorProps, prevState:ISwitchSelectorState) {\r\n        const {arrayInput} = this.props;\r\n        if (prevProps.arrayInput.length !== arrayInput.length) {\r\n            this.setState({\r\n                arrayInput,\r\n            });\r\n        }\r\n    }\r\n    handleSelection = (event:any ) => {\r\n        let currData:any = event.currentTarget.dataset;\r\n        let indexvalue = parseInt(currData.cusindex);\r\n        let updatedArr:any = this.state.arrayInput;\r\n        updatedArr[indexvalue].isSelected =\r\n            currData.selected === 'false' ? true : false;\r\n        this.setState({\r\n            arrayInput: updatedArr,\r\n        });\r\n        this.props.handleChangeFunction(updatedArr);\r\n    }\r\n    renderSwithcSelector = (arrayInput:IActivityShift[]) => {\r\n        const {viewForm} = this.props;\r\n        return (\r\n            <div className=\"SwitchSelector\" key={arrayInput.length}>\r\n                {arrayInput.map((item, key) => {\r\n                    return (\r\n                        <div\r\n                            className={viewForm?'viewFormDisabled':''}\r\n                            key={key + item.Id}\r\n                            data-cusindex={key}\r\n                            data-selected={item.isSelected}\r\n                            onClick={ev => {\r\n                                this.handleSelection(ev);\r\n                            }}\r\n                        >\r\n                            <div\r\n                                className={\r\n                                    item.isSelected\r\n                                        ? 'switch switchSelected'\r\n                                        : 'switch'\r\n                                }\r\n                                title={item.DisplayName}\r\n                            >\r\n                                {item.DisplayName}\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                })}\r\n            </div>\r\n        );\r\n    };\r\n    render() {\r\n        const {labelHead, required} = this.props;\r\n        const {arrayInput} = this.state;\r\n        return (\r\n            <div>\r\n                {labelHead && (\r\n                    <Label className={required? 'requiredLabel':''}>\r\n                        {labelHead}\r\n                    </Label>\r\n                )}\r\n                {this.renderSwithcSelector(arrayInput)}\r\n            </div>\r\n        );\r\n    }\r\n}","import * as React from 'react';\r\nimport * as _ from 'lodash';\r\nimport {formatActivityDate} from './ActivityService';\r\nimport {\r\n    MessageBar,\r\n    MessageBarType,\r\n} from 'office-ui-fabric-react/lib/MessageBar';\r\nimport FLatDatePickr from '../utils/FLatDatePickr';\r\nimport SwitchSelector from './SwitchSelector';\r\nimport { IDateAndShiftsProps, IDateAndShiftsState } from './interfaces/IDateAndShifts';\r\nimport { IActivityShift } from './interfaces/IActivityForm';\r\nimport AppConfig from '../../Constans';\r\n\r\nconst moment =  require('moment');\r\n\r\n\r\nexport default class DateAndShifts extends React.Component<IDateAndShiftsProps,IDateAndShiftsState> {\r\n    constructor(props:IDateAndShiftsProps) {\r\n        super(props);\r\n        this.state = {\r\n            shiftTimmings: [],\r\n            selectedShiftIds: [],\r\n            activityDate: new Date(formatActivityDate()),\r\n            errorMsgs:{},\r\n            Offset:0,\r\n            ExpDate:null\r\n        };\r\n    }\r\n    componentDidMount() {\r\n        const {shiftTimmings, errorMsgs,activityDate,selectedShiftIds,ExpDate} = this.props;\r\n        let expDate = moment(ExpDate);\r\n        let actDate = moment(activityDate);\r\n        let offset = actDate.diff(expDate,'days');\r\n        this.setState({\r\n            shiftTimmings,\r\n            activityDate,\r\n            selectedShiftIds,\r\n            errorMsgs,\r\n            ExpDate,\r\n            Offset:offset\r\n        });\r\n    }\r\n    componentDidUpdate(prevProps:IDateAndShiftsProps, prevState:IDateAndShiftsState) {\r\n        const {shiftTimmings, errorMsgs,activityDate,ExpDate,selectedShiftIds} = this.props;\r\n        if (prevProps.shiftTimmings.length != shiftTimmings.length) {\r\n            this.setState({\r\n                shiftTimmings\r\n            });\r\n        }\r\n        if (prevProps.activityDate != activityDate) {\r\n            this.setState({\r\n                activityDate\r\n            });\r\n        }\r\n        if (prevProps.selectedShiftIds.length != selectedShiftIds.length) {\r\n            this.setState({\r\n                selectedShiftIds\r\n            });\r\n        }\r\n        if(errorMsgs.activityDate!==prevProps.errorMsgs.activityDate || errorMsgs.selectedShiftIds!==prevProps.errorMsgs.selectedShiftIds ){\r\n            this.setState({\r\n                errorMsgs\r\n            });\r\n        }\r\n        if(ExpDate && prevProps.ExpDate){\r\n            let prevExpDate = moment(prevProps.ExpDate);\r\n            let expDate = moment(ExpDate);\r\n            let dateDiff = expDate.diff(prevExpDate,'days',true);\r\n            if(dateDiff !== 0){\r\n                let offset  = this.getOffsetValue(activityDate,ExpDate);\r\n                this.setState({\r\n                    Offset:offset,\r\n                    ExpDate\r\n                });\r\n            }\r\n        }\r\n        if(ExpDate && prevProps.ExpDate){\r\n            let prevActDate = moment(prevProps.activityDate);\r\n            let actDate = moment(activityDate);\r\n            let dateDiff = actDate.diff(prevActDate,'days',true);\r\n            if(dateDiff !== 0){\r\n                let offset  = this.getOffsetValue(activityDate,ExpDate);\r\n                this.setState({\r\n                    Offset:offset,\r\n                    ExpDate\r\n                });\r\n            }\r\n        }\r\n    }  \r\n    getOffsetValue =(date1:any,date2:any) :number => {\r\n        let expDate = moment(date1);\r\n        let actDate = moment(date2);\r\n        return  Math.ceil(expDate.diff(actDate,'days',true));\r\n    }  \r\n    handleDateSelectChange = (date:any) => {\r\n        const {activityDate,ExpDate}:any = this.state;\r\n        if (\r\n            date &&\r\n            formatActivityDate(date) != formatActivityDate(activityDate)\r\n        ) {\r\n            let offset  = this.getOffsetValue(date,ExpDate);\r\n            this.setState({\r\n                activityDate: date,\r\n                Offset:offset\r\n            });\r\n        }\r\n        this.props.handleFormFieldChange(date, 'activityDate');\r\n    }\r\n    handleShiftSelection = (updatedShiftArr:IActivityShift[]) => {\r\n        var selectedShiftIds:any[] = _.map(\r\n            _.filter(updatedShiftArr, {isSelected: true}),\r\n            'Id',\r\n        );\r\n        this.setState({\r\n            shiftTimmings: updatedShiftArr,\r\n            selectedShiftIds,\r\n        });\r\n        this.props.handleFormFieldChange(selectedShiftIds,'selectedShiftIds');\r\n    }\r\n    renderErrorMsgForField(msg:string,key:any){\r\n        return(\r\n             <div role=\"alert\" key={key}>\r\n                <p className=\"ms-TextField-errorMessage alertMsg\">\r\n                    <span data-automation-id=\"error-message\">{msg}</span>\r\n                </p>\r\n            </div>\r\n        );\r\n    }\r\n    render() {\r\n        const {shiftTimmings, errorMsgs,activityDate,Offset} = this.state;\r\n        const {viewForm, ExpId} = this.props;\r\n        return (\r\n            <div className=\"ms-Grid-row\" style={{display: 'flex', alignItems: 'flex-end'}}>\r\n                <div className=\"ms-Grid-col ms-sm3\">\r\n                    <FLatDatePickr\r\n                        required={true}\r\n                        viewForm={viewForm}\r\n                        labelHead=\"Activity Date\"\r\n                        updateFunc={this.handleDateSelectChange}\r\n                        dateInput={activityDate}\r\n                    />\r\n                    {errorMsgs.activityDate?this.renderErrorMsgForField(errorMsgs.activityDate,'activityDateError'):''}\r\n                </div>\r\n                {ExpId && (\r\n                    <div className=\"ms-Grid-col ms-sm1\" style={{marginBottom:'5px'}}>\r\n                        {(Offset && Offset<0)?\"Error: NA\":\"T + \"+ Offset}\r\n                    </div>)}\r\n                <div className={ExpId?\"ms-Grid-col ms-sm8\":\"ms-Grid-col ms-sm9\"}>\r\n                    {shiftTimmings.length>0?(\r\n                        <SwitchSelector\r\n                            viewForm={viewForm}\r\n                            labelHead=\"Activity Shift\"\r\n                            required={true}\r\n                            arrayInput={shiftTimmings}\r\n                            handleChangeFunction={this.handleShiftSelection}\r\n                        />\r\n                    ):(\r\n                        <MessageBar messageBarType={MessageBarType.error} className={\"errorMsgInfo\"}>\r\n                            {AppConfig.ActivityForm.NoShiftsErrorMsg}\r\n                        </MessageBar>\r\n                    )}\r\n                    {errorMsgs.selectedShiftIds?this.renderErrorMsgForField(errorMsgs.selectedShiftIds,'selectedShiftIdsError'):''}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","/*\r\n *  Copyright (c) Microsoft. All rights reserved. Licensed under the MIT license.\r\n *  See LICENSE in the source repository root for complete license information.\r\n */\r\n\r\nimport React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {CompactPeoplePicker} from 'office-ui-fabric-react/lib/Pickers';\r\nimport {Persona, PersonaPresence} from 'office-ui-fabric-react/lib/Persona';\r\nimport {\r\n    searchForPeople,\r\n    getProfilePics,\r\n    getPeople,\r\n    getAuthenticatedClient,\r\n} from '../../services/graph-service';\r\nimport CacheManager from '../../services/CachecManager';\r\n\r\nconst pickrClassName = {\r\n    root: {\r\n        width: '100%',\r\n    },\r\n};\r\n\r\nexport default class PeoplePicker extends Component {\r\n    constructor() {\r\n        super();\r\n        // Set the initial state for the picker data source.\r\n        // The people list is populated in the _onFilterChanged function.\r\n        this._peopleList = null;\r\n        this._searchResults = [];\r\n\r\n        // Helper that uses the JavaScript SDK to communicate with Microsoft Graph.\r\n        //this.sdkHelper = window.sdkHelper;\r\n        const cacheAccountInfo = CacheManager.getCacheItem('accountInfo');\r\n        let accountInfo = {},\r\n            accessToken = '';\r\n        try {\r\n            accountInfo = JSON.parse(cacheAccountInfo.value);\r\n            accessToken = accountInfo.jwtAccessToken\r\n                ? accountInfo.jwtAccessToken\r\n                : getAuthenticatedClient();\r\n        } catch (err) {\r\n            console.log('account Info error', err);\r\n        }\r\n\r\n        this.state = {\r\n            selectedPeople: [],\r\n            isLoadingPeople: true,\r\n            isLoadingPics: true,\r\n            accessToken: accessToken,\r\n        };\r\n    }\r\n    componentDidMount() {\r\n        const {selectedPeople} = this.props;\r\n        this.setState({\r\n            selectedPeople: this._mapUsersToPersonas(selectedPeople, true),\r\n        });\r\n    }\r\n    getInitials = (displayName) => {\r\n        let returnItials =  displayName.substring(0, 1);\r\n        try {\r\n            let dispSplitArr = displayName.split(' ');\r\n            if(dispSplitArr.length>0){\r\n                returnItials =   dispSplitArr[0].substring(0, 1) + dispSplitArr[dispSplitArr.length-1].substring(0, 1);\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n        return  returnItials;\r\n    }\r\n    // Map user properties to persona properties.\r\n    _mapUsersToPersonas(users, useMailProp) {\r\n        return users.map(p => {\r\n            // The email property is returned differently from the /users and /people endpoints.\r\n            let email = useMailProp\r\n                ? p.mail\r\n                : p.scoredEmailAddresses[0].address;\r\n            let persona = new Persona();\r\n\r\n            persona.text = p.displayName;\r\n            persona.secondaryText = email || p.userPrincipalName;\r\n            persona.presence = PersonaPresence.none; // Presence isn't supported in Microsoft Graph yet\r\n            persona.imageInitials =\r\n                !!p.givenName && !!p.surname\r\n                    ? p.givenName.substring(0, 1) + p.surname.substring(0, 1)\r\n                    : this.getInitials(p.displayName);\r\n            persona.initialsColor = Math.floor(Math.random() * 15) + 0;\r\n            persona.props = {id: p.id, userPrincipalName: p.userPrincipalName};\r\n            // this._getPics(persona);\r\n            return persona;\r\n        });\r\n    }\r\n\r\n    // Gets the profile photo for each user.\r\n    async _getPics(persona) {\r\n        // Make suggestions available before retrieving profile pics.\r\n        this.setState({\r\n            isLoadingPeople: false,\r\n        });\r\n\r\n        getProfilePics(persona, this.state.accessToken)\r\n            .then()\r\n            .catch(err => {\r\n                console.log(err);\r\n                this.setState({\r\n                    isLoadingPics: false,\r\n                });\r\n            });\r\n    }\r\n\r\n    // Handler for when text is entered into the picker control.\r\n    // Populate the people list.\r\n    _onFilterChanged(filterText, items) {\r\n        if (this._peopleList) {\r\n            this.setState({\r\n                isLoadingPeople: false,\r\n            });\r\n            return filterText\r\n                ? this._peopleList\r\n                      .concat(this._searchResults)\r\n                      .filter(\r\n                          item =>\r\n                              item.text\r\n                                  .toLowerCase()\r\n                                  .indexOf(filterText.toLowerCase()) === 0,\r\n                      )\r\n                      .filter(item => !this._listContainsPersona(item, items))\r\n                : [];\r\n        } else {\r\n            // return (async (resolve, reject) => await getPeople((err, people) => {\r\n            return new Promise(resolve =>\r\n                getPeople(this.state.accessToken)\r\n                    .then(people => {\r\n                        this._peopleList = this._mapUsersToPersonas(\r\n                            people,\r\n                            false,\r\n                        );\r\n                        this.setState({\r\n                            isLoadingPeople: false,\r\n                        });\r\n                        resolve(this._peopleList);\r\n                    })\r\n                    .catch(() => {\r\n                        // this._showError(err);\r\n                    }),\r\n            ).then(value =>\r\n                value\r\n                    .concat(this._searchResults)\r\n                    .filter(\r\n                        item =>\r\n                            item.text\r\n                                .toLowerCase()\r\n                                .indexOf(filterText.toLowerCase()) === 0,\r\n                    )\r\n                    .filter(item => !this._listContainsPersona(item, items)),\r\n            );\r\n        }\r\n    }\r\n\r\n    // Remove currently selected people from the suggestions list.\r\n    _listContainsPersona(persona, items) {\r\n        if (!items || !items.length || items.length === 0) {\r\n            return false;\r\n        }\r\n        return items.filter(item => item.text === persona.text).length > 0;\r\n    }\r\n\r\n    // Handler for when the Search button is clicked.\r\n    // This sample returns the first 20 matches as suggestions.\r\n    _onGetMoreResults(searchText) {\r\n        this.setState({\r\n            isLoadingPeople: false,\r\n            isLoadingPics: true,\r\n        });\r\n        if (searchText.length === 0) {\r\n            return;\r\n        }\r\n        return new Promise(resolve => {\r\n            searchForPeople(searchText.toLowerCase(), this.state.accessToken)\r\n                .then(people => {\r\n                    //if (!err) {\r\n                    this._searchResults = this._mapUsersToPersonas(\r\n                        people,\r\n                        true,\r\n                    );\r\n                    this.setState({\r\n                        isLoadingPeople: false,\r\n                    });\r\n                    // this._getPics(this._searchResults);\r\n                    resolve(this._searchResults);\r\n                    // }\r\n                })\r\n                .catch(err => {\r\n                    console.log(err);\r\n                    // this._showError(err);\r\n                });\r\n        });\r\n    }\r\n\r\n    // Handler for when the selection changes in the picker control.\r\n    // This sample updates the list of selected people and clears any messages.\r\n    _onSelectionChanged(items) {\r\n        // console.log(items);\r\n        this.setState({\r\n            result: null,\r\n            selectedPeople: items,\r\n        });\r\n        this.props.updateSelection(items);\r\n    }\r\n\r\n    // Renders the people picker using the NormalPeoplePicker template.\r\n    render() {\r\n        const {placeholderTxt,disabled,description} = this.props;\r\n        return (\r\n            <>\r\n                <CompactPeoplePicker\r\n                    onResolveSuggestions={this._onFilterChanged.bind(this)}\r\n                    pickerSuggestionsProps={{\r\n                        suggestionsHeaderText: 'Suggested People',\r\n                        noResultsFoundText: 'No results found',\r\n                        searchForMoreText: 'Search',\r\n                        searchingText: 'Searching more...',\r\n                        loadingText: 'Loading...',\r\n                        isLoading: this.state.isLoadingPeople,\r\n                    }}\r\n                    inputProps={{placeholder: placeholderTxt}}\r\n                    itemLimit={1}\r\n                    selectedItems={this.state.selectedPeople}\r\n                    getTextFromItem={persona => persona.text}\r\n                    onChange={this._onSelectionChanged.bind(this)}\r\n                    onGetMoreResults={this._onGetMoreResults.bind(this)}\r\n                    key=\"normal-people-picker\"\r\n                    styles={pickrClassName}\r\n                    disabled={disabled}\r\n                />\r\n            </>\r\n        );\r\n    }\r\n}\r\nPeoplePicker.propTypes = {\r\n    updateSelection: PropTypes.func,\r\n    disabled: PropTypes.bool,\r\n    selectedPeople: PropTypes.array,\r\n    placeholderTxt: PropTypes.string,\r\n    description: PropTypes.string,\r\n};\r\n","// import * as _ from 'lodash';\r\n\r\nexport function convertWrapperToUserObj(wrapperArr) {\r\n    let uniqOwnersObj = {},\r\n        owenerEmails = [],\r\n        uniqOwners = [],\r\n        index = 0,\r\n        len = 0;\r\n    try {\r\n        if (wrapperArr) {\r\n            len = wrapperArr.length;\r\n            for (index = 0; index < len; index++) {\r\n                const eachWrapper = wrapperArr[index];\r\n                uniqOwnersObj = {};\r\n                if (\r\n                    eachWrapper.secondaryText &&\r\n                    owenerEmails.indexOf(eachWrapper.secondaryText) === -1\r\n                ) {\r\n                    try {\r\n                        let userPrincipalName =\r\n                            eachWrapper.props.userPrincipalName;\r\n                        uniqOwnersObj.UserLogin = userPrincipalName\r\n                            ? userPrincipalName\r\n                            : eachWrapper.secondaryText;\r\n                        uniqOwnersObj.DisplayName = eachWrapper.text;\r\n                        uniqOwnersObj.Email = eachWrapper.secondaryText;\r\n                        // uniqOwnersObj.isChecked = true;\r\n                        owenerEmails.push(eachWrapper.secondaryText);\r\n                        uniqOwners.push(uniqOwnersObj);\r\n                    } catch (err) {\r\n                        console.log(err);\r\n                    }\r\n                }\r\n            }\r\n            return uniqOwners;\r\n        } else {\r\n            return uniqOwners;\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return uniqOwners;\r\n    }\r\n}\r\nexport function convertUserObjToWrapper(userObjArr) {\r\n    let uniqOwnersObj = {},\r\n        owenerEmails = [],\r\n        uniqOwners = [],\r\n        index = 0,\r\n        len = 0;\r\n    try {\r\n        if (userObjArr) {\r\n            len = userObjArr.length;\r\n            for (index = 0; index < len; index++) {\r\n                const eachUserObj = userObjArr[index];\r\n                uniqOwnersObj = {};\r\n                if (\r\n                    eachUserObj.Email &&\r\n                    owenerEmails.indexOf(eachUserObj.Email) === -1\r\n                ) {\r\n                    try {\r\n                        let userPrincipalName = eachUserObj.UserLogin;\r\n                        uniqOwnersObj.userPrincipalName = userPrincipalName;\r\n                        uniqOwnersObj.displayName = eachUserObj.DisplayName;\r\n                        uniqOwnersObj.mail = eachUserObj.Email;\r\n                        uniqOwnersObj.id = index + eachUserObj.Email;\r\n                        // uniqOwnersObj.isChecked = true;\r\n                        owenerEmails.push(eachUserObj.Email);\r\n                        uniqOwners.push(uniqOwnersObj);\r\n                    } catch (err) {\r\n                        console.log(err);\r\n                    }\r\n                }\r\n            }\r\n            return uniqOwners;\r\n        } else {\r\n            return uniqOwners;\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return uniqOwners;\r\n    }\r\n}\r\n//mail\r\n// displayName\r\n// email\r\n// userPrincipalName\r\n","import * as React from 'react';\r\nimport PeoplePicker from '../utils/CustomPeoplePicker';\r\nimport {\r\n    convertWrapperToUserObj,\r\n    convertUserObjToWrapper,\r\n} from '../utils/People/FormatPeoplePicker';\r\nimport { IBookedForEmailProps, IBookedForEmailState } from './IBookedForEmail';\r\nimport { IUserPersonaField } from '../Activity/interfaces/IActivityForm';\r\nconst uuidv4 = require('uuid/v4');\r\n\r\nexport default class BookedForEmail extends React.Component<IBookedForEmailProps,IBookedForEmailState> {\r\n    constructor(props:IBookedForEmailProps) {\r\n        super(props);\r\n        this.state = {\r\n            selectedPeople: [],\r\n            pickrKey: uuidv4(),\r\n        };\r\n    }\r\n    componentDidMount() {\r\n        const {people} = this.props;\r\n        let selectedPeople = [];\r\n        selectedPeople = convertUserObjToWrapper(people);\r\n        this.setState({\r\n            selectedPeople: selectedPeople,\r\n            pickrKey: uuidv4(),\r\n        });\r\n    }\r\n    componentDidUpdate(prevProps:IBookedForEmailProps, preState:IBookedForEmailState) {\r\n        const {people} = this.props;\r\n        let selectedPeople = [];\r\n        selectedPeople = convertUserObjToWrapper(people);\r\n        if (prevProps.people.length !== people.length) {\r\n            this.setState({\r\n                selectedPeople: selectedPeople,\r\n                pickrKey: uuidv4(),\r\n            });\r\n        }\r\n    }\r\n\r\n    updateSelection = (items:IUserPersonaField []) => {\r\n        this.setState({\r\n            selectedPeople: items,\r\n        });\r\n        this.handleAddClick(items);\r\n    };\r\n    handleAddClick = (items:IUserPersonaField[]) => {\r\n        let selectedUsers = [];\r\n        selectedUsers = convertWrapperToUserObj(items);\r\n        this.props.updatePeoplePickerChange(selectedUsers, this.props.property);\r\n    };\r\n    render() {\r\n        const {selectedPeople, pickrKey} = this.state;\r\n        const {viewForm,description} = this.props;\r\n        return (\r\n            <div style={viewForm?{border: '1px solid'}:{}}>\r\n                <PeoplePicker\r\n                    disabled={viewForm}\r\n                    required={true}\r\n                    description= {description}\r\n                    placeholderTxt={this.props.placeholderTxt}\r\n                    key={pickrKey}\r\n                    updateSelection={this.updateSelection}\r\n                    selectedPeople={selectedPeople}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}","import * as React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {TextField, ITextFieldStyles,ITextFieldStyleProps} from 'office-ui-fabric-react/lib/TextField';\r\nimport {Label} from 'office-ui-fabric-react/lib/Label';\r\nimport {Toggle,IToggleStyles,IToggleStyleProps} from 'office-ui-fabric-react/lib/Toggle';\r\nimport BookedForEmail from '../Common/BookedForEmail';\r\nimport { INamePersonVisitorProps, INamePersonVisitorState } from './interfaces/INamePersonVisitor';\r\nimport { IUserPersonaField, IActivity, IActivityErrors } from './interfaces/IActivityForm';\r\n\r\nconst txtFieldClass:Partial<ITextFieldStyleProps> & Partial<ITextFieldStyles> = {\r\n    wrapper: {\r\n        width: '100%',\r\n        display: 'block',\r\n        selectors:{\r\n            'disabled':{\r\n                color:'black'\r\n            }\r\n        }\r\n    },\r\n    root: {\r\n        width: '100%',\r\n    },\r\n    subComponentStyles:{\r\n        label:{\r\n            color:'black!important'\r\n        }\r\n    }\r\n};\r\nconst toggleFieldClass: Partial<IToggleStyles> = {\r\n    container: {\r\n        marginTop: '4px',\r\n    }\r\n};\r\nexport default class NamePersonVisitor extends React.Component<INamePersonVisitorProps,INamePersonVisitorState> {\r\n    constructor(props:INamePersonVisitorProps) {\r\n        super(props);\r\n        this.state = {\r\n            activityName:'',\r\n            showVisitorField:false,\r\n            errorMsgs:{},\r\n            visitorEmail:'',\r\n            selectedFor:[]\r\n        };\r\n    }\r\n    componentDidMount() {\r\n        const {activityName,showVisitorField,errorMsgs,visitorEmail,selectedFor} = this.props;\r\n        this.setState({\r\n            activityName,\r\n            showVisitorField,\r\n            visitorEmail,\r\n            errorMsgs,\r\n            selectedFor\r\n        });\r\n    }\r\n    componentDidUpdate(prevProps:INamePersonVisitorProps, prevState:INamePersonVisitorState) {\r\n        const {errorMsgs} = this.props;  \r\n        if(errorMsgs.activityName !== prevProps.errorMsgs.activityName){\r\n            this.setState({\r\n                errorMsgs\r\n            });\r\n        }\r\n        if(errorMsgs.visitorEmail !== prevProps.errorMsgs.visitorEmail){\r\n            this.setState({\r\n                errorMsgs\r\n            });\r\n        }\r\n        if(errorMsgs.bookedForEmail !== prevProps.errorMsgs.bookedForEmail){\r\n            this.setState({\r\n                errorMsgs\r\n            });\r\n        }\r\n        if(errorMsgs.bookedForEmail !== prevProps.errorMsgs.bookedForEmail){\r\n            this.setState({\r\n                errorMsgs\r\n            });\r\n        }\r\n    }\r\n  \r\n    handleToggleChange= (ev:any) =>{\r\n        let val:string = ev.target.value;\r\n        let eventObj:any = {\r\n            target:{\r\n                value:val,\r\n                name:'showVisitorField'\r\n            }\r\n        }\r\n        const {showVisitorField}:any = this.state;\r\n        eventObj.target.value = !showVisitorField;\r\n        this.setState({\r\n            visitorEmail:'',\r\n            showVisitorField:!showVisitorField\r\n        });\r\n        this.props.handleOnChange(eventObj);\r\n    }\r\n    handleOnChange = (ev:any) => {\r\n        let val:string = ev.target.value,\r\n        fieldName:string = ev.target.name;\r\n        let eventObj:any = {\r\n            target:{\r\n                value:val,\r\n                name:fieldName\r\n            }\r\n        }\r\n        switch (fieldName) {\r\n            case \"activityName\":\r\n                this.setState({\r\n                    activityName:val\r\n                });\r\n                break;\r\n            case \"visitorEmail\":\r\n                this.setState({\r\n                    visitorEmail:val\r\n                });                \r\n                break;       \r\n            default:\r\n                break;\r\n        };\r\n        this.props.handleOnChange(eventObj);\r\n    }\r\n    updateBookedForEmail = (items:IUserPersonaField[], property:string) => {\r\n        let eventObj = {\r\n            target:{\r\n                value:items,\r\n                name:property,\r\n                selectedFor:items\r\n            }\r\n        }\r\n        this.setState({\r\n            selectedFor: items \r\n        });\r\n        this.props.handleOnChange(eventObj);\r\n    }\r\n    renderErrorMsgForField(msg:string,key:any){\r\n        return(\r\n             <div role=\"alert\" key={key}>\r\n                <p className=\"ms-TextField-errorMessage alertMsg\">\r\n                    <span data-automation-id=\"error-message\">{msg}</span>\r\n                </p>\r\n            </div>\r\n        );\r\n    }\r\n    render() {\r\n        const {activityName,showVisitorField,errorMsgs,visitorEmail,selectedFor} = this.state;\r\n        const {viewForm} = this.props;\r\n        return (\r\n            <div className=\"ms-Grid-row\">\r\n                <div className=\"ms-Grid-col ms-sm5\">\r\n                    <TextField\r\n                        label=\"Activity Name\"\r\n                        required\r\n                        disabled={viewForm}\r\n                        name=\"activityName\"\r\n                        placeholder=\"Activity Name\"\r\n                        value={activityName}\r\n                        errorMessage={errorMsgs.activityName}\r\n                        onChange={this.handleOnChange}\r\n                        styles={txtFieldClass}\r\n                    />  \r\n                </div>\r\n                <div className=\"ms-Grid-col ms-sm7\">\r\n                    <div className=\"ms-Grid-row\">\r\n                        <div className=\"ms-Grid-col ms-sm2\">\r\n                            <Toggle\r\n                                disabled={viewForm}\r\n                                label=\"Visitor?\"\r\n                                onText=\"Yes\"\r\n                                offText=\"No\"\r\n                                checked={showVisitorField}\r\n                                styles={toggleFieldClass}\r\n                                onChange={this.handleToggleChange}\r\n                            />\r\n                        </div>\r\n                        <div className=\"ms-Grid-col ms-sm10\">\r\n                            {showVisitorField ? (\r\n                                <>\r\n                                    <TextField\r\n                                        disabled={viewForm}\r\n                                        label=\"Visitor Email\"\r\n                                        required\r\n                                        name=\"visitorEmail\"\r\n                                        placeholder=\"Visitor Email\"\r\n                                        value={visitorEmail}\r\n                                        errorMessage={errorMsgs.visitorEmail}\r\n                                        onChange={this.handleOnChange}\r\n                                        styles={txtFieldClass}\r\n                                    />\r\n                                </>\r\n                            ) : (\r\n                                <>\r\n                                    <Label className={'requiredLabel'}>\r\n                                        Person Name\r\n                                    </Label>\r\n                                    <div style={{backgroundColor: \"#fff\"}}>\r\n                                        <BookedForEmail\r\n                                            viewForm={viewForm}\r\n                                            required={true}\r\n                                            description={'Toggle Vistor field to if personis a visitor'}\r\n                                            placeholderTxt={'Person Name'}\r\n                                            property={'bookedForEmail'}\r\n                                            updatePeoplePickerChange={this.updateBookedForEmail}\r\n                                            people={selectedFor}\r\n                                        />\r\n                                    </div>\r\n                                    {errorMsgs.bookedForEmail?this.renderErrorMsgForField(errorMsgs.bookedForEmail,'bookedForEmailError'):''}\r\n                                </>\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport {\r\n    MessageBar,\r\n    MessageBarType,\r\n} from 'office-ui-fabric-react/lib/MessageBar';\r\nimport {Label} from 'office-ui-fabric-react/lib/Label';\r\nimport * as _ from 'lodash';\r\nimport { ILocationsAndEquipmentsProps, ILocationsAndEquipmentsState } from './interfaces/ILocationsAndEquipments';\r\nimport { IActivityEquipment, IActivityLocation } from './interfaces/IActivityForm';\r\nimport AppConfig from '../../Constans';\r\n\r\nexport default class LocationsAndEquipments extends Component<ILocationsAndEquipmentsProps,ILocationsAndEquipmentsState> {\r\n    constructor(props:ILocationsAndEquipmentsProps) {\r\n        super(props);\r\n        this.state ={\r\n            Equipments:[],\r\n            Locations:[],\r\n            selectedLocations:[],\r\n            selectedEquipments:[],\r\n            locationEquipKey:'1'\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        const {Equipments,Locations,locationEquipKey,\r\n            selectedLocations,\r\n            selectedEquipments} = this.props;\r\n        this.setState({\r\n            Equipments:Equipments,\r\n            Locations:Locations,\r\n            selectedLocations:selectedLocations,\r\n            locationEquipKey:locationEquipKey,\r\n            selectedEquipments:selectedEquipments\r\n        });\r\n    }\r\n    componentDidUpdate(prevProps:ILocationsAndEquipmentsProps, prevState:ILocationsAndEquipmentsState) {\r\n        const {locationEquipKey,Equipments,Locations,\r\n            selectedLocations,\r\n            selectedEquipments} = this.props;\r\n        if(locationEquipKey !=prevProps.locationEquipKey){\r\n            this.setState({\r\n                locationEquipKey:locationEquipKey,\r\n                Equipments:Equipments,\r\n                Locations:Locations,\r\n                selectedLocations:selectedLocations,\r\n                selectedEquipments:selectedEquipments\r\n            });\r\n        }\r\n    }\r\n    getOptionsSelected =(options:any)=>{\r\n        var locValues:number[] = [];\r\n        for (var i = 0, l = options.length; i < l; i++) {\r\n            if (options[i].selected) {\r\n                locValues.push(parseInt(options[i].id));\r\n            }\r\n        }\r\n        return locValues ;\r\n    }\r\n    handleDropDownChange = (ev:any) => {\r\n        let currTarget:any = ev.target.id;\r\n        var options:any = ev.target.options;\r\n        var values:number[]  = this.getOptionsSelected(options);\r\n        this.setState({\r\n            selectedEquipments: values,\r\n        });\r\n        this.props.handleEquipmentSelectionChange(values,currTarget);\r\n    }\r\n    handleLocationDropDownChange = (ev:any) => {\r\n        let currTarget:any = ev.target.id;\r\n        var options:any = ev.target.options;\r\n        var equipmentsSelected:any = [];\r\n        var locValues:number[]  = this.getOptionsSelected(options);\r\n        const {selectedEquipments, Equipments} = this.state;\r\n        if (selectedEquipments.length > 0) {\r\n            var locSpecificEquips = [];\r\n            locSpecificEquips = _.filter(Equipments, equipment => {\r\n                if (locValues.indexOf(equipment.LocationId) !== -1 && equipment.EquipmentId) {\r\n                    return equipment.EquipmentId;\r\n                }\r\n            });\r\n            var locEquipmentIds:number[] = _.map(locSpecificEquips,'EquipmentId');\r\n            equipmentsSelected = _.reject(selectedEquipments,(equipment) => {\r\n                    if (locEquipmentIds.indexOf(equipment) === -1) \r\n                    {\r\n                        return true;\r\n                    }\r\n            });\r\n            this.setState({\r\n                selectedLocations: locValues,\r\n                selectedEquipments: equipmentsSelected,\r\n            });\r\n        } \r\n        else {\r\n            this.setState({\r\n                selectedLocations: locValues,\r\n                selectedEquipments:[]\r\n            });\r\n        }\r\n        this.props.handleLocationSelectionChange(locValues,equipmentsSelected)\r\n    }\r\n    renderEquipments = (equipments:IActivityEquipment[], selectedLocations:number[]) => {\r\n        if (equipments.length > 0 && selectedLocations.length) {\r\n            const {selectedEquipments} = this.state;\r\n            var equipmentOptionsArr:any = [];\r\n            equipmentOptionsArr = _.filter(equipments, equipment => {\r\n                if (selectedLocations.indexOf(equipment.LocationId) !== -1 && equipment) {\r\n                    return equipment;\r\n                }\r\n            });\r\n            let options = equipmentOptionsArr.map((equipment:IActivityEquipment, key:any) => {\r\n                if (\r\n                    selectedEquipments && equipment.EquipmentId &&\r\n                    selectedEquipments.indexOf(equipment.EquipmentId) !== -1\r\n                ) {\r\n                    return (\r\n                        <option\r\n                            id={equipment.EquipmentId?.toString()}\r\n                            value={equipment.EquipmentName}\r\n                            selected={true}\r\n                            key={key + equipment.EquipmentName}\r\n                        >\r\n                            {equipment.EquipmentName}\r\n                        </option>\r\n                    );\r\n                } else {\r\n                    if(equipment.EquipmentId){\r\n                        return (\r\n                            <option\r\n                                id={equipment.EquipmentId?.toString()}\r\n                                value={equipment.EquipmentName}\r\n                                key={key + equipment.EquipmentName}\r\n                            >\r\n                                {equipment.EquipmentName}\r\n                            </option>\r\n                        );\r\n                    }                    \r\n                }\r\n            });\r\n            return options;\r\n        } else {\r\n            return (\r\n                <option value={0} disabled={true}>\r\n                    Please select Location to populate Equipments\r\n                </option>\r\n            );\r\n        }\r\n    }\r\n    renderLocations = (locations:IActivityLocation[],selectedLocations:number[]) => {\r\n        let options:any = locations.map((location:IActivityLocation, key:any) => {\r\n            if(selectedLocations.indexOf(location.LocationId)!==-1){\r\n                return (\r\n                    <option\r\n                        id={location.LocationId?.toString()}\r\n                        key={key + location.LocationName}\r\n                        value={location.LocationId}\r\n                        selected={true}>\r\n                        {location.LocationName}\r\n                    </option>\r\n                );\r\n            }\r\n            else{\r\n                return (\r\n                    <option\r\n                        id={location.LocationId?.toString()}\r\n                        key={key + location.LocationName}\r\n                        value={location.LocationId}\r\n                        selected={false}>\r\n                        {location.LocationName}\r\n                    </option>\r\n                );\r\n            }\r\n        });\r\n        return options;\r\n    }\r\n    renderErrorMsgForField(msg:string,key:any){\r\n        return(\r\n             <div role=\"alert\" key={key}>\r\n                <p className=\"ms-TextField-errorMessage alertMsg\">\r\n                    <span data-automation-id=\"error-message\">{msg}</span>\r\n                </p>\r\n            </div>\r\n        );\r\n    }\r\n    render() {\r\n        const{errorMsgs,viewForm} =this.props;\r\n        const {\r\n            Equipments,\r\n            Locations,\r\n            locationEquipKey,\r\n            selectedLocations,\r\n            selectedEquipments\r\n        } = this.state;        \r\n        return (\r\n            <div className=\"ms-Grid-row selectSection\">\r\n                {Locations.length>0?(\r\n                   <>\r\n                        <div className=\"ms-Grid-col ms-sm4\">\r\n                            <Label\r\n                                className={'requiredLabel'}>\r\n                                Select Location\r\n                            </Label>\r\n                            <select\r\n                                disabled={viewForm}\r\n                                id=\"selectedLocations\"\r\n                                multiple={true}\r\n                                required={true}\r\n                                onChange={e => this.handleLocationDropDownChange(e)}>\r\n                                {this.renderLocations(Locations,selectedLocations)}\r\n                            </select>\r\n                            {errorMsgs.selectedLocations?this.renderErrorMsgForField(errorMsgs.selectedLocations,'selectedLocationsError'):''}\r\n                        </div>\r\n                        <div className=\"ms-Grid-col ms-sm8\">\r\n                            <Label>\r\n                                Select Equipment\r\n                            </Label>\r\n                            <select key={locationEquipKey}\r\n                                disabled={viewForm}\r\n                                id=\"selectedEquipments\"\r\n                                multiple\r\n                                onChange={e => this.handleDropDownChange(e)}>\r\n                                {this.renderEquipments(Equipments,selectedLocations)}\r\n                            </select>\r\n                        </div>\r\n                    </>\r\n                ):(\r\n                    <MessageBar messageBarType={MessageBarType.error} className={\"errorMsgInfo\"}>\r\n                        {AppConfig.ActivityForm.NoLocationEquipmentErrorMsg}\r\n                    </MessageBar>\r\n            )}\r\n            </div>\r\n        );\r\n    }\r\n}","import {Modal} from 'office-ui-fabric-react/lib/Modal';\r\nimport React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst scrollClass = {\r\n    overflow: 'auto',\r\n    'max-height': '100%',\r\n};\r\nconst containerStyle ={\r\n    container: {\r\n        display: 'flex',\r\n        flexFlow: 'column nowrap',\r\n        alignItems: 'stretch',\r\n        maxWidth:300\r\n      }\r\n}\r\nclass ModalDialog extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            showModal: props.showModal,\r\n        };\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"model\">\r\n                <Modal\r\n                    isOpen={this.state.showModal}\r\n                    onDismiss={this._closeModal}\r\n                    containerClassName={containerStyle}\r\n                    dragOptions={undefined}\r\n                    isBlocking={true}\r\n                    // scrollableContentClassName={scrollClass}\r\n                >\r\n                    {this.props.children}\r\n                </Modal>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nModalDialog.propTypes = {\r\n    children: PropTypes.any,\r\n    modalClassName: PropTypes.any,\r\n    showModal: PropTypes.any,\r\n};\r\nexport default ModalDialog;\r\n","import * as React from 'react';\r\nimport BlockingDialog from './dialogs/BlockingDialog';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {Icon} from 'office-ui-fabric-react';\r\nimport ModalDialog from './dialogs/ModalDialog';\r\nimport {PrimaryButton} from 'office-ui-fabric-react/lib/Button';\r\n\r\nimport './ActionScreen.css';\r\ninterface IActionScreenProps {\r\n  subText:string;\r\n  dialogTitle:string;\r\n  actionBtnTxt:string;\r\n  showModal:boolean;\r\n  isBlocking:boolean;\r\n  handleAction?:any;\r\n  actionType:'Update'|'Delete'|'Create'|'Clone'|'Denied'|'Nothing'|'Failed';\r\n\r\n  isActionBtnVisible?:boolean;\r\n  leftBtnText?:string;\r\n  leftBtnURI?:any;\r\n  rightBtnText?:string;\r\n  rightBtnURI?:any;\r\n\r\n  shouldDefaultRedirect?:boolean;\r\n  timmer?:number;\r\n  defaulltRedirectURI?:any;\r\n}\r\ninterface IActionScreenState{\r\n    isRedirect:boolean;\r\n    redirectAction:'left'|'right';\r\n}\r\nexport default class ActionScreen extends React.Component<IActionScreenProps,IActionScreenState> {\r\n  constructor(props:IActionScreenProps) {\r\n    super(props);\r\n    this.state ={\r\n      isRedirect:false,\r\n      redirectAction:\"left\"\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    setTimeout(() => {\r\n      if(this.props.shouldDefaultRedirect){\r\n          this.setState({ isRedirect: true })\r\n      }\r\n    }, this.props.timmer);\r\n  }\r\n  \r\n\r\n  getIcon = () :JSX.Element => {\r\n    switch (this.props.actionType) {\r\n      case \"Update\":\r\n        return(\r\n            <Icon iconName=\"CompletedSolid\"\r\n              className=\"actionIcon greenIcon\"\r\n            />\r\n        );\r\n      case \"Nothing\":        \r\n          return(\r\n            <Icon iconName=\"IncidentTriangle\"\r\n              className=\"actionIcon\"\r\n            />\r\n        );;\r\n      case \"Failed\":        \r\n          return(\r\n            <Icon iconName=\"StatusErrorFull\"\r\n              className=\"actionIcon redIcon\"\r\n            />\r\n        );;\r\n      case \"Denied\":        \r\n          return(\r\n            <Icon iconName=\"Blocked2Solid\"\r\n              className=\"actionIcon redIcon\"\r\n            />\r\n        );;\r\n      case \"Delete\":        \r\n          return(\r\n            <Icon iconName=\"Delete\"\r\n              className=\"actionIcon themeIcon\"\r\n            />\r\n        );;\r\n      case \"Create\":        \r\n          return(\r\n            <Icon iconName=\"CompletedSolid\"\r\n              className=\"actionIcon greenIcon\"\r\n            />\r\n        );;\r\n      case \"Clone\":        \r\n          return(\r\n            <Icon iconName=\"Copy\"\r\n              className=\"actionIcon themeIcon\"\r\n            />\r\n        );;\r\n    \r\n      default:\r\n          return(\r\n            <Icon iconName=\"StatusErrorFull\"\r\n              className=\"actionIcon redIcon\"\r\n            />\r\n        );;\r\n    }\r\n  }\r\n  handlRedirectionClick=(event:any):void =>{\r\n    let action = event.currentTarget.dataset.action;\r\n    switch (action) {\r\n      case \"left\":\r\n          this.setState({\r\n            isRedirect:true,\r\n            redirectAction:\"left\"\r\n          });\r\n        break;\r\n      case \"right\":\r\n        this.setState({\r\n          isRedirect:true,\r\n          redirectAction:\"right\"\r\n        });\r\n        break;    \r\n      default:\r\n        break;\r\n    }\r\n  }\r\n  redirectClone = (redirectURI:string) =>{\r\n    window.location.href = window.location.origin+redirectURI;\r\n  }\r\n  public render() {\r\n    const {dialogTitle,subText,isActionBtnVisible,leftBtnText,\r\n      shouldDefaultRedirect,rightBtnURI,rightBtnText,defaulltRedirectURI,isBlocking,leftBtnURI} =this.props;\r\n      const {redirectAction} = this.state;\r\n    return (\r\n      <div>\r\n        <ModalDialog\r\n            showModal={this.props.showModal}\r\n            isBlocking={isBlocking} \r\n            >\r\n            <div className=\"actionModal\" dir=\"ltr\">\r\n              <div className={'actionIcon'}>\r\n                  {this.getIcon()}\r\n                </div>\r\n                <div className={\"actionHeading\"}>\r\n                  <h2>{dialogTitle}</h2>\r\n                    <p>\r\n                      <span>\r\n                        {subText}\r\n                      </span>\r\n                    </p>\r\n                </div> \r\n                {isActionBtnVisible && (\r\n                <div className={\"actionButtonsDiv\"}>\r\n                  <PrimaryButton\r\n                    key=\"left\"\r\n                    text={leftBtnText}\r\n                    data-action={'left'}\r\n                    onClick={this.handlRedirectionClick}\r\n                  />\r\n                  <PrimaryButton\r\n                    key=\"right\"\r\n                    text={rightBtnText}\r\n                    data-action={'right'}\r\n                    onClick={this.handlRedirectionClick}\r\n                  />\r\n                </div> )}    \r\n                {shouldDefaultRedirect && this.state.isRedirect && (\r\n                    this.props.actionType===\"Clone\"?this.redirectClone(defaulltRedirectURI):<Redirect to={defaulltRedirectURI} />         \r\n                )}         \r\n                {!shouldDefaultRedirect && this.state.isRedirect && (\r\n                    <Redirect to={redirectAction==\"left\"?leftBtnURI:rightBtnURI} />          \r\n                )}         \r\n              </div>\r\n        </ModalDialog>\r\n      </div>\r\n    );\r\n  }\r\n}","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {\r\n    Dialog,\r\n    DialogType,\r\n    DialogFooter,\r\n} from 'office-ui-fabric-react/lib/Dialog';\r\nimport {PrimaryButton, DefaultButton} from 'office-ui-fabric-react/lib/Button';\r\n\r\nconst stylesBlock ={    \r\n    subText  :{\r\n        marginBottom: '0px!important',\r\n    }\r\n}\r\nconst BlockingDialog = props => {\r\n    return (\r\n        <div>\r\n            <Dialog\r\n                hidden={props.hideDialog}\r\n                dialogContentProps={{\r\n                    type: DialogType.normal,\r\n                    title: props.title,\r\n                    subText: props.subText,\r\n                }}\r\n                modalProps={{\r\n                    isBlocking: props.isBlocking,\r\n                    // styles: {main: {maxWidth: 450}},\r\n                }}\r\n                onDismiss={props.dismissClick}\r\n                styles={stylesBlock}\r\n            >\r\n                {props.children}\r\n                <DialogFooter>\r\n                    <PrimaryButton text={props.actionBtnTxt} onClick={props.handleAction}/>\r\n                    {!props.isBlocking &&(<DefaultButton onClick={props.dismissClick} text={props.dismisBtnTxt} />)}\r\n                </DialogFooter>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n};\r\n\r\nBlockingDialog.propTypes = {\r\n    children: PropTypes.any,\r\n    hideDialog: PropTypes.bool.isRequired,\r\n    dismissClick: PropTypes.func,\r\n    handleAction: PropTypes.func.isRequired,\r\n    actionBtnTxt: PropTypes.string.isRequired,\r\n    title: PropTypes.string.isRequired,\r\n    isBlocking: PropTypes.bool.isRequired,\r\n    subText: PropTypes.string,\r\n    dismisBtnTxt: PropTypes.string,\r\n    CustClassName: PropTypes.string,\r\n};\r\n\r\nexport default BlockingDialog;\r\n","import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport BlockingDialog from './BlockingDialog';\r\nimport {CommandBarButton} from 'office-ui-fabric-react';\r\nimport {DefaultButton,PrimaryButton} from 'office-ui-fabric-react/lib/Button';\r\n\r\nexport interface IButtonWithDialogProps{\r\n    iconString?: string;\r\n    buttonTxt:string;\r\n    onBtnClick: any;\r\n    dialogTitle: string;\r\n    subText: string;\r\n    isBlocking: boolean;\r\n    hideDialog: boolean;\r\n    buttonType?: 'Primary'|'Command'|'Default';\r\n    CustClassName: string;\r\n    handleAction: any;\r\n    actionBtnTxt: string;\r\n    dismisBtnTxt: string;\r\n    disabled?:boolean;\r\n}\r\n\r\nexport default class ButtonWithDialog extends Component<IButtonWithDialogProps,{}> {\r\n    render() {\r\n        return (\r\n            <>\r\n                {this.props.buttonType === 'Command' ? (\r\n                    <CommandBarButton\r\n                        iconProps={{\r\n                            iconName: this.props.iconString,\r\n                        }}\r\n                        disabled={this.props.disabled}\r\n                        text={this.props.buttonTxt}\r\n                        onClick={this.props.onBtnClick}\r\n                        name={this.props.buttonTxt}\r\n                    />\r\n                ) : (this.props.buttonType === 'Primary'?\r\n                    (\r\n                    <PrimaryButton\r\n                        disabled={this.props.disabled}\r\n                        text={this.props.buttonTxt}\r\n                        onClick={this.props.onBtnClick}\r\n                        name={this.props.buttonTxt}\r\n                    />\r\n                )\r\n                :(\r\n                <DefaultButton\r\n                    disabled={this.props.disabled}\r\n                    text={this.props.buttonTxt}\r\n                    onClick={this.props.onBtnClick}\r\n                    name={this.props.buttonTxt}\r\n                />)\r\n                )}\r\n                <BlockingDialog\r\n                    hideDialog={this.props.hideDialog}\r\n                    title={this.props.dialogTitle}\r\n                    handleAction={this.props.handleAction}\r\n                    actionBtnTxt={this.props.actionBtnTxt}\r\n                    isBlocking={this.props.isBlocking}\r\n                    subText={this.props.subText}\r\n                    dismissClick= {this.props.onBtnClick}\r\n                    dismisBtnTxt= {this.props.dismisBtnTxt}\r\n                    CustClassName= {this.props.CustClassName}\r\n                >\r\n                    {this.props.children}\r\n                </BlockingDialog>\r\n            </>\r\n        );\r\n    }\r\n}","import * as React from 'react';\r\nimport {\r\n    MessageBar,\r\n    MessageBarType,\r\n} from 'office-ui-fabric-react/lib/MessageBar';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {TextField} from 'office-ui-fabric-react/lib/TextField';\r\nimport {PrimaryButton} from 'office-ui-fabric-react/lib/Button';\r\nimport {Spinner, SpinnerSize} from 'office-ui-fabric-react/lib/Spinner';\r\nimport * as _ from 'lodash';\r\nimport AppConfig from '../../Constans';\r\nimport FormWrapper from '../FormWrapper';\r\nimport '../Forms.css';\r\nimport './ActivityForm.css';\r\nimport {\r\n    getUniqueLocationObjs,\r\n    getShiftData,\r\n    getLocationEquipments,\r\n    formatActivityDate,\r\n    validateEmail,\r\n    createActivity,\r\n} from './ActivityService';\r\nimport LocationShiftAvailability from './LocationShiftAvailability';\r\nimport DateAndShifts from './DateAndShifts';\r\nimport NamePersonVisitor from './NamePersonVisitor';\r\nimport LocationsAndEquipments from './LocationsAndEquipments';\r\nimport { IActivityFormState, IActivityShift, IActivityEquipment, IActivity, IUserPersonaField, IActivityFormProps } from './interfaces/IActivityForm';\r\nimport { BlockingSpinner } from '../Common/dialogs/BlockingSpinner';\r\nimport { UserInfoContext } from '../../Main';\r\nimport ActionScreen from '../Common/ActionScreen';\r\nimport ButtonWithDialog from '../Common/dialogs/ButtonWithDialog';\r\nimport { ILocationShiftAvailability } from './interfaces/ILocationShiftAvailability';\r\nimport { today } from '../Calendar/CalendarService';\r\n\r\nconst moment =  require('moment');\r\nconst uuidv4 = require('uuid/v4');\r\n\r\n\r\nconst descFieldClass = {\r\n    wrappetr: {\r\n        width: '100%',\r\n        display: 'block',\r\n    },\r\n    root: {\r\n        width: '100%',\r\n    },\r\n    field: {\r\n        height: 200,\r\n    },\r\n};\r\nlet InitialErrorMsg = {\r\n    activityDate: '',\r\n    selectedShiftIds: '',\r\n    activityName: '',\r\n    activityDescription: '',\r\n    bookedForEmail: '',\r\n    visitorEmail: '',\r\n    selectedLocations: '',\r\n};\r\nexport default class ActivityForm extends React.Component<IActivityFormProps,IActivityFormState> {\r\n    constructor(props:any) {\r\n        super(props);\r\n        ActivityForm.contextType = UserInfoContext;\r\n        this.state = {\r\n            newActivity: {\r\n                activityDate: new Date(formatActivityDate()),\r\n                ExperimentId:null,\r\n                DayOffset:0,\r\n                selectedShiftIds: [],\r\n                activityName: '',\r\n                activityDescription: '',\r\n                bookedForEmail: [],\r\n                bookedByEmail: {} as IUserPersonaField,\r\n                visitorEmail: '',\r\n                selectedLocations: [],\r\n                selectedEquipments: [],\r\n                showVisitorField: false,\r\n            },\r\n            errorMsgs: {\r\n                activityDate: '',\r\n                selectedShiftIds: '',\r\n                activityName: '',\r\n                activityDescription: '',\r\n                bookedForEmail: '',\r\n                visitorEmail: '',\r\n                selectedLocations: '',\r\n            },\r\n            ShiftTimmings: [],\r\n            Locations: [],\r\n            selectedFor:[],\r\n            Equipments: [],\r\n            locationEquipKey:uuidv4(),\r\n            isLoaded: false,\r\n            showErrorMsg: false,\r\n            SaveFlag: false,\r\n            isCreated: false,\r\n            hideCancelDialog: true,\r\n            isRedirect: false,\r\n            LSAFullyBooked: false,\r\n            errorMsg: '',\r\n            actionType:\"Create\",\r\n            formFieldKey:uuidv4(),\r\n            LsaArr:[] as ILocationShiftAvailability[]\r\n        };\r\n    }\r\n    componentDidMount() {\r\n        const promises = [];\r\n        promises.push(getShiftData());\r\n        promises.push(getLocationEquipments());\r\n        Promise.all(promises)\r\n            .then(responses => {\r\n                // console.log(responses);\r\n                if (responses.length > 0) {\r\n                    let shifts = responses[0] ? responses[0] : [];\r\n                    let locationEquipmentData = responses[1]\r\n                        ? responses[1]\r\n                        : [];\r\n                    this.arrangeFormFields(shifts, locationEquipmentData);\r\n                } else {\r\n                    this.setState({\r\n                        isLoaded:true,\r\n                        showErrorMsg: true,\r\n                        errorMsg: AppConfig.ActivityForm.ErrorDataFetchMessage\r\n                    });\r\n                }\r\n            })\r\n            .catch(error => {\r\n                this.setState({\r\n                    isLoaded:true,\r\n                    showErrorMsg: true,\r\n                    errorMsg: AppConfig.ActivityForm.ErrorDataFetchMessage\r\n                });\r\n                console.log(error);\r\n            });\r\n    }\r\n    componentDidUpdate(prevProps:IActivityFormProps, prevState:IActivityFormState) {\r\n        const {ExpData} = this.props;\r\n        const {newActivity} = this.state;\r\n        if(ExpData && prevProps.ExpData){\r\n            if(ExpData.ExpOwnerEmail !== prevProps.ExpData.ExpOwnerEmail){\r\n                newActivity.ExperimentId = ExpData.ExpId;\r\n                newActivity.ExperimentOwner = ExpData.ExpOwnerEmail;\r\n                newActivity.ExperimentStartDate = ExpData.ExpStartDate;\r\n                newActivity.activityDate = this.checkExpDateIsPast(ExpData.ExpStartDate);\r\n                this.setState({\r\n                    newActivity\r\n                });\r\n            }\r\n            let prevExpDate = moment(prevProps.ExpData.ExpStartDate);\r\n            let expDate = moment(ExpData.ExpStartDate);\r\n            let dateDiff = expDate.diff(prevExpDate,'days');\r\n            if(dateDiff !== 0){\r\n                newActivity.ExperimentId = ExpData.ExpId;\r\n                newActivity.ExperimentOwner = ExpData.ExpOwnerEmail;\r\n                newActivity.ExperimentStartDate = ExpData.ExpStartDate;\r\n                newActivity.activityDate = this.checkExpDateIsPast(ExpData.ExpStartDate);\r\n                this.setState({\r\n                    newActivity,\r\n                    formFieldKey:uuidv4()\r\n                });\r\n            }\r\n            if(ExpData.ExperimentNotSaved !== prevProps.ExpData.ExperimentNotSaved){\r\n                newActivity.ExperimentId = ExpData.ExpId;\r\n                newActivity.ExperimentOwner = ExpData.ExpOwnerEmail;\r\n                newActivity.ExperimentStartDate = ExpData.ExpStartDate;\r\n                newActivity.activityDate = this.checkExpDateIsPast(ExpData.ExpStartDate);\r\n                this.setState({\r\n                    newActivity,\r\n                    formFieldKey:uuidv4()\r\n                });\r\n            }\r\n        }\r\n    }\r\n    updateStateLSA = (lsaArr:any) => {\r\n        var raiseError = this.alertLSAFullyBooked(lsaArr);\r\n        this.setState({\r\n            LsaArr:lsaArr,\r\n            showErrorMsg:raiseError,\r\n            errorMsg: AppConfig.ActivityForm.FullyBookedAlertMsg\r\n        });\r\n    }  \r\n    checkExpDateIsPast = (expDate:any) =>{\r\n        var currExpDate = moment(expDate);\r\n        var currDate = moment(today);\r\n        var diffDates = currDate.diff(currExpDate,'days');\r\n        if(expDate && diffDates>0){\r\n            return new Date(formatActivityDate());\r\n        }\r\n        else{\r\n            return expDate;\r\n        }\r\n    }  \r\n    arrangeFormFields = (shifts:IActivityShift[], locationEquipmentData:IActivityEquipment[]) => {\r\n        let currentUserName:string = this.context.name;\r\n        let currentUserEmail:string = this.context.userName;\r\n        var shiftArr:IActivityShift[] = [],\r\n            selectedShiftIds:number[] = [];\r\n        if (!AppConfig.ActivityForm.showTBD) {\r\n            shifts = _.reject(shifts, {\r\n                DisplayName: AppConfig.ActivityForm.TBDRejectDispName,\r\n            });\r\n            shifts.map(element => {\r\n                return (element.isSelected = false);\r\n            });\r\n            shiftArr = shifts;\r\n        } else {\r\n            // remove if tbd is created at index 1\r\n            let tbdShiftArr = _.filter(shifts, {\r\n                DisplayName: AppConfig.ActivityForm.TBDRejectDispName,\r\n            });\r\n            if (tbdShiftArr && tbdShiftArr.length > 0) {\r\n                let tbdShift = tbdShiftArr[0];\r\n                tbdShift.isSelected = false;\r\n                shifts = _.reject(shifts, {\r\n                    DisplayName: AppConfig.ActivityForm.TBDRejectDispName,\r\n                });\r\n                shiftArr.push(tbdShift);\r\n                for (let sndex = 0; sndex < shifts.length; sndex++) {\r\n                    const shiftElm = shifts[sndex];\r\n                    shiftElm.isSelected = false;\r\n                    shiftArr.push(shiftElm);\r\n                }\r\n                // selectedShiftIds = [AppConfig.ActivityForm.TBDRejectShiftId];\r\n            }\r\n        }\r\n      \r\n        let uniqLocationsArr = getUniqueLocationObjs(locationEquipmentData, this.props.office);\r\n        const {newActivity} = this.state;\r\n        const {ExpData} = this.props;\r\n        newActivity.selectedShiftIds = selectedShiftIds;\r\n        newActivity.bookedByEmail.DisplayName = currentUserName;\r\n        newActivity.bookedByEmail.Email= currentUserEmail;\r\n        var obj:IUserPersonaField = {} as IUserPersonaField;\r\n        newActivity.bookedForEmail.push(obj);\r\n        newActivity.bookedForEmail[0].DisplayName = currentUserName;\r\n        newActivity.bookedForEmail[0].UserLogin = currentUserEmail;\r\n        newActivity.bookedForEmail[0].Email = currentUserEmail;\r\n      if(ExpData){\r\n        newActivity.ExperimentId = ExpData.ExpId;\r\n        newActivity.ExperimentOwner = ExpData.ExpOwnerEmail;\r\n        newActivity.activityDate = this.checkExpDateIsPast(ExpData.ExpStartDate);\r\n        newActivity.ExperimentStartDate = ExpData.ExpStartDate;\r\n      }\r\n        this.setState({\r\n            ShiftTimmings: shiftArr,\r\n            newActivity: newActivity,\r\n            Locations: uniqLocationsArr,\r\n            Equipments: locationEquipmentData,\r\n            isLoaded: true,\r\n            selectedFor:[...this.state.selectedFor, newActivity.bookedForEmail[0]],\r\n            locationEquipKey: uuidv4(),\r\n        });\r\n        if(ExpData){\r\n            if(this.props.handleActivityActions){\r\n                this.props.handleActivityActions(\"Form Loaded\", \"LoadForm\");\r\n            }\r\n        }\r\n    }\r\n    handleFormFieldChange = (updateProp:any, field:string) => {\r\n        const {newActivity,LsaArr} :any = this.state;\r\n        newActivity[field] = updateProp;\r\n        var rasieAlert = this.alertLSAFullyBooked(LsaArr);\r\n        if(rasieAlert && field ==='selectedShiftIds' ){\r\n            this.setState({\r\n                newActivity,\r\n                showErrorMsg: true,\r\n                errorMsg: AppConfig.ActivityForm.FullyBookedAlertMsg\r\n            });\r\n        } \r\n        else{\r\n            this.setState({\r\n                newActivity,\r\n                showErrorMsg: false,\r\n                errorMsg: ''\r\n            });  \r\n        }\r\n    }\r\n    handleEquipmentSelection = (updateProp:any, field:string) => {\r\n        let newActivity:any= this.state.newActivity;\r\n        newActivity[field] = updateProp;\r\n        this.setState({\r\n            newActivity,\r\n        });\r\n    }\r\n    handleLocationSelection = (locationValues:any, equipValues:string) => {\r\n        const {newActivity,LsaArr} :any = this.state;\r\n        newActivity['selectedLocations'] = locationValues;\r\n        newActivity['selectedEquipments'] = equipValues;\r\n        var rasieAlert = this.alertLSAFullyBooked(LsaArr);\r\n        if(rasieAlert){\r\n            this.setState({\r\n                newActivity,\r\n                showErrorMsg: true,\r\n                errorMsg: AppConfig.ActivityForm.FullyBookedAlertMsg\r\n            });\r\n        } else{\r\n            this.setState({\r\n                newActivity,\r\n                showErrorMsg: false,\r\n                errorMsg: ''\r\n            });  \r\n        }\r\n    }\r\n    handleOnChange = (eventObj:any) => {\r\n        const {newActivity} :any = this.state,\r\n            val = eventObj.target.value;\r\n        if (typeof val === 'string'){\r\n            if(val.trim() === '') {\r\n                newActivity[eventObj.target.name] = '';\r\n            } else {\r\n                newActivity[eventObj.target.name] = val;\r\n            }\r\n        } \r\n        if(eventObj.target.name === 'visitorEmail'){\r\n            newActivity[eventObj.target.name] = val;\r\n            // newActivity.bookedForEmail = [];\r\n            this.setState({\r\n                newActivity, \r\n            });\r\n        }\r\n        else if(eventObj.target.name === \"bookedForEmail\"){\r\n            newActivity[eventObj.target.name] = val;\r\n            this.setState({\r\n                selectedFor:eventObj.target.selectedFor,\r\n                newActivity, \r\n            });\r\n        }\r\n        else if(eventObj.target.name === \"showVisitorField\"){\r\n            newActivity[eventObj.target.name] = val;\r\n            // newActivity.bookedForEmail = [];\r\n            newActivity.visitorEmail = '';\r\n            this.setState({\r\n                newActivity, \r\n            });\r\n        }\r\n        else{\r\n            this.setState({\r\n                newActivity: newActivity,\r\n            });\r\n        }\r\n    }\r\n    validateFields = (newActivity:IActivity) => {\r\n        let fieldsArr = ['activityName','visitorEmail'],\r\n            fieldValueArr:any = newActivity,\r\n            flag = true,\r\n            errorArr = ['Activity Name is required field.','Visitor Email is required field.'];\r\n        const {ExpData} =  this.props;\r\n            if(this.props.office){\r\n                newActivity.selectedEquipments = [];\r\n                newActivity.selectedLocations = [AppConfig.ActivityForm.officeSpaceUsageLocation];\r\n            }\r\n        try {\r\n            for (let i = 0; i < fieldsArr.length; i++) {\r\n                let eachField = fieldsArr[i];\r\n                if(eachField === 'visitorEmail'){\r\n                    if(newActivity.showVisitorField){\r\n                        const emailId = fieldValueArr[eachField]; \r\n                        if(emailId === ''){\r\n                            this.addValidationError(errorArr[i], fieldsArr[i], flag);\r\n                            flag = false;\r\n                        }\r\n                        else{\r\n                            let checkFlag = validateEmail(emailId);\r\n                            if (!checkFlag) {\r\n                                let errMsg ='Visitor Email field should contain valid email.';\r\n                                this.addValidationError(errMsg, fieldsArr[i], flag);\r\n                                flag = false;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    if(fieldValueArr[eachField] === '') {\r\n                        this.addValidationError(errorArr[i], fieldsArr[i], flag);\r\n                        flag = false;\r\n                    }\r\n                }\r\n            }\r\n            if (isNaN(newActivity.activityDate.getTime())) {\r\n                this.addValidationError('Activity Date is required field.', 'activityDate', flag);\r\n                flag = false;\r\n            }\r\n            else{\r\n                if(ExpData){\r\n                    var currActivityDate = moment(newActivity.activityDate),\r\n                    currDate = moment(),\r\n                    expDate = moment(ExpData.ExpStartDate);\r\n                    let diffDates = currDate.diff(currActivityDate,'days');\r\n                    if( diffDates>0){\r\n                        this.addValidationError('Activity Date should be selected from future dates.', 'activityDate', flag);\r\n                        flag = false;\r\n                    }\r\n                    var diffExpDates = expDate.diff(currActivityDate,'days');\r\n                    if(diffExpDates>0){\r\n                        let errMsg:string =\"Select Activity Date from future dates and should not be before experiment date.\";\r\n                        if(flag){\r\n                            errMsg = 'Activity Date should be selected from future dates.';\r\n                        }\r\n                        this.addValidationError(errMsg, 'activityDate', flag);\r\n                        flag = false;\r\n                    }\r\n                }\r\n            }\r\n            if (newActivity.selectedShiftIds.length<1) {\r\n                this.addValidationError('Activity Shift is required field.', 'selectedShiftIds', flag);\r\n                flag = false;\r\n            }\r\n            if (!newActivity.showVisitorField && newActivity.bookedForEmail.length<1) {\r\n                this.addValidationError('Person Name is required field.', 'bookedForEmail', flag);\r\n                flag = false;\r\n            }\r\n            if (newActivity.selectedLocations.length<1) {\r\n                this.addValidationError('Location is required field.', 'selectedLocations', flag);\r\n                flag = false;\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n            flag = false;\r\n        }\r\n        return flag;\r\n    }\r\n    addValidationError = (message:string, id:string, flushErrors:boolean) => {\r\n        this.setState((previousState:any) => {\r\n            let errorMessageArr:any = {};\r\n            if (!flushErrors) {\r\n                errorMessageArr = {...previousState.errorMsgs};\r\n            }\r\n            errorMessageArr[id] = message;\r\n            return {\r\n                errorMsgs: errorMessageArr,\r\n            };\r\n        });\r\n    }\r\n    alertLSAFullyBooked = (LsaArr:ILocationShiftAvailability[]):boolean =>{\r\n        const {newActivity} = this.state;\r\n        var fullCapLSA:ILocationShiftAvailability[] =  _.filter(LsaArr,{OnAlert:true}), raiseAlert:boolean = false;\r\n        if(fullCapLSA.length>0){\r\n            let filterSelection = _.filter(fullCapLSA,(lsa)=>{\r\n                let shiftSelected = false;\r\n                let locSelected = false;\r\n                if(newActivity.selectedShiftIds.indexOf(lsa.ShiftId) !==-1){\r\n                    shiftSelected = true;\r\n                }\r\n                if(newActivity.selectedLocations.indexOf(lsa.LocationId) !==-1){\r\n                    locSelected = true;\r\n                }                \r\n                return shiftSelected && locSelected;\r\n            });\r\n            if(filterSelection.length>0){\r\n                raiseAlert = true;\r\n            }\r\n        }\r\n        return raiseAlert;\r\n    }\r\n    handleFormSaveClick = (ev:any) => {\r\n        ev.preventDefault();\r\n        const {newActivity,LSAFullyBooked,LsaArr} = this.state;\r\n        if(LSAFullyBooked){\r\n            this.setState({\r\n                LSAFullyBooked:false\r\n            });\r\n        }else{\r\n            var flag = this.validateFields(newActivity);\r\n            if (flag) {\r\n                this.setState({\r\n                    showErrorMsg: false,\r\n                    errorMsg: '',\r\n                    errorMsgs: InitialErrorMsg,\r\n                });\r\n                var alertFlag = this.alertLSAFullyBooked(LsaArr);\r\n                if(alertFlag){\r\n                    this.setState({\r\n                        LSAFullyBooked:true\r\n                    });\r\n                }\r\n                else{\r\n                    this.callForCreate(newActivity,AppConfig.ActivityForm.OfcAndIndiActivityType);\r\n                }\r\n            } else {\r\n                this.setState({\r\n                    showErrorMsg: true,\r\n                    errorMsg: AppConfig.ActivityForm.ErrorValidationMessage,\r\n                });\r\n            }\r\n        }\r\n    }\r\n    handleFormSaveClickAction = () =>{\r\n        const {newActivity} = this.state;\r\n        this.callForCreate(newActivity,AppConfig.ActivityForm.OfcAndIndiActivityType);\r\n    }\r\n    callForCreate = (newActivity:IActivity,activityType:string) =>{\r\n        this.setState({SaveFlag:true, LSAFullyBooked:false});       \r\n        createActivity(newActivity,activityType).then(response => {\r\n            this.setState({SaveFlag:false,isCreated:true,actionType:\"Create\"});\r\n            if(this.props.ExpData){\r\n                if(this.props.handleActivityActions){\r\n                    this.props.handleActivityActions(newActivity, \"CreatedActivity\");\r\n                }\r\n            }\r\n        }).catch(error => {\r\n            this.setState({\r\n                SaveFlag:false,\r\n                showErrorMsg: true,\r\n                actionType:\"Failed\",\r\n                errorMsg:AppConfig.ActivityForm.CreationErrorMessage +error\r\n            });\r\n            console.log(error);\r\n        });\r\n\r\n    }\r\n    renderErrorMsg(msg:string){\r\n        return(\r\n            <MessageBar messageBarType={MessageBarType.error} className={\"errorMsgInfo\"}>\r\n                {msg}\r\n            </MessageBar>\r\n        );\r\n    }\r\n    loadSpinner = (labelTxt:string,isLoading:boolean) => {\r\n        return (\r\n            <div className=\"centeredContainer\">\r\n                <BlockingSpinner label={labelTxt} hideDialog={!isLoading}/>\r\n            </div>\r\n        );\r\n    }\r\n    clearShiftSelection =(): IActivityShift[]=>{\r\n        var shiftArr:IActivityShift[] = [] as IActivityShift[];\r\n        const {ShiftTimmings} = this.state;\r\n        for (let shiftIndex = 0; shiftIndex < ShiftTimmings.length; shiftIndex++) {\r\n            const shiftRec = ShiftTimmings[shiftIndex];\r\n            shiftRec.isSelected = false;\r\n            shiftArr.push(shiftRec);\r\n        }\r\n        return shiftArr;\r\n    }\r\n    handleCancelClick = () =>{\r\n        const {hideCancelDialog} = this.state;\r\n        this.setState({\r\n            hideCancelDialog:!hideCancelDialog\r\n        });\r\n    }\r\n    handleCancelAction = () =>{\r\n        this.setState({\r\n            isRedirect:true\r\n        });\r\n    }    \r\n    render() {\r\n        const {\r\n            isLoaded,\r\n            ShiftTimmings,\r\n            newActivity,\r\n            errorMsgs,\r\n            Equipments,\r\n            Locations,\r\n            selectedFor,\r\n            locationEquipKey,\r\n            showErrorMsg,\r\n            errorMsg,\r\n            formFieldKey,\r\n            isCreated,\r\n            actionType,\r\n            SaveFlag,\r\n            hideCancelDialog,\r\n            isRedirect,\r\n            LSAFullyBooked\r\n        } = this.state;\r\n    const {office,NotPopActions,ExpData} =this.props;\r\n    const formHeading = office? 'Office Usage' : 'Lab Activity';\r\n    const dialogMsg = AppConfig.ActivityForm.FullyBookedDialogMsg;\r\n        return (\r\n            <div className=\"formMain\">\r\n                {isLoaded ? (\r\n                <>                   \r\n                    <FormWrapper FormHeading={\"Add \"+ formHeading}>\r\n                        <div className=\"ms-Grid\" dir=\"ltr\">\r\n                            <div className=\"ms-Grid-row\">\r\n                                <div className=\"ms-Grid-col ms-sm8\">\r\n                                    <div>\r\n                                    <DateAndShifts key={formFieldKey.toString()}\r\n                                        activityDate={newActivity.activityDate}\r\n                                        selectedShiftIds={\r\n                                            newActivity.selectedShiftIds\r\n                                        }\r\n                                        shiftTimmings={ShiftTimmings}\r\n                                        errorMsgs={errorMsgs}\r\n                                        ExpId={newActivity.ExperimentId}\r\n                                        ExpDate={newActivity.ExperimentStartDate}\r\n                                        handleFormFieldChange={\r\n                                            this.handleFormFieldChange\r\n                                        }\r\n                                    />    \r\n                                    </div>\r\n                                    <NamePersonVisitor key={formFieldKey.toString()}\r\n                                        errorMsgs ={errorMsgs}\r\n                                        activityName={newActivity.activityName}\r\n                                        selectedFor={selectedFor}                                        \r\n                                        showVisitorField ={newActivity.showVisitorField}\r\n                                        visitorEmail={newActivity.visitorEmail}\r\n                                        handleOnChange={this.handleOnChange}\r\n                                    />                               \r\n                                    <div className=\"ms-Grid-row\">\r\n                                        <div className=\"ms-Grid-col ms-sm5\">\r\n                                            <TextField\r\n                                                multiline\r\n                                                label=\"Activity Description\"\r\n                                                name=\"activityDescription\"\r\n                                                placeholder=\"Activity Description\"\r\n                                                value={\r\n                                                    newActivity.activityDescription\r\n                                                }\r\n                                                errorMessage={\r\n                                                    errorMsgs.activityDescription\r\n                                                }\r\n                                                onChange={this.handleOnChange}\r\n                                                styles={descFieldClass}\r\n                                            />\r\n                                        </div>\r\n                                        <div className=\"ms-Grid-col ms-sm7\">\r\n                                        {office?(''):\r\n                                        ( <LocationsAndEquipments key={locationEquipKey}\r\n                                                locationEquipKey={locationEquipKey}\r\n                                                Equipments={Equipments}\r\n                                                Locations={Locations}\r\n                                                errorMsgs={errorMsgs}\r\n                                                selectedLocations={newActivity.selectedLocations}\r\n                                                selectedEquipments={newActivity.selectedEquipments}\r\n                                                handleLocationSelectionChange={this.handleLocationSelection}\r\n                                                handleEquipmentSelectionChange={this.handleEquipmentSelection}\r\n                                            />\r\n                                        )}\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"ms-Grid-row\">\r\n                                        <div className=\"ms-Grid-col ms-sm8\"></div>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"ms-Grid-col ms-sm4\">\r\n                                    <div className=\"ms-Grid-row shiftLocation\">\r\n                                        <LocationShiftAvailability\r\n                                            sendLsaArr ={this.updateStateLSA}\r\n                                            Shifts={ShiftTimmings}\r\n                                            office={office}\r\n                                            Locations={Locations}\r\n                                            activityDate={formatActivityDate(\r\n                                                newActivity.activityDate,\r\n                                            )}\r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            {showErrorMsg?this.renderErrorMsg(errorMsg):''}\r\n                            <div className={ExpData?.ExperimentNotSaved?\"displayNone\":\"row formHeadflex\"} key=\"divButtons\">\r\n                                <div className=\"button-right\" >\r\n                                    <div className=\"leftBtns\" >\r\n                                        <ButtonWithDialog key={'Save'} \r\n                                                CustClassName ={\"BlockingDialog\"}\r\n                                                iconString={'Cancel'}\r\n                                                hideDialog={!LSAFullyBooked}\r\n                                                buttonTxt={'Add'}\r\n                                                onBtnClick={this.handleFormSaveClick}\r\n                                                buttonType={\"Primary\"}\r\n                                                dialogTitle={'Location Fully Booked'}\r\n                                                subText={dialogMsg+' Create '+formHeading+'?'}\r\n                                                isBlocking={false}\r\n                                                handleAction={this.handleFormSaveClickAction}\r\n                                                actionBtnTxt={'Yes'}\r\n                                                dismisBtnTxt={'No'}>                                            \r\n                                        </ButtonWithDialog>\r\n                                       <ButtonWithDialog key={'Cancel'}\r\n                                                CustClassName ={\"BlockingDialog\"}\r\n                                                iconString={'Cancel'}\r\n                                                hideDialog={hideCancelDialog}\r\n                                                buttonTxt={'Cancel'}\r\n                                                onBtnClick={this.handleCancelClick}\r\n                                                buttonType={'Default'}\r\n                                                dialogTitle={'Cancel?'}\r\n                                                subText={'Changes made to '+formHeading+' will not be saved.'}\r\n                                                isBlocking={false}\r\n                                                handleAction={this.handleCancelAction}\r\n                                                actionBtnTxt={'Yes'}\r\n                                                dismisBtnTxt={'No'}>                                            \r\n                                        </ButtonWithDialog>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </FormWrapper>\r\n                </>\r\n                ) : (\r\n                    <div className=\"centeredContainer\">\r\n                        <Spinner size={SpinnerSize.large} />\r\n                    </div>\r\n                )}\r\n                {SaveFlag?(\r\n                    this.loadSpinner('Creating '+formHeading +'...',SaveFlag)\r\n                ):''}\r\n                {isRedirect?( <Redirect to={'/Home'} /> ):''}\r\n                {isCreated && !NotPopActions?(\r\n                        <ActionScreen\r\n                            subText= {formHeading+' Created. Redirecting to Home page...'}\r\n                            dialogTitle= {'Created Successfully'}\r\n                            actionBtnTxt= {'go Home'}\r\n                            showModal= {isCreated}\r\n                            isBlocking={true}\r\n                            actionType ={actionType}\r\n                            shouldDefaultRedirect= {true}\r\n                            defaulltRedirectURI= {'/Home'}\r\n                            timmer={AppConfig.ActivityForm.FormRedirectionTimmer}\r\n                        />\r\n                ):''}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport {\r\n    MessageBar,\r\n    MessageBarType,\r\n} from 'office-ui-fabric-react/lib/MessageBar';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {TextField} from 'office-ui-fabric-react/lib/TextField';\r\nimport {PrimaryButton, DefaultButton} from 'office-ui-fabric-react/lib/Button';\r\nimport {Spinner, SpinnerSize} from 'office-ui-fabric-react/lib/Spinner';\r\nimport * as _ from 'lodash';\r\nimport AppConfig from '../../Constans';\r\nimport FormWrapper from '../FormWrapper';\r\nimport '../Forms.css';\r\nimport './ActivityForm.css';\r\nimport {\r\n    getUniqueLocationObjs,\r\n    getShiftData,\r\n    getLocationEquipments,\r\n    formatActivityDate,\r\n    validateEmail,\r\n    createActivity,\r\n    getActivityByID,\r\n    deleteActivityRecordByID,\r\n    updateActivity,\r\n    cloneActivity,\r\n    formatNonTimeDate,\r\n} from './ActivityService';\r\nimport LocationShiftAvailability from './LocationShiftAvailability';\r\nimport DateAndShifts from './DateAndShifts';\r\nimport NamePersonVisitor from './NamePersonVisitor';\r\nimport LocationsAndEquipments from './LocationsAndEquipments';\r\nimport { IActivityFormState, IActivityShift, IActivityEquipment, IActivity, IUserPersonaField, IEditActivityFormState, IEditActivityFormProps } from './interfaces/IActivityForm';\r\nimport { BlockingSpinner } from '../Common/dialogs/BlockingSpinner';\r\nimport { UserInfoContext } from '../../Main';\r\nimport { IShiftData } from '../Calendar/intefaces/ICalendar';\r\nimport ButtonWithDialog from '../Common/dialogs/ButtonWithDialog';\r\nimport { today } from '../Calendar/CalendarService';\r\nimport ActionScreen from '../Common/ActionScreen';\r\nimport { ILocationShiftAvailability } from './interfaces/ILocationShiftAvailability';\r\nconst moment = require('moment');\r\nconst uuidv4 = require('uuid/v4');\r\n\r\n\r\nconst descFieldClass = {\r\n    wrappetr: {\r\n        width: '100%',\r\n        display: 'block',\r\n    },\r\n    root: {\r\n        width: '100%',\r\n    },\r\n    field: {\r\n        height: 200,\r\n    },\r\n};\r\n\r\nlet InitialErrorMsg = {\r\n    activityDate: '',\r\n    selectedShiftIds: '',\r\n    activityName: '',\r\n    activityDescription: '',\r\n    bookedForEmail: '',\r\n    visitorEmail: '',\r\n    selectedLocations: '',\r\n    activityNotes:''\r\n};\r\nlet InitialActivity = {\r\n    ExperimentId:null,\r\n    DayOffset:0,\r\n    activityDate: new Date(formatActivityDate()),\r\n    selectedShiftIds: [],\r\n    activityName: '',\r\n    activityDescription: '',\r\n    bookedForEmail: [] as IUserPersonaField[],\r\n    bookedByEmail: {} as IUserPersonaField,\r\n    visitorEmail: '',\r\n    selectedLocations: [],\r\n    selectedEquipments: [],\r\n    showVisitorField: false\r\n};\r\nexport default class EditActivityForm extends React.Component<IEditActivityFormProps, IEditActivityFormState> {\r\n    \r\n    constructor(props: IEditActivityFormProps) {\r\n        super(props);\r\n        EditActivityForm.contextType = UserInfoContext;\r\n        this.state = {\r\n            editActivity: {\r\n                ExperimentId:null,\r\n                DayOffset:0,\r\n                activityDate: new Date(formatActivityDate()),\r\n                selectedShiftIds: [],\r\n                activityName: '',\r\n                activityDescription: '',\r\n                bookedForEmail: [] as IUserPersonaField[],\r\n                bookedByEmail: {} as IUserPersonaField,\r\n                visitorEmail: '',\r\n                selectedLocations: [],\r\n                selectedEquipments: [],\r\n                showVisitorField: false,\r\n            },\r\n            InitialShifts:[] as IActivityShift[], \r\n            LocationEquipmentData: [] as IActivityEquipment[],\r\n            errorMsgs: {\r\n                activityDate: '',\r\n                selectedShiftIds: '',\r\n                activityName: '',\r\n                activityDescription: '',\r\n                bookedForEmail: '',\r\n                visitorEmail: '',\r\n                selectedLocations: '',\r\n                activityNotes:''\r\n            },\r\n            editActivityId:0,\r\n            canEdit: true,\r\n            ShiftTimmings: [],\r\n            activityNotes:'',\r\n            hideDeleteDialog:true,\r\n            hideUpdateDialog:true,\r\n            hideCancelDialog:true,\r\n            hideCloneDialog:true,\r\n            Locations: [],\r\n            selectedFor:[],\r\n            Equipments: [],\r\n            locationEquipKey:uuidv4(),\r\n            isLoaded: false,\r\n            showErrorMsg: false,\r\n            SaveFlag: false,\r\n            isUpdated: false,\r\n            isRedirect: false,\r\n            isCreated: false,\r\n            isDeleted: false,\r\n            errorMsg: '',\r\n            formFieldKey:uuidv4(),\r\n            isClone:false,\r\n            actionType:\"Update\",\r\n            LSAFullyBooked:false,\r\n            LsaArr:[] as ILocationShiftAvailability[]\r\n\r\n        };\r\n        this.handleCancelAction = this.handleCancelAction.bind(this);\r\n    }  \r\n    initialEditActivity: IActivity = {} as IActivity;\r\n    componentDidMount() {\r\n        const promises = [];\r\n        promises.push(getShiftData());\r\n        promises.push(getLocationEquipments());\r\n        promises.push(getActivityByID(this.props.Id));\r\n        Promise.all(promises)\r\n            .then(responses => {\r\n                if (responses.length > 0) {\r\n                    let shifts:IActivityShift[] = responses[0] ? responses[0] : [];\r\n                    let locEquiptData:IActivityEquipment[] = responses[1]? responses[1]\r\n                        : [];\r\n                    let currActivityData:any = responses[2]? responses[2]\r\n                        : [];\r\n                    this.arrangeFormFields(shifts, locEquiptData,currActivityData);\r\n                } else {\r\n                        this.setState({\r\n                            editActivityId:this.props.Id,\r\n                            isLoaded:true,\r\n                            showErrorMsg: true,\r\n                            errorMsg: AppConfig.ActivityForm.ErrorDataFetchMessage\r\n                        });\r\n                }\r\n            })\r\n            .catch(error => {\r\n                this.setState({\r\n                    editActivityId:this.props.Id,\r\n                    isLoaded:true,\r\n                    showErrorMsg: true,\r\n                    errorMsg: AppConfig.ActivityForm.ErrorDataFetchMessage\r\n                });\r\n                console.log(error);\r\n            });\r\n    }\r\n    componentDidUpdate(prevProps:IEditActivityFormProps, prevState:IEditActivityFormState) {\r\n        const {Id,ExpData} = this.props;\r\n        const {editActivity} = this.state;\r\n        if(prevProps.Id!==Id){\r\n            getActivityByID(this.props.Id).then((response)=>{\r\n                if (response > 0) {\r\n                    let currActivityData:any = response? response: [];\r\n                    const {LocationEquipmentData,InitialShifts} = this.state;\r\n                    this.arrangeFormFields(InitialShifts, LocationEquipmentData, currActivityData);\r\n                } else {\r\n                        this.setState({\r\n                            editActivityId:this.props.Id,\r\n                            isLoaded:true,\r\n                            showErrorMsg: true,\r\n                            errorMsg: AppConfig.ActivityForm.ErrorDataFetchMessage\r\n                        });\r\n                }\r\n            });\r\n        }\r\n        if(ExpData && prevProps.ExpData){\r\n            if(ExpData.ExpOwnerEmail !== prevProps.ExpData.ExpOwnerEmail && !ExpData.ExperimentNotSaved){\r\n                editActivity.ExperimentOwner = ExpData.ExpOwnerEmail;\r\n                this.setState({\r\n                    editActivity\r\n                });\r\n            }\r\n            let prevExpDate = moment(editActivity.ExperimentStartDate);\r\n            let expDate = moment(ExpData.ExpStartDate);\r\n            let dateDiff = expDate.diff(prevExpDate,'days',true);\r\n            if(dateDiff !== 0 && !ExpData.ExperimentNotSaved){\r\n                editActivity.ExperimentOwner = ExpData.ExpOwnerEmail;\r\n                editActivity.ExperimentStartDate = ExpData.ExpStartDate;\r\n                // editActivity.activityDate = ExpData.ExpStartDate;\r\n                this.setState({\r\n                    editActivity,\r\n                    formFieldKey:uuidv4()\r\n                });\r\n            }\r\n            if(ExpData.ExperimentNotSaved !== prevProps.ExpData.ExperimentNotSaved){\r\n                this.setState({\r\n                    formFieldKey:uuidv4()\r\n                });\r\n            }\r\n        }\r\n    }\r\n    updateStateLSA = (lsaArr:any) => {\r\n        var raiseError = this.alertLSAFullyBooked(lsaArr);\r\n        this.setState({\r\n            LsaArr:lsaArr,\r\n            showErrorMsg:raiseError,\r\n            errorMsg: AppConfig.ActivityForm.FullyBookedAlertMsg\r\n        });\r\n    }\r\n    getShiftsSelection(shiftArr: IActivityShift[], selectedShiftIds: number[]) {\r\n        for (let shiftIndex = 0; shiftIndex < shiftArr.length; shiftIndex++) {\r\n            const shiftRecord = shiftArr[shiftIndex];\r\n            if(selectedShiftIds.indexOf(shiftRecord.Id)!== -1){\r\n                shiftRecord.isSelected = true;\r\n            }else{\r\n                shiftRecord.isSelected = false;\r\n            }            \r\n        }\r\n        return shiftArr;\r\n    } \r\n    checkIfUSerAdmiOrEditor = (editActivity: IActivity):boolean=> {\r\n        var isAdmin:boolean = false;\r\n        console.log(this.context);\r\n           try {\r\n            if(this.context.isAdmin){\r\n                isAdmin = true;\r\n            }\r\n            else{              \r\n                    //individual Activity\r\n                if(editActivity.bookedByEmail.Email.toUpperCase() === this.context.userName.toUpperCase()){\r\n                    isAdmin = true;\r\n                }\r\n                if(!editActivity.showVisitorField && \r\n                    editActivity.bookedForEmail[0].Email.toUpperCase() === this.context.userName.toUpperCase()){\r\n                    isAdmin = true;\r\n                }\r\n                if(editActivity.ExperimentId){\r\n                    //check for experiment owner\r\n                    if(editActivity.ExperimentOwner?.toUpperCase() === this.context.userName.toUpperCase()){\r\n                        isAdmin = true;\r\n                    }\r\n                }\r\n            }\r\n           } catch (error) {\r\n               console.log(\"checkIfUSerAdmiOrEditor\", error);\r\n           }\r\n            console.log(\"Can Edit\", isAdmin);\r\n        return isAdmin;\r\n    } \r\n    checkIfRecordIsEditable = (editActivity: IActivity):boolean=> {\r\n        var isEditable:boolean = true;\r\n        var currActivityDate = moment(editActivity.activityDate);\r\n        var currDate = moment(today);\r\n        var diffDates = currDate.diff(currActivityDate,'days');\r\n        var officeLocId = AppConfig.ActivityForm.officeSpaceUsageLocation;\r\n        try {\r\n            if(editActivity.ActivityStatus === AppConfig.ActivityForm.InactiveStatusId){\r\n                isEditable = false;\r\n            }\r\n            if(editActivity.activityDate && diffDates>0){\r\n                isEditable = false;\r\n            }\r\n            if(this.props.office){\r\n                if(editActivity.selectedEquipments.length>0){\r\n                    isEditable = false;\r\n                }\r\n                if(editActivity.selectedLocations.length>1){\r\n                    isEditable = false;\r\n                }\r\n                if(editActivity.selectedLocations[0] !== officeLocId ){\r\n                    isEditable = false;\r\n                }\r\n            }\r\n            else{\r\n                if(editActivity.selectedLocations.indexOf(officeLocId) !== -1){\r\n                    isEditable = false;\r\n                }                           \r\n            }\r\n            if(editActivity.ExperimentId){\r\n                if(editActivity.ExperimentStatusId === AppConfig.ActivityForm.InactiveStatusId){\r\n                    isEditable = false;\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.log(\"checkIfRecordIsEditable\", error);            \r\n        }\r\n            console.log(\"isEditable\", isEditable);\r\n        return isEditable;\r\n    } \r\n    getActivityDetailData(currActivityData: any): IActivity {\r\n        var editActivity:IActivity = {...InitialActivity};\r\n        try {\r\n            var activityDetails = currActivityData.ActivytData[0];\r\n            editActivity.Id = activityDetails.ActivityId;\r\n            var actDate = formatNonTimeDate(activityDetails.ActivityDate);\r\n            editActivity.activityDate = actDate?new Date(actDate):null;\r\n            editActivity.activityName = activityDetails.ActivityName;\r\n            editActivity.activityDescription = activityDetails.ActivityDescription;\r\n            editActivity.showVisitorField = !activityDetails.IsEmployee;\r\n            if(activityDetails.IsEmployee){\r\n                let obj:IUserPersonaField = {} as IUserPersonaField;\r\n                obj.DisplayName = activityDetails.BookedForName;\r\n                obj.Email = activityDetails.BookedForEmail;\r\n                editActivity.bookedForEmail = [];\r\n                editActivity.bookedForEmail.push(obj);\r\n            }else{\r\n                editActivity.showVisitorField = true;\r\n                editActivity.visitorEmail = activityDetails.BookedForEmail\r\n            }\r\n            let obj:IUserPersonaField = {} as IUserPersonaField;\r\n                obj.DisplayName = activityDetails.BookedByName;\r\n                obj.Email = activityDetails.BookedByEmail;\r\n                editActivity.bookedByEmail = obj;\r\n            \r\n            editActivity.DayOffset = activityDetails.DayOffset;\r\n            \r\n            editActivity.selectedShiftIds = currActivityData.ActivityShift;\r\n            editActivity.selectedLocations = currActivityData.ActivityLocation;\r\n            editActivity.selectedEquipments = currActivityData.ActivityEquipment;\r\n            //experiment Data\r\n            editActivity.ExperimentId = activityDetails.ExperimentId;\r\n            editActivity.ExperimentOwner = activityDetails.ExperimentOwner;\r\n            editActivity.ExperimentStatusId = activityDetails.ExperimentStatusId;\r\n            var expDate = formatNonTimeDate(activityDetails.ExperimentStartDate);\r\n            editActivity.ExperimentStartDate = expDate?new Date(expDate):null;\r\n            editActivity.ActivityStatus = activityDetails.ActivityStatus;            \r\n        } \r\n        catch (error) {\r\n            console.log(error);\r\n        }\r\n        return editActivity;\r\n    }\r\n    arrangeFormFields = (shifts:IActivityShift[], locationEquipmentData:IActivityEquipment[],currActivityData:any) => {\r\n        var shiftArr:IActivityShift[] = [],\r\n            selectedShiftIds:number[] = [];\r\n            if (!AppConfig.ActivityForm.showTBD) {\r\n                shifts = _.reject(shifts, {\r\n                    DisplayName: AppConfig.ActivityForm.TBDRejectDispName,\r\n                });\r\n                shifts.map(element => {\r\n                    return (element.isSelected = false);\r\n                });\r\n                shiftArr = shifts;\r\n            } else {\r\n                // remove if tbd is created at index 1\r\n                let tbdShiftArr = _.filter(shifts, {\r\n                    DisplayName: AppConfig.ActivityForm.TBDRejectDispName,\r\n                });\r\n                if (tbdShiftArr && tbdShiftArr.length > 0) {\r\n                    let tbdShift = tbdShiftArr[0];\r\n                    tbdShift.isSelected = true;\r\n                    shifts = _.reject(shifts, {\r\n                        DisplayName: AppConfig.ActivityForm.TBDRejectDispName,\r\n                    });\r\n                    shiftArr.push(tbdShift);\r\n                    for (let sndex = 0; sndex < shifts.length; sndex++) {\r\n                        const shiftElm = shifts[sndex];\r\n                        shiftElm.isSelected = false;\r\n                        shiftArr.push(shiftElm);\r\n                    }\r\n                    selectedShiftIds = [AppConfig.ActivityForm.TBDRejectShiftId];\r\n                }\r\n            }\r\n        let uniqLocationsArr = getUniqueLocationObjs(locationEquipmentData,this.props.office);\r\n        let editActivity:IActivity = this.getActivityDetailData(currActivityData);\r\n        this.initialEditActivity = JSON.parse(JSON.stringify(editActivity));\r\n        let activityShifts = this.getShiftsSelection(shiftArr,editActivity.selectedShiftIds);\r\n        let canEdit:boolean = false;\r\n        let canUserEdit:boolean= this.checkIfUSerAdmiOrEditor(editActivity);\r\n        if(canUserEdit){\r\n            var isEditable:boolean = this.checkIfRecordIsEditable(editActivity);\r\n            canEdit = isEditable;\r\n        }\r\n        else{\r\n            canEdit = canUserEdit;\r\n        }\r\n        let selectedFor =  editActivity.showVisitorField?[]:editActivity.bookedForEmail;\r\n        const {viewForm,ExpData} = this.props;\r\n        if(ExpData){\r\n            editActivity.ExperimentId = ExpData.ExpId;\r\n            editActivity.ExperimentOwner = ExpData.ExpOwnerEmail;\r\n            let expDate = formatNonTimeDate(ExpData.ExpStartDate);\r\n            editActivity.ExperimentStartDate = expDate?new Date(expDate):null;\r\n        }\r\n        this.setState({\r\n            editActivityId:this.props.Id,\r\n            InitialShifts:shifts, \r\n            LocationEquipmentData: locationEquipmentData,\r\n            ShiftTimmings: activityShifts,\r\n            editActivity: editActivity,\r\n            Locations: uniqLocationsArr,\r\n            Equipments: locationEquipmentData,\r\n            canEdit,\r\n            viewForm: viewForm || !canEdit,\r\n            selectedFor,\r\n            isLoaded: true,\r\n            locationEquipKey: uuidv4(),\r\n        });\r\n        if(ExpData){\r\n            if(this.props.handleActivityActions){\r\n                this.props.handleActivityActions(\"Form Loaded\", \"LoadForm\");\r\n            }\r\n        }\r\n    }\r\n    handleFormFieldChange = (updateProp:any, field:string) => {\r\n        let editActivity:any= this.state.editActivity;\r\n        let LsaArr:any= this.state.LsaArr;\r\n        editActivity[field] = updateProp;\r\n         //'\r\n         var rasieAlert = this.alertLSAFullyBooked(LsaArr);\r\n        if(rasieAlert && field ==='selectedShiftIds'){\r\n            this.setState({\r\n                editActivity,\r\n                showErrorMsg: true,\r\n                errorMsg: AppConfig.ActivityForm.FullyBookedAlertMsg\r\n            });\r\n        } else{\r\n            this.setState({\r\n                editActivity,\r\n                showErrorMsg: false,\r\n                errorMsg: ''\r\n            });  \r\n        }\r\n    }\r\n    handleEquipmentSelection = (updateProp:any, field:string) => {\r\n        let editActivity:any= this.state.editActivity;\r\n        editActivity[field] = updateProp;\r\n        this.setState({\r\n            editActivity,\r\n        });\r\n    }\r\n    handleLocationSelection = (locationValues:any, equipValues:string) => {\r\n        const {editActivity,LsaArr}:any= this.state;\r\n        editActivity['selectedLocations'] = locationValues;\r\n        editActivity['selectedEquipments'] = equipValues;\r\n        this.setState({\r\n            editActivity,\r\n        });\r\n        var rasieAlert = this.alertLSAFullyBooked(LsaArr);\r\n        if(rasieAlert){\r\n            this.setState({\r\n                editActivity,\r\n                showErrorMsg: true,\r\n                errorMsg: AppConfig.ActivityForm.FullyBookedAlertMsg\r\n            });\r\n        } else{\r\n            this.setState({\r\n                editActivity,\r\n                showErrorMsg: false,\r\n                errorMsg: ''\r\n            });  \r\n        }\r\n    }\r\n    handleOnChange = (eventObj:any) => {\r\n        const {editActivity} :any = this.state,\r\n            val = eventObj.target.value;\r\n        if (typeof val === 'string'){\r\n            if(val.trim() === '') {\r\n                editActivity[eventObj.target.name] = '';\r\n            } else {\r\n                editActivity[eventObj.target.name] = val;\r\n            }\r\n        } \r\n        if(eventObj.target.name === 'visitorEmail'){\r\n            editActivity[eventObj.target.name] = val;\r\n            editActivity.bookedForEmail = [];\r\n            this.setState({\r\n                editActivity, \r\n            });\r\n        }\r\n        else if(eventObj.target.name === \"bookedForEmail\"){\r\n            editActivity[eventObj.target.name] = val;\r\n            this.setState({\r\n                selectedFor:eventObj.target.selectedFor,\r\n                editActivity, \r\n            });\r\n        }\r\n        else if(eventObj.target.name === \"showVisitorField\"){\r\n            editActivity[eventObj.target.name] = val;\r\n            editActivity.bookedForEmail = [];\r\n            editActivity.visitorEmail = '';\r\n            this.setState({\r\n                editActivity, \r\n            });\r\n        }\r\n        else{\r\n            this.setState({\r\n                editActivity: editActivity,\r\n            });\r\n        }\r\n    }\r\n    renderErrorMsg(msg:string,key:any){\r\n        return(\r\n            <MessageBar messageBarType={MessageBarType.error} className={\"errorMsgInfo\"}>\r\n                {msg}\r\n            </MessageBar>\r\n        );\r\n    }\r\n    loadSpinner = (labelTxt:string,isLoading:boolean) => {\r\n        return (\r\n            <div className=\"centeredContainer\">\r\n                <BlockingSpinner label={labelTxt} hideDialog={!isLoading}/>\r\n            </div>\r\n        );\r\n    }\r\n    clearShiftSelection =(): IActivityShift[]=>{\r\n        var shiftArr:IActivityShift[] = [] as IActivityShift[];\r\n        const {ShiftTimmings} = this.state;\r\n        for (let shiftIndex = 0; shiftIndex < ShiftTimmings.length; shiftIndex++) {\r\n            const shiftRec = ShiftTimmings[shiftIndex];\r\n            // if (AppConfig.ActivityForm.showTBD && shiftRec.Id === AppConfig.ActivityForm.TBDRejectShiftId) {\r\n            //     shiftRec.isSelected = true;\r\n            // }else{\r\n                shiftRec.isSelected = false;\r\n            // }\r\n            shiftArr.push(shiftRec);\r\n        }\r\n        return shiftArr;\r\n    }\r\n    validateFields = (editActivity:IActivity) => {\r\n        let fieldsArr = ['activityName','visitorEmail'],\r\n            fieldValueArr:any = editActivity,\r\n            flag = true,\r\n            errorArr = ['Activity Name is required field.','Visitor Email is required field.'];\r\n        const {ExpData} =  this.props;\r\n        try {\r\n            for (let i = 0; i < fieldsArr.length; i++) {\r\n                let eachField = fieldsArr[i];\r\n                if(eachField === 'visitorEmail'){\r\n                    if(editActivity.showVisitorField){\r\n                        const emailId = fieldValueArr[eachField]; \r\n                        if(emailId === ''){\r\n                            this.addValidationError(errorArr[i], fieldsArr[i], flag);\r\n                            flag = false;\r\n                        }\r\n                        else{\r\n                            let checkFlag = validateEmail(emailId);\r\n                            if (!checkFlag) {\r\n                                let errMsg ='Visitor Email field should contain valid email.';\r\n                                this.addValidationError(errMsg, fieldsArr[i], flag);\r\n                                flag = false;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    if(fieldValueArr[eachField] === '') {\r\n                        this.addValidationError(errorArr[i], fieldsArr[i], flag);\r\n                        flag = false;\r\n                    }\r\n                }\r\n            }\r\n            if (isNaN(new Date(editActivity.activityDate).getTime())) {\r\n                this.addValidationError('Activity Date is required field.', 'activityDate', flag);\r\n                flag = false;\r\n            }\r\n            else{\r\n                var currDate = moment(today),\r\n                currActivityDate = moment(editActivity.activityDate);\r\n                var diffDates = currDate.diff(currActivityDate,'days');\r\n                if( diffDates>0){\r\n                    this.addValidationError('Activity Date should be selected from future dates.', 'activityDate', flag);\r\n                    flag = false;\r\n                }\r\n            }\r\n            if(ExpData){\r\n                var currActivityDate = moment(editActivity.activityDate),\r\n                currDate = moment(),\r\n                expDate = moment(ExpData.ExpStartDate);\r\n                var diffExpDates = expDate.diff(currActivityDate,'days');\r\n                if(diffExpDates>0){\r\n                    let errMsg:string =\"Select Activity Date from future dates and should not be before experiment date.\";\r\n                    if(!flag){\r\n                        errMsg = 'Activity Date should be selected from future dates.';\r\n                    }\r\n                    this.addValidationError(errMsg, 'activityDate', flag);\r\n                    flag = false;\r\n                }\r\n            }\r\n            else{\r\n                if(editActivity.ExperimentId && editActivity.ExperimentStartDate){\r\n                    var expDate = moment(editActivity.ExperimentStartDate);\r\n                    var diffExpDates = expDate.diff(currActivityDate,'days');\r\n                    if(diffExpDates>0){\r\n                        let errMsg:string =\"Select Activity Date from future dates and should not be before experiment date.\";\r\n                        if(!flag){\r\n                            errMsg = 'Activity Date should be selected from future dates.';\r\n                        }\r\n                        this.addValidationError(errMsg, 'activityDate', flag);\r\n                        flag = false;\r\n                    }\r\n                }\r\n            }\r\n            if (editActivity.selectedShiftIds.length<1) {\r\n                this.addValidationError('Activity Shift is required field.', 'selectedShiftIds', flag);\r\n                flag = false;\r\n            }\r\n            if (!editActivity.showVisitorField && editActivity.bookedForEmail.length<1) {\r\n                this.addValidationError('Person Name is required field.', 'bookedForEmail', flag);\r\n                flag = false;\r\n            }\r\n            if (editActivity.selectedLocations.length<1) {\r\n                this.addValidationError('Location is required field.', 'selectedLocations', flag);\r\n                flag = false;\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n            flag = false;\r\n        }\r\n        return flag;\r\n    }\r\n    addValidationError = (message:string, id:string, flushErrors:boolean) => {\r\n        this.setState((previousState:any) => {\r\n            let errorMessageArr:any = {};\r\n            if (!flushErrors) {\r\n                errorMessageArr = {...previousState.errorMsgs};\r\n            }\r\n            errorMessageArr[id] = message;\r\n            return {\r\n                errorMsgs: errorMessageArr,\r\n            };\r\n        });\r\n    }\r\n    updateExperimentForm = (property:any,action:\"LoadForm\"|\"CreatedActivity\"|\"ClonedActivity\"|\"UpdatedActivity\"|\"CloseForm\"|\"DeleteActivity\"|\"ViewToEdit\") =>{\r\n        if(this.props.ExpData){\r\n            if(this.props.handleActivityActions){\r\n                this.props.handleActivityActions(property, action);\r\n            }\r\n        }\r\n    }\r\n    handleCloneClick = (ev:any) => {\r\n        ev.preventDefault();\r\n        const {hideCloneDialog} = this.state;\r\n        this.setState({\r\n            hideCloneDialog:!hideCloneDialog\r\n        });      \r\n    }\r\n    handleAddClick = (ev:any) => {\r\n        ev.preventDefault();\r\n        const {editActivity} = this.state;\r\n        var flag = true//this.validateFields(editActivity);\r\n        if (flag) {\r\n            this.setState({\r\n                showErrorMsg: false,\r\n                errorMsg: '',\r\n                errorMsgs: InitialErrorMsg,\r\n            });\r\n            this.callForCreate(editActivity,AppConfig.ActivityForm.OfcAndIndiActivityType);\r\n        } else {\r\n            this.setState({\r\n                showErrorMsg: true,\r\n                errorMsg: AppConfig.ActivityForm.ErrorValidationMessage,\r\n            });\r\n        }\r\n    }\r\n    callForCreate = (editActivity:IActivity,activityType:string) =>{\r\n        this.setState({SaveFlag:true,isClone:true,hideCloneDialog:true});\r\n        let expId = editActivity.ExperimentId?editActivity.ExperimentId:null;\r\n        let jsonObj:any = {ActivityId:editActivity.Id};      \r\n        cloneActivity(jsonObj).then(response => {\r\n        let newId:any  = response?.id;\r\n        this.setState({SaveFlag:false,isCreated:true,viewForm:false,editActivityId:newId,actionType:\"Clone\"});\r\n        }).catch(error => {\r\n            this.setState({\r\n                SaveFlag:false,\r\n                actionType:\"Failed\",\r\n                showErrorMsg: true,\r\n                errorMsg:AppConfig.ActivityForm.CloneErrorMessage +error\r\n            });\r\n            console.log(error);\r\n        });\r\n\r\n    }\r\n    callForUpdate = (editActivity:any,activityType:string,activityNotes:string) =>{\r\n        this.setState({SaveFlag:true});\r\n        const {editActivityId} = this.state;\r\n        editActivity.Id= editActivityId;\r\n        if(this.props.office){\r\n            editActivity.selectedEquipments = [];\r\n            editActivity.selectedLocations = [AppConfig.ActivityForm.officeSpaceUsageLocation];\r\n        }\r\n        let notesWithUserProfile = activityNotes +\" - Modified by \" + this.context.userName; \r\n        updateActivity(editActivity,activityType,notesWithUserProfile)\r\n        .then(response => {\r\n            if(this.props.ExpData){\r\n                this.updateExperimentForm(editActivity,\"UpdatedActivity\");\r\n            }\r\n            this.setState({SaveFlag:false, hideUpdateDialog:true,isUpdated:true,actionType:\"Update\"});\r\n        }).catch(error => {\r\n            this.setState({\r\n                SaveFlag:false,\r\n                hideUpdateDialog:true,\r\n                actionType:\"Failed\",\r\n                isUpdated:false,\r\n                showErrorMsg: true,\r\n                errorMsg:AppConfig.ActivityForm.UpdateErrorMessage + error\r\n            });\r\n            console.log(error);\r\n        });\r\n\r\n    }\r\n    alertLSAFullyBooked = (LsaArr:ILocationShiftAvailability[]):boolean =>{\r\n        const {editActivity} = this.state;\r\n        var fullCapLSA:ILocationShiftAvailability[] =  _.filter(LsaArr,{OnAlert:true}), raiseAlert:boolean = false;\r\n        if(fullCapLSA.length>0){\r\n            let filterSelection = _.filter(fullCapLSA,(lsa)=>{\r\n                let shiftSelected = false;\r\n                let locSelected = false;\r\n                if(editActivity.selectedShiftIds.indexOf(lsa.ShiftId) !==-1){\r\n                    shiftSelected = true;\r\n                }\r\n                if(editActivity.selectedLocations.indexOf(lsa.LocationId) !==-1){\r\n                    locSelected = true;\r\n                }                \r\n                return shiftSelected && locSelected;\r\n            });\r\n            if(filterSelection.length>0){\r\n                raiseAlert = true;\r\n            }\r\n        }\r\n        return raiseAlert;\r\n    }\r\n    handleFormSaveClick = (ev:any) => {\r\n        ev.preventDefault();\r\n        const {editActivity,hideUpdateDialog,errorMsgs,LsaArr} = this.state;\r\n        var flag = this.validateFields(editActivity);\r\n        if (flag) {\r\n            var alertFlag = this.alertLSAFullyBooked(LsaArr);\r\n            errorMsgs.activityNotes = ''\r\n            this.setState({\r\n                hideUpdateDialog:!hideUpdateDialog,\r\n                activityNotes:'',\r\n                LSAFullyBooked:alertFlag,\r\n                showErrorMsg: false,\r\n                errorMsg: '',\r\n                errorMsgs: InitialErrorMsg,\r\n            });            \r\n        } else {\r\n            this.setState({\r\n                showErrorMsg: true,\r\n                errorMsg: AppConfig.ActivityForm.ErrorValidationMessage,\r\n            });\r\n        }\r\n    }   \r\n    handleUpdateAction = () =>{\r\n        const {activityNotes,editActivity,isClone,errorMsgs} = this.state;\r\n        this.setState({\r\n            hideUpdateDialog:false\r\n        });\r\n        // if(activityNotes.length<1){\r\n        //     errorMsgs.activityNotes = 'Please enter detailed notes before you delete.';\r\n        //     this.setState({\r\n        //         hideUpdateDialog:false,\r\n        //         errorMsgs:errorMsgs\r\n        //     });\r\n        // }\r\n        // else{\r\n            errorMsgs.activityNotes = '';\r\n            this.setState({\r\n                SaveFlag:true,\r\n                errorMsgs\r\n            });\r\n            this.callForUpdate(editActivity,AppConfig.ActivityForm.OfcAndIndiActivityType,activityNotes);\r\n        // }\r\n    } \r\n    handleNotesChange = (event:any)=>{\r\n        var val = event.target.value;\r\n        var notes:string ='';\r\n        if(val.trim() === '') {\r\n            notes= '';\r\n        } else {\r\n            notes = val;\r\n        }\r\n        this.setState({\r\n            activityNotes:notes\r\n        });\r\n    }\r\n    handleDelete = () =>{\r\n        const {hideDeleteDialog,errorMsgs} = this.state;\r\n        errorMsgs.activityNotes = ''\r\n        this.setState({\r\n            hideDeleteDialog:!hideDeleteDialog,\r\n            errorMsgs:errorMsgs,\r\n            activityNotes:''\r\n        });\r\n      \r\n    }\r\n    handleDeleteAction= () =>{\r\n        const {errorMsgs} = this.state;\r\n        errorMsgs.activityNotes = '';\r\n        this.setState({\r\n            hideDeleteDialog:false,\r\n            SaveFlag:true,\r\n            errorMsgs\r\n        });\r\n        let notesWithUserProfile = \"Deleted by \" + this.context.userName; \r\n        deleteActivityRecordByID(this.state.editActivityId,notesWithUserProfile)\r\n        .then(response => {\r\n            if(this.props.ExpData){\r\n                this.updateExperimentForm(\"Close\",\"DeleteActivity\");\r\n            }\r\n            this.setState({SaveFlag:false, hideDeleteDialog:true,isDeleted:true,actionType:\"Delete\"});\r\n        }).catch(error => {\r\n            this.setState({\r\n                SaveFlag:false,  \r\n                isDeleted:false,\r\n                actionType:\"Failed\",\r\n                hideDeleteDialog:true,\r\n                showErrorMsg: true,\r\n                errorMsg:AppConfig.ActivityForm.DeleteErrorMessage + error\r\n            });\r\n            console.log(error);\r\n        });\r\n    }\r\n    handleCancelClick = () =>{\r\n        const {hideCancelDialog} = this.state;\r\n        this.setState({\r\n            hideCancelDialog:!hideCancelDialog\r\n        });\r\n    }\r\n    handleCancelAction = (event:any) => {\r\n        event.preventDefault();\r\n        const {ExpData} = this.props;\r\n        if(ExpData){\r\n            this.updateExperimentForm(\"Close\",\"CloseForm\");\r\n        }else{\r\n            this.setState({\r\n                isRedirect:true\r\n            });\r\n        }\r\n    }   \r\n    handleEditClick = () =>{\r\n        this.setState({\r\n            viewForm:false\r\n        });\r\n        if(this.props.ExpData){\r\n            this.updateExperimentForm('Changed view to update',\"ViewToEdit\");\r\n        }\r\n    }   \r\n    handleActionAndRediret(): JSX.Element {\r\n        const {\r\n            isCreated,\r\n            isUpdated,\r\n            isDeleted,\r\n            editActivityId,\r\n            actionType,\r\n            canEdit,\r\n            isClone,\r\n            viewForm            \r\n        } = this.state;\r\n        const {office,NotPopActions} = this.props;\r\n        const subText = office? 'Office Usage' : 'Lab Activity';\r\n        const redirectURI = office? '/PlanOfficeSpace?id='+editActivityId : '/PlanActivity?id='+editActivityId;\r\n        return(\r\n            <div>\r\n                {isUpdated && !NotPopActions?(\r\n                        <ActionScreen \r\n                            subText= {subText+' updated. Redirecting to Home page...'}\r\n                            dialogTitle= {'Updated Successfully'}\r\n                            actionBtnTxt= {'go Home'}\r\n                            showModal= {isUpdated}\r\n                            isBlocking={true}\r\n                            actionType ={actionType}\r\n                            shouldDefaultRedirect= {true}\r\n                            defaulltRedirectURI= {'/Home'}\r\n                            timmer={AppConfig.ActivityForm.FormRedirectionTimmer}\r\n                        />\r\n                ):''}\r\n                {isDeleted && !NotPopActions?(\r\n                        <ActionScreen \r\n                            subText= {subText+' Deleted. Redirecting to Home page...'}\r\n                            dialogTitle= {'Deleted Successfully'}\r\n                            actionBtnTxt= {'go Home'}\r\n                            showModal= {isDeleted}\r\n                            isBlocking={true}\r\n                            actionType ={actionType}\r\n                            shouldDefaultRedirect= {true}\r\n                            defaulltRedirectURI= {'/Home'}\r\n                            timmer={AppConfig.ActivityForm.FormRedirectionTimmer}\r\n                        />\r\n                ):''}\r\n                {isCreated && !NotPopActions?(\r\n                    <ActionScreen \r\n                        subText= {subText+' Cloned. Redirecting to newly created '+subText+'...'}\r\n                        dialogTitle= {'Created Successfully'}\r\n                        isBlocking={true}\r\n                        actionBtnTxt= {'go Home'}\r\n                        showModal= {isCreated}\r\n                        actionType ={actionType}\r\n                        shouldDefaultRedirect= {true}\r\n                        defaulltRedirectURI= {redirectURI}\r\n                        timmer={AppConfig.ActivityForm.FormRedirectionTimmer}\r\n                    />\r\n                ):''}\r\n                {!canEdit && !NotPopActions && !viewForm &&!isClone?(\r\n                    <ActionScreen \r\n                        subText= {'Do not have permission to edit the '+ subText}\r\n                        dialogTitle= {'Access Denied'}\r\n                        isBlocking={false}\r\n                        actionBtnTxt= {'go Home'}\r\n                        showModal= {true}\r\n                        isActionBtnVisible={true}\r\n                        shouldDefaultRedirect={false}\r\n                        leftBtnText= {'Go Home'}\r\n                        leftBtnURI= {'/Home'}\r\n                        rightBtnText= {'My Activities'}\r\n                        rightBtnURI= {'/MyActivities'}\r\n                        actionType ={\"Denied\"}\r\n                    />\r\n                ):''}\r\n            </div>\r\n        );       \r\n    }    \r\n    render() {\r\n        const {\r\n            isLoaded,\r\n            ShiftTimmings,\r\n            editActivity,\r\n            errorMsgs,\r\n            Equipments,\r\n            Locations,\r\n            selectedFor,\r\n            locationEquipKey,\r\n            showErrorMsg,\r\n            errorMsg,\r\n            formFieldKey,           \r\n            SaveFlag,\r\n            activityNotes,\r\n            hideDeleteDialog,\r\n            hideUpdateDialog,\r\n            canEdit,\r\n            isClone,\r\n            hideCancelDialog,\r\n            hideCloneDialog,\r\n            isRedirect,\r\n            viewForm,\r\n            LSAFullyBooked            \r\n        } = this.state;\r\n        const {office,ExpData,NotPopActions} =this.props;\r\n        const formHeading1 = viewForm? 'View ':'Edit ';\r\n        const formHeading2 = office? 'Office Usage' : 'Lab Activity';\r\n        const dialogMsg = AppConfig.ActivityForm.FullyBookedDialogMsg;\r\n        var updateTxt ='Are you sure you want to update the '+formHeading2+'? Please add notes for the update.';\r\n        var lsaFullyBooked = dialogMsg;\r\n        updateTxt = LSAFullyBooked?lsaFullyBooked+updateTxt:updateTxt;\r\n\r\n        return (\r\n            <div className=\"formMain\">\r\n                {isLoaded ? (\r\n                <>                   \r\n                    <FormWrapper FormHeading={formHeading1+formHeading2}>\r\n                        <div className=\"ms-Grid\" dir=\"ltr\">\r\n                            <div className=\"ms-Grid-row\">\r\n                                <div className=\"ms-Grid-col ms-sm9\">\r\n                                    <div>\r\n                                    <DateAndShifts key={formFieldKey.toString()}\r\n                                        activityDate={editActivity.activityDate}\r\n                                        selectedShiftIds={\r\n                                            editActivity.selectedShiftIds\r\n                                        }\r\n                                        viewForm={viewForm}\r\n                                        shiftTimmings={ShiftTimmings}\r\n                                        ExpId={editActivity.ExperimentId}\r\n                                        ExpDate={editActivity.ExperimentStartDate}\r\n                                        errorMsgs={errorMsgs}\r\n                                        handleFormFieldChange={\r\n                                            this.handleFormFieldChange\r\n                                        }\r\n                                    />    \r\n                                    </div>\r\n                                    <NamePersonVisitor key={formFieldKey.toString()}\r\n                                        viewForm={viewForm}\r\n                                        errorMsgs ={errorMsgs}\r\n                                        activityName={editActivity.activityName}\r\n                                        selectedFor={selectedFor}\r\n                                        showVisitorField ={editActivity.showVisitorField}\r\n                                        visitorEmail={editActivity.visitorEmail}\r\n                                        handleOnChange={this.handleOnChange}\r\n                                    />                               \r\n                                    <div className=\"ms-Grid-row\">\r\n                                        <div className=\"ms-Grid-col ms-sm5\">\r\n                                            <TextField\r\n                                                multiline\r\n                                                disabled={viewForm}\r\n                                                label=\"Activity Description\"\r\n                                                name=\"activityDescription\"\r\n                                                placeholder=\"Activity Description\"\r\n                                                value={\r\n                                                    editActivity.activityDescription\r\n                                                }\r\n                                                errorMessage={\r\n                                                    errorMsgs.activityDescription\r\n                                                }\r\n                                                onChange={this.handleOnChange}\r\n                                                styles={descFieldClass}\r\n                                            />\r\n                                        </div>\r\n                                        <div className=\"ms-Grid-col ms-sm7\">\r\n                                               {office?(''):(\r\n                                                   <LocationsAndEquipments key={locationEquipKey}\r\n                                                    viewForm={viewForm}\r\n                                                    locationEquipKey={locationEquipKey}\r\n                                                    Equipments={Equipments}\r\n                                                    Locations={Locations}\r\n                                                    errorMsgs={errorMsgs}\r\n                                                    selectedLocations={editActivity.selectedLocations}\r\n                                                    selectedEquipments={editActivity.selectedEquipments}\r\n                                                    handleLocationSelectionChange={this.handleLocationSelection}\r\n                                                    handleEquipmentSelectionChange={this.handleEquipmentSelection}\r\n                                                />)}\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"ms-Grid-row\">\r\n                                        <div className=\"ms-Grid-col ms-sm8\"></div>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"ms-Grid-col ms-sm3\">\r\n                                    <div className=\"ms-Grid-row shiftLocation\">\r\n                                        <LocationShiftAvailability\r\n                                                sendLsaArr={this.updateStateLSA}\r\n                                                office={office}\r\n                                                Shifts={ShiftTimmings}\r\n                                                Locations={Locations}\r\n                                                activityDate={formatActivityDate(\r\n                                                    editActivity.activityDate,\r\n                                                )}  \r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            {showErrorMsg?this.renderErrorMsg(errorMsg,'errorMsg'):''}\r\n                            {!canEdit?this.renderErrorMsg('Access Denied: This record cannot be modified.','canEdit'):''}\r\n                            <div className={ExpData?.ExperimentNotSaved?\"displayNone\":\"row formHeadflex\"} key=\"divButtons\">\r\n                                {viewForm && (\r\n                                    <div className={'button-right'}>\r\n                                        <div className={'leftBtns'}>\r\n                                            {canEdit && (<PrimaryButton\r\n                                                key=\"Edit\"\r\n                                                text=\"Edit\"\r\n                                                data-action={'Edit'}\r\n                                                onClick={this.handleEditClick}\r\n                                            /> )}                                        \r\n                                            {   !NotPopActions &&(  \r\n                                                <ButtonWithDialog key={'Clone12'}\r\n                                                    CustClassName ={\"BlockingDialog\"}\r\n                                                    iconString={'Clone'}\r\n                                                    hideDialog={hideCloneDialog}\r\n                                                    buttonTxt={'Clone'}\r\n                                                    onBtnClick={this.handleCloneClick}\r\n                                                    buttonType={'Primary'}\r\n                                                    dialogTitle={'Clone?'}\r\n                                                    subText={\"This will create a copy of this \"+formHeading2+\" and display it so you can update the date and other details. Do you want to proceed?\"}\r\n                                                    isBlocking={false}\r\n                                                    handleAction={this.handleAddClick}\r\n                                                    actionBtnTxt={'Yes'}\r\n                                                    dismisBtnTxt={'No'}>                                            \r\n                                                </ButtonWithDialog>\r\n                                        )}  \r\n                                            <DefaultButton\r\n                                                key=\"Close\"\r\n                                                onClick={this.handleCancelAction}\r\n                                                text=\"Close\"\r\n                                            />\r\n                                        </div>\r\n                                    </div>\r\n                                )}                               \r\n                                <div className={viewForm || isClone?\"displayNone\":\"button-right\"}>\r\n                                    <div className={'leftBtns'}>\r\n                                        <ButtonWithDialog key={'update'}\r\n                                            CustClassName ={\"BlockingDialog\"}\r\n                                            hideDialog={hideUpdateDialog}\r\n                                            buttonTxt={'Update'}\r\n                                            onBtnClick={this.handleFormSaveClick}\r\n                                            buttonType={'Primary'}\r\n                                            dialogTitle={'Update?'}\r\n                                            subText={updateTxt}\r\n                                            isBlocking={true}\r\n                                            handleAction={this.handleUpdateAction}\r\n                                            actionBtnTxt={'Update'}\r\n                                            dismisBtnTxt={'Cancel'}\r\n                                            disabled={viewForm}>\r\n                                            <div>\r\n                                                <TextField\r\n                                                    multiline\r\n                                                    label=\"Notes (Optional)\"\r\n                                                    name=\"activityNotes\"\r\n                                                    placeholder=\"Change Reason\"\r\n                                                    value={activityNotes}\r\n                                                    errorMessage={errorMsgs.activityNotes}\r\n                                                    onChange={this.handleNotesChange}\r\n                                                />\r\n                                            </div>                                               \r\n                                        </ButtonWithDialog>\r\n                                        {!NotPopActions && (<ButtonWithDialog key={'CloneUpdate'}\r\n                                                    CustClassName ={\"BlockingDialog\"}\r\n                                                    iconString={'Clone'}\r\n                                                    hideDialog={hideCloneDialog}\r\n                                                    buttonTxt={'Clone'}\r\n                                                    onBtnClick={this.handleCloneClick}\r\n                                                    buttonType={'Primary'}\r\n                                                    dialogTitle={'Clone?'}\r\n                                                    subText={\"This will create a copy of this \"+formHeading2+\" and display it so you can update the date and other details. Do you want to proceed?\"}\r\n                                                    isBlocking={false}\r\n                                                    handleAction={this.handleAddClick}\r\n                                                    actionBtnTxt={'Yes'}\r\n                                                    dismisBtnTxt={'No'}>                                            \r\n                                                </ButtonWithDialog>)}\r\n                                        <ButtonWithDialog key={'Cancel12'}\r\n                                                CustClassName ={\"BlockingDialog\"}\r\n                                                iconString={'Cancel'}\r\n                                                hideDialog={hideCancelDialog}\r\n                                                buttonTxt={'Cancel'}\r\n                                                onBtnClick={this.handleCancelClick}\r\n                                                buttonType={'Default'}\r\n                                                dialogTitle={'Cancel?'}\r\n                                                subText={'Changes made to '+formHeading2+' will not be saved.'}\r\n                                                isBlocking={false}\r\n                                                handleAction={this.handleCancelAction}\r\n                                                actionBtnTxt={'Yes'}\r\n                                                dismisBtnTxt={'No'}>                                            \r\n                                        </ButtonWithDialog>\r\n                                    </div>\r\n                                    <div>\r\n                                        <ButtonWithDialog key={'Delete'}\r\n                                                CustClassName ={\"BlockingDialog\"}\r\n                                                iconString={'Delete'}\r\n                                                hideDialog={hideDeleteDialog}\r\n                                                buttonTxt={'Delete'}\r\n                                                onBtnClick={this.handleDelete}\r\n                                                buttonType={'Primary'}\r\n                                                dialogTitle={'Delete?'}\r\n                                                subText={'Are you sure you want to delete the activity?'}\r\n                                                isBlocking={false}\r\n                                                handleAction={this.handleDeleteAction}\r\n                                                actionBtnTxt={'Delete'}\r\n                                                disabled={viewForm}\r\n                                                dismisBtnTxt={'Cancel'}\r\n                                            >                                             \r\n                                        </ButtonWithDialog>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </FormWrapper>\r\n                </>\r\n                ) : (\r\n                    <div className=\"centeredContainer\">\r\n                        <Spinner size={SpinnerSize.large} />\r\n                    </div>\r\n                )}\r\n                {SaveFlag && hideDeleteDialog?(\r\n                    this.loadSpinner(!isClone?'Updating '+formHeading2+'...':'Cloning '+formHeading2+'...',SaveFlag)\r\n                ):''}\r\n                {SaveFlag && !hideDeleteDialog?(\r\n                    this.loadSpinner('Deleting '+formHeading2+'...',SaveFlag)\r\n                ):''}\r\n                {isRedirect?( <Redirect to={'/Home'} /> ):''}\r\n\r\n                {this.handleActionAndRediret()}\r\n            </div>\r\n        );\r\n    } \r\n}","import * as React from 'react';\r\nimport CreateActivityForm from '../Components/Activity/CreateActivityForm';\r\nimport queryString from 'query-string';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\nimport AppConfig from '../Constans';\r\nimport EditActivityForm from '../Components/Activity/EditActivityForm';\r\n\r\ninterface IPlanActivityState{\r\n    isViewForm:boolean;\r\n    isNewForm:boolean;\r\n    itemId:string;\r\n}\r\ninterface IPlanActivityProps{\r\n    handleRedirection:(selectedKey:any)=>void;\r\n}\r\nexport class PlanActivity extends React.Component<RouteComponentProps & IPlanActivityProps,IPlanActivityState> {\r\n    constructor(props:RouteComponentProps & IPlanActivityProps) {\r\n        super(props);\r\n        this.state ={\r\n            isViewForm:false,\r\n            isNewForm:true,\r\n            itemId:'0'\r\n        };\r\n        this.props.handleRedirection('2');\r\n    }    \r\n    componentDidMount() {\r\n        var qString:string = this.props.location?this.props.location.search:'';\r\n        const values = queryString.parse(qString);\r\n        if(values){\r\n            var keyIdValue:string = '0';   \r\n            var keyViewFlagValue:boolean = false;   \r\n            for (const key in values) {\r\n                if(key.toUpperCase() === AppConfig.ActivityForm.IdParam.toUpperCase()){\r\n                    keyIdValue = values[key] as string;\r\n                }  \r\n                if(key.toUpperCase() === AppConfig.ActivityForm.ViewParam.toUpperCase()){\r\n                    var keyVal = values[key]as string;\r\n                    keyViewFlagValue = parseInt(keyVal)==1?true:false;\r\n                }  \r\n            }\r\n            if(keyIdValue!=='0'){\r\n                this.setState({\r\n                    isNewForm:false,\r\n                    isViewForm:keyViewFlagValue,\r\n                    itemId:keyIdValue\r\n                });  \r\n            }                    \r\n        }\r\n\r\n    }\r\n    render() {\r\n        const {isNewForm,itemId,isViewForm} = this.state;\r\n        return (\r\n            <div style={{width:\"90%\", margin: \"0.5em auto\"}}>                \r\n               {isNewForm?<CreateActivityForm  />:\r\n               <><EditActivityForm Id={parseInt(itemId)} viewForm={isViewForm}/></>}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport CreateActivityForm from '../Components/Activity/CreateActivityForm';\r\nimport queryString from 'query-string';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\nimport { UserInfoContext } from '../Main';\r\nimport AppConfig from '../Constans';\r\nimport EditActivityForm from '../Components/Activity/EditActivityForm';\r\n\r\ninterface IPlanOfficeSpaceState{\r\n    isViewForm:boolean;\r\n    isNewForm:boolean;\r\n    itemId:string;    \r\n}\r\ninterface IPlanOfficeSpaceProps{\r\n    handleRedirection:(selectedKey:any)=>void;\r\n}\r\nexport class PlanOfficeSpace extends React.Component<RouteComponentProps & IPlanOfficeSpaceProps,IPlanOfficeSpaceState> {\r\n    constructor(props:RouteComponentProps & IPlanOfficeSpaceProps) {\r\n        super(props);\r\n        this.state ={\r\n            isViewForm:false,\r\n            isNewForm:true,\r\n            itemId:'0'\r\n        };\r\n        this.props.handleRedirection('3');        \r\n    }    \r\n    componentDidMount() {\r\n        const values = queryString.parse(this.props.location.search);\r\n        if(values){\r\n            var keyValue:string = '0';\r\n            var keyViewFlagValue:boolean = false;   \r\n            for (const key in values) {\r\n                if(key.toUpperCase() === AppConfig.ActivityForm.IdParam.toUpperCase()){\r\n                    keyValue = values[key] as string;\r\n                }  \r\n                if(key.toUpperCase() === AppConfig.ActivityForm.ViewParam.toUpperCase()){\r\n                    var keyVal = values[key]as string;\r\n                    keyViewFlagValue = parseInt(keyVal)==1?true:false;\r\n                }  \r\n            }\r\n            if(keyValue!=='0'){\r\n                this.setState({\r\n                    isNewForm:false,\r\n                    isViewForm:keyViewFlagValue,\r\n                    itemId:keyValue\r\n                });  \r\n            }                    \r\n        }\r\n\r\n    }\r\n    render() {\r\n        const {isNewForm,isViewForm,itemId} = this.state;\r\n        return (\r\n            <div style={{width:\"90%\", margin: \"0.5em auto\"}}>                \r\n               {isNewForm?<CreateActivityForm office={true}/>:\r\n               <><EditActivityForm Id={parseInt(itemId)} office={true} viewForm={isViewForm}/></>}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import * as axios from 'axios';\r\n\r\nlet ActivityGridService = {\r\n    getActivitiesForUser(userEmail, statusId, experimentId) {\r\n        return new Promise((resolve, reject) => {\r\n            axios\r\n                .post('/api/ActivityGrid/GetActivityGridForUser', {\r\n                    \"UserEmail\": userEmail,\r\n                    \"StatusId\": statusId,\r\n                    \"ExperimentId\": experimentId\r\n                })\r\n                .then(activityGridData => {\r\n                    resolve(activityGridData);\r\n                })\r\n                .catch(error => {\r\n                    console.log(error);\r\n                    reject(error);\r\n                });\r\n        });\r\n    },\r\n    GetExpWithoutActivitiesGridForUser(userEmail, statusId, experimentId) {\r\n        return new Promise((resolve, reject) => {\r\n            axios\r\n                .post('/api/ActivityGrid/GetExperimentGridForUser', {\r\n                    \"UserEmail\": userEmail,\r\n                    \"StatusId\": statusId,\r\n                    \"ExperimentId\": experimentId\r\n                })\r\n                .then(activityGridData => {\r\n                    resolve(activityGridData);\r\n                })\r\n                .catch(error => {\r\n                    console.log(error);\r\n                    reject(error);\r\n                });\r\n        });\r\n    },\r\n};\r\nexport default ActivityGridService;","import * as React from 'react';\r\nimport { UserInfoContext } from '../../Main';\r\nimport ActivityGridService from '../../services/activity-grid-service';\r\nimport {\r\n    MessageBar,\r\n    MessageBarType,\r\n} from 'office-ui-fabric-react/lib/MessageBar';\r\nimport {Spinner, SpinnerSize} from 'office-ui-fabric-react/lib/Spinner';\r\nimport {DetailsList, ConstrainMode, CheckboxVisibility, IDetailsRowStyles, DetailsRow,\r\n    SelectionMode, IDetailsListProps,IDetailsListStyles} \r\nfrom 'office-ui-fabric-react/lib/DetailsList';\r\nimport { FontIcon} from 'office-ui-fabric-react/lib/Icon';\r\nimport { Link } from 'react-router-dom';\r\nimport _ from 'lodash';\r\n\r\nconst moment = require('moment');\r\n\r\nconst detailsListStyles:Partial<IDetailsListStyles> = {\r\n    headerWrapper:{\r\n        selectors: {\r\n            '& .ms-DetailsHeader-cell:hover': {\r\n                backgroundColor: 'white!important',\r\n            },\r\n        }\r\n    },\r\n}\r\n\r\nexport interface IExperimentGrid {\r\n    ExperimentId: number;\r\n    ExperimentName: string;\r\n    ExperimentOwner: string;\r\n    ExperimentDescription: string;\r\n    ExperimentStartDate:any;\r\n}\r\n\r\nexport interface IExperimentGridState {\r\n    ExperimentsWithoutActivites:IExperimentGrid[];\r\n    isLoading:boolean;\r\n    gridLabel:string;\r\n    errorMessage:string;\r\n    showErrorMessage:boolean;\r\n}\r\n\r\nexport default class ExperimentGrid extends React.Component<{}, IExperimentGridState> {\r\n    constructor(props: {}) {\r\n        super(props);\r\n        this.state = {\r\n            ExperimentsWithoutActivites:[] as IExperimentGrid[],\r\n            isLoading:false,\r\n            errorMessage:'',\r\n            gridLabel:\"My Experiments (with no activities)\",\r\n            showErrorMessage:false\r\n        }\r\n        ExperimentGrid.contextType = UserInfoContext;\r\n    }\r\n    componentDidMount(){\r\n        this.setState({isLoading:true});\r\n        this._getDataFromDB();\r\n    }\r\n    _getDataFromDB = () => {        \r\n        let userEmail = this.context.userName;\r\n        ActivityGridService.GetExpWithoutActivitiesGridForUser(userEmail, 1, null)\r\n        .then((result)=>{\r\n            let items: IExperimentGrid[] = result.data as IExperimentGrid[];\r\n            let e = _.orderBy(items, 'ExperimentStartDate');\r\n            console.log(e);\r\n            this.setState({\r\n                ExperimentsWithoutActivites: e,\r\n                isLoading: false,\r\n                errorMessage: \"\"\r\n            });            \r\n        })\r\n        .catch(error => {\r\n            this.setState({\r\n                isLoading: false,\r\n                errorMessage:\"Error Occured!\\n\"+error ,\r\n                showErrorMessage:true    \r\n            });\r\n        });\r\n    }\r\n    renderErrorMsg(msg:string){\r\n        return(\r\n            <MessageBar messageBarType={MessageBarType.error} className={\"errorMsgInfo\"}>\r\n                {msg}\r\n            </MessageBar>\r\n        );\r\n    }\r\n  public render() {\r\n      const {gridLabel,isLoading,errorMessage,showErrorMessage,ExperimentsWithoutActivites } = this.state;\r\n    return (\r\n      <div className=\"ExperimentGrid\">\r\n            <div style={{width:\"90%\",overflow:\"auto\",margin:\"0 auto\",paddingBottom:\"10px\",paddingTop:\"30px\"}}>\r\n                <div style={{float:\"left\",width:\"50%\"}}>\r\n                    <div style={{fontSize: \"12pt\", fontWeight: \"bold\", textAlign:\"left\"}}>\r\n                        {gridLabel}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        {showErrorMessage && this.renderErrorMsg(errorMessage)}\r\n        {isLoading?<Spinner size={SpinnerSize.large} labelPosition={\"top\"} label=\"Loading Experiments (with no activities)...\"/>:\r\n        (\r\n            <div>\r\n                   {\r\n                    ExperimentsWithoutActivites.length > 0 ? \r\n                        <div style={{width:\"90%\",margin:\"0 auto\"}}>\r\n                            <DetailsList \r\n                                compact={true}\r\n                                items={ExperimentsWithoutActivites}\r\n                                columns= { this._getColumns() }\r\n                                onRenderRow={this._onRenderRow}\r\n                                constrainMode={ ConstrainMode.horizontalConstrained }\r\n                                checkboxVisibility={CheckboxVisibility.always}\r\n                                onShouldVirtualize={ () => false }\r\n                                selectionMode={SelectionMode.none}  \r\n                                selectionPreservedOnEmptyClick={false} \r\n                                styles ={detailsListStyles}                               \r\n                            ></DetailsList>\r\n                        </div>:\r\n                        <span></span>\r\n                }\r\n            </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n    private _onRenderRow: IDetailsListProps['onRenderRow'] = props => {\r\n        const customStyles: Partial<IDetailsRowStyles> = {};\r\n        if (props) {\r\n            if (props.itemIndex % 2 === 0) {\r\n            // Every other row renders with a different background color\r\n            customStyles.root = { backgroundColor: \"#ebe9e8\" };\r\n            }\r\n\r\n            return <DetailsRow {...props} styles={customStyles} />;\r\n        }\r\n        return null;\r\n    }\r\n    checkIsPastRecord = (item:IExperimentGrid):boolean =>{\r\n        let flag:boolean = true;\r\n        let currActivityDate = moment(item.ExperimentStartDate);\r\n        let currDate = moment(new Date());\r\n        let diffDates = currDate.diff(currActivityDate,'days');\r\n        if(diffDates>0){\r\n            flag = false;\r\n        }\r\n        return flag;\r\n    }\r\n    _getColumns = () => {        \r\n        return [\r\n            {\r\n                key: \"Edit\",\r\n                name: \"Edit\",\r\n                fieldName: \"ActivityId\",\r\n                minWidth: 50,\r\n                maxWidth: 50,\r\n                onRender: (item: IExperimentGrid) => {\r\n                const linkURL = \"/PlanExperiment?id=\";\r\n                return <div>\r\n                            {this.checkIsPastRecord(item) && ( \r\n                            item.ExperimentOwner?.toUpperCase()===this.context.userName.toUpperCase() \r\n                            || this.context.isAdmin)?(\r\n                                <Link to={linkURL + item.ExperimentId.toString()}>\r\n                                    <FontIcon iconName=\"EditSolid12\" title=\"Edit Activity\" style={{color: \"#4f4e4d\"}}/>  \r\n                                </Link>): \r\n                                (<Link to={linkURL + item.ExperimentId.toString()+\"&view=1\"}>\r\n                                    <FontIcon iconName=\"LockSolid\" title=\"View-Only Activity\" style={{color: \"#4f4e4d\"}}/>  \r\n                                </Link>)}\r\n                        </div>\r\n                }\r\n            }, \r\n            {\r\n                key: \"ExperimentName\",\r\n                name: \"Experiment Name\",\r\n                fieldName: \"ExperimentName\",\r\n                minWidth: 350,\r\n                maxWidth: 400,\r\n            },\r\n            {\r\n                key: \"ExperimentStartDate\",\r\n                name: \"Start Date\",\r\n                fieldName: \"ExperimentStartDate\",\r\n                minWidth: 60,\r\n                maxWidth: 70,\r\n                onRender: (item: IExperimentGrid) => {\r\n                    return <span>{moment.utc(item.ExperimentStartDate).format(\"MM/DD/YYYY\")}</span>;\r\n                }\r\n            },\r\n            {\r\n                key: \"ExperimentOwnerName\",\r\n                name: \"Experiment Owner\",\r\n                fieldName: \"ExperimentOwnerName\",\r\n                minWidth: 120,\r\n                maxWidth: 140,\r\n            },\r\n            {\r\n                key: \"ExperimentDescription\",\r\n                name: \"Description\",\r\n                fieldName: \"ExperimentDescription\",\r\n                minWidth: 100,\r\n                maxWidth: 120,\r\n            }\r\n        ];\r\n    }\r\n}","import _ from 'lodash';\r\nimport { IGroup} from 'office-ui-fabric-react/lib/DetailsList';\r\nimport { IActivityGridModel } from '../../Models/IActivityGridModel';\r\nimport AppConfig from '../../Constans';\r\nimport moment from 'moment';\r\n\r\n\r\nexport interface IGroupGridItems{\r\n    ItemsArr:any[];\r\n    GroupArr:IGroup[];\r\n}\r\nexport interface IGroupData{\r\n    ExpId:number;\r\n    Expname:string;\r\n    ExpOwner:string;\r\n    ExpStartDate:any;\r\n    isEditable:boolean;\r\n}\r\nexport function groupAndSortGridItems(items:any[],groupByKey:string, groupByHeading:string,sortItemByKey:string,sortGroupKey:string,currUserObj:any) :IGroupGridItems{\r\n    var groupedGridItems:IGroupGridItems = {ItemsArr:[] as any[],GroupArr:[] as IGroup[]} as IGroupGridItems;\r\n    let groupByArr:any =  _.groupBy(items, groupByKey);\r\n    if(groupByArr){\r\n        let lastIndex = 0;\r\n        var groups = Object.keys(groupByArr);\r\n        for (let index = 0; index < groups.length; index++) {\r\n            const eachGroup = groups[index];\r\n            let key = '',\r\n                name = '',\r\n                data:IGroupData = {} as IGroupData,\r\n                startIndex = 0,\r\n                isCollapsed = true,\r\n                count = 0,\r\n                currGroup = [];\r\n            try {\r\n                currGroup = _.orderBy(groupByArr[eachGroup],sortItemByKey);\r\n                count = currGroup.length;\r\n                var currRecord = currGroup[0];\r\n                if (eachGroup === \"null\") {\r\n                    key = 'Stand-alone' + index;\r\n                    name = \"Stand-alone Activities\";\r\n                }\r\n                else{\r\n                    key = eachGroup; // this property is used as ID for opening Edit/View of the Exp Record\r\n                    name = groupByHeading + currRecord[\"ExperimentName\"];  \r\n                    data = getExpData(currRecord,currUserObj);\r\n                   \r\n                }\r\n                startIndex = lastIndex;\r\n                isCollapsed = false;\r\n                lastIndex = lastIndex + count;\r\n                groupedGridItems.GroupArr.push({\r\n                    key,\r\n                    name,\r\n                    startIndex,\r\n                    count,\r\n                    isCollapsed,\r\n                    data\r\n                });\r\n                groupedGridItems.ItemsArr = groupedGridItems.ItemsArr.concat(currGroup); \r\n            } catch (error) {\r\n                console.log(error);\r\n            }\r\n        } \r\n        groupedGridItems.GroupArr.sort((a:IGroup, b:IGroup):any=>{\r\n            return a.data.ExpStartDate - b.data.ExpStartDate;\r\n        });\r\n    }\r\n    console.log(\"groupedGridItems\",groupedGridItems);\r\n    return groupedGridItems;\r\n }\r\n function getExpData(currRecord:IActivityGridModel,currUserObj:any):IGroupData{\r\n    let data:IGroupData = {} as IGroupData;\r\n    data.ExpId = currRecord.ExperimentId;\r\n    data.Expname = currRecord.ExperimentName;\r\n    data.ExpOwner = currRecord.Owner;\r\n    data.ExpStartDate = currRecord.ExperimentStartDate?new Date(moment(currRecord.ExperimentStartDate).format(AppConfig.DateFormats.NoTimeDate)):null;\r\n    data.isEditable= isExpEditable(currRecord,currUserObj);\r\n    return data;\r\n } \r\n function isExpEditable (currRecord:IActivityGridModel,currUserObj:any):boolean{\r\n    let isEditable:boolean=false;  \r\n    isEditable = currRecord.Owner ? currRecord.Owner.toUpperCase() === currUserObj.userName.toUpperCase() : false;\r\n    //check if it's administrator\r\n    isEditable = isEditable || currUserObj.isAdmin;       \r\n    //check if the group is for standalone activities\r\n    return isEditable;\r\n }  ","import React, { ChangeEvent } from 'react';\r\nimport { IActivityGridProps } from \"./IActivityGridProps\";\r\nimport { IActivityGridState } from \"./IActivityGridState\";\r\nimport * as axios from 'axios';\r\nimport ActivityGridService from \"../../services/activity-grid-service\";\r\nimport {DetailsList, ConstrainMode, CheckboxVisibility, IDetailsListStyles, IGroup, IDetailsRowStyles, DetailsRow,\r\n     Selection, SelectionMode, IDetailsGroupRenderProps,IGroupDividerProps, IDetailsListProps} \r\nfrom 'office-ui-fabric-react/lib/DetailsList';\r\nimport {Spinner, SpinnerSize} from 'office-ui-fabric-react/lib/Spinner';\r\nimport { Checkbox } from 'office-ui-fabric-react/lib/Checkbox';\r\nimport { DefaultButton } from 'office-ui-fabric-react/lib/Button';\r\nimport { FontIcon, ImageIcon } from 'office-ui-fabric-react/lib/Icon';\r\nimport { Redirect, Link } from 'react-router-dom';\r\nimport _ from 'lodash';\r\nimport moment from 'moment';\r\nimport { IActivityGridModel } from \"../../Models/IActivityGridModel\";\r\nimport { mergeStyles } from 'office-ui-fabric-react/lib/Styling';\r\nimport { UserInfoContext } from '../../Main';\r\nimport AppConfig from '../../Constans';\r\nimport ExperimentGrid from './ExperimentGrid';\r\nimport { groupAndSortGridItems, IGroupData } from './GroupGridItems';\r\n\r\nconst iconClass = mergeStyles({\r\n  fontSize: 30,\r\n  height: 50,\r\n  width: 50,\r\n  margin: '0 25px',\r\n});\r\nconst detailsListStyles:Partial<IDetailsListStyles> = {\r\n    headerWrapper:{\r\n        selectors: {\r\n            '& .ms-DetailsHeader-cell:hover': {\r\n                backgroundColor: 'white!important',\r\n            },\r\n        }\r\n    },\r\n}\r\n\r\nexport class ActivityGrid extends React.Component<IActivityGridProps,IActivityGridState>  {\r\n    private _selection: Selection;\r\n    constructor(props: IActivityGridProps){\r\n        super(props);       \r\n\r\n        this._selection = new Selection({\r\n            onSelectionChanged: () => this._onItemSelectionChange()\r\n        });          \r\n\r\n        ActivityGrid.contextType = UserInfoContext;\r\n\r\n        this.state={\r\n            activities: [],\r\n            groups: [],\r\n            isLoading: true,\r\n            gridLabel: \"My Activites\",\r\n            showAllActivities: false,\r\n            showAllActivitiesLoading: false,\r\n            selectedActivityIndex: -1,\r\n            redirectURI: \"\",\r\n            hideEditActBtn: true,\r\n            hideEditExpBtn: true,\r\n            errorMessage: \"\"\r\n        };\r\n    }\r\n    public render(): React.ReactElement {      \r\n        return (\r\n            <div style={{width:\"100%\", textAlign:\"center\",overflow:\"auto\"}}>                          \r\n                <div style={{width:\"90%\",display:\"none\"}}>\r\n                    <p>\r\n                        Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.\r\n                    </p>\r\n                </div>                \r\n                <div style={{width:\"90%\",overflow:\"auto\",margin:\"0 auto\",paddingBottom:\"10px\",paddingTop:\"30px\"}}>\r\n                     <div style={{float:\"left\",width:\"20%\"}}>\r\n                        <div style={{fontSize: \"12pt\", fontWeight: \"bold\", textAlign:\"left\"}}>\r\n                            {this.state.gridLabel}\r\n                        </div>\r\n                    </div>\r\n                    <div style={{float:\"right\",width:\"80%\"}}>   \r\n                        <div style={{float:\"right\", paddingTop:\"5px\", paddingLeft:\"5px\"}}>\r\n                            <Checkbox label=\"Show all activities\" onChange={this._onShowAllActivitiesChange} style={{float:\"right\"}}/>\r\n                        </div>\r\n                        <div style={{float:\"right\", paddingTop:\"5px\"}}>\r\n                            {this.state.showAllActivitiesLoading && <Spinner size={SpinnerSize.small}></Spinner>}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                {\r\n                    this.state.activities.length > 0 ? \r\n                        <div style={{width:\"90%\",margin:\"0 auto\"}}>\r\n                            <DetailsList \r\n                                compact={true}\r\n                                items={ this.state.activities}\r\n                                columns= { this._getColumns() }\r\n                                groups={ this.state.groups }\r\n                                groupProps={{\r\n                                    onRenderHeader: this._onRenderGroupHeader\r\n                                }}\r\n                                onRenderRow={this._onRenderRow}\r\n                                constrainMode={ ConstrainMode.horizontalConstrained }\r\n                                checkboxVisibility={CheckboxVisibility.always}\r\n                                onShouldVirtualize={ () => false }\r\n                                selection={this._selection} \r\n                                selectionMode={SelectionMode.none}  \r\n                                selectionPreservedOnEmptyClick={false}\r\n                                styles={detailsListStyles}                                \r\n                            ></DetailsList>\r\n                        </div>:\r\n                        <span></span>\r\n                }\r\n                <div style={{}}>\r\n                    {this.state.isLoading && <Spinner size={SpinnerSize.large} labelPosition={\"top\"} label=\"Loading activities...\"></Spinner>}\r\n                </div>\r\n                {\r\n                    this.state.errorMessage !== \"\" ? <div style={{color: \"red\"}}>{this.state.errorMessage}</div> : \"\"\r\n                }\r\n                { this.state.redirectURI != \"\" ? <Redirect to={this.state.redirectURI} /> : \"\" } \r\n                <ExperimentGrid/>  \r\n            </div>\r\n        );\r\n    }   \r\n    private getEditExpLink(GroupData:IGroupData):JSX.Element{\r\n        if(GroupData && Object.keys(GroupData).length>0){\r\n            if (GroupData.isEditable) {\r\n                return (\r\n                    <Link style={{fontSize:\"12pt\",paddingLeft:\"20px\"}} to={\"/PlanExperiment?id=\" + GroupData.ExpId} >\r\n                        <FontIcon iconName=\"Edit\" title=\"Edit Experiment\" style={{color: \"#fff\"}}/>      \r\n                    </Link> \r\n                );\r\n            }\r\n            else {\r\n                return (\r\n                    <Link style={{fontSize:\"12pt\",paddingLeft:\"20px\"}} to={\"/PlanExperiment?id=\" + GroupData.ExpId+\"&view=1\"} >\r\n                        <FontIcon iconName=\"LockSolid\" title=\"View-Only Experiment\" style={{color: \"#fff\"}}/>      \r\n                    </Link>\r\n                );\r\n            }\r\n        }\r\n        else{\r\n            return <></>;\r\n        }\r\n    }\r\n    private _onRenderGroupHeader: IDetailsGroupRenderProps['onRenderHeader'] = props => {\r\n        // console.log(props);\r\n        if (props) {\r\n          return (            \r\n            <div \r\n            onClick={this._onToggleCollapse(props)}\r\n            style={{fontSize:\"12pt\", textAlign:\"left\", padding:\"10px\",backgroundColor:\"#4f4e4d\",color:\"#fff\", cursor:\"pointer\"}}>\r\n                <FontIcon \r\n                    iconName={props.group!.isCollapsed ? \"ChevronRightMed\" : \"ChevronDownMed\"} \r\n                    title={props.group!.isCollapsed ? \"Expand\" : \"Collapse\"} \r\n                    style={{color: \"#fff\", paddingRight:\"10px\"}}/>      \r\n                {`${props.group!.name}`} \r\n                {this.getEditExpLink(props.group?.data)}\r\n            </div>\r\n          );\r\n        }\r\n        return null;\r\n    }\r\n    private _onRenderRow: IDetailsListProps['onRenderRow'] = props => {\r\n        const customStyles: Partial<IDetailsRowStyles> = {};\r\n        if (props) {\r\n          if (props.itemIndex % 2 === 0) {\r\n            // Every other row renders with a different background color\r\n            customStyles.root = { backgroundColor: \"#ebe9e8\" };\r\n          }\r\n    \r\n          return <DetailsRow {...props} styles={customStyles} />;\r\n        }\r\n        return null;\r\n      };\r\n    _onToggleCollapse = (props: IGroupDividerProps) => {\r\n        return () => {\r\n          props!.onToggleCollapse!(props!.group!);\r\n        };\r\n    }\r\n    _onItemSelectionChange = () => {\r\n        let selIndices = this._selection.getSelectedIndices();        \r\n        if(selIndices.length > 0){\r\n            this.setState({\r\n                selectedActivityIndex: this._selection.getSelectedIndices()[0],\r\n                hideEditActBtn: selIndices.length==1 ? true : false\r\n            });\r\n        }\r\n        else{\r\n            this.setState({\r\n                selectedActivityIndex: -1,\r\n                hideEditActBtn: true,\r\n                hideEditExpBtn: true                \r\n            });\r\n        }\r\n    }\r\n    _onAddActClick = () => {\r\n        this.setState({\r\n            redirectURI: \"/PlanActivity\"\r\n        });\r\n    }\r\n    _onEditActClick = () => {\r\n        let selIndex = this.state.selectedActivityIndex;                          \r\n        this.setState({\r\n            redirectURI: \"/PlanActivity/\" + selIndex.toString()\r\n        });\r\n    }\r\n    _onAddExpClick = () => {\r\n        this.setState({\r\n            redirectURI: \"/PlanExperiment\"\r\n        });\r\n    }\r\n    _onEditExpClick = () => {\r\n    }\r\n    _onActBtnClick = () => {\r\n        let selIndex = this.state.selectedActivityIndex;                  \r\n        this.setState({\r\n            redirectURI: selIndex >= 0 ? \"/PlanActivity/\" + selIndex.toString() : \"/PlanActivity\"\r\n        });\r\n    }\r\n    _onExpBtnClick = () => {  \r\n        let selIndex = this.state.selectedActivityIndex;                  \r\n        this.setState({\r\n            redirectURI: selIndex >= 0 ? \"/PlanExperiment/\" + selIndex.toString() : \"/PlanExperiment\"\r\n        });\r\n    }   \r\n    _onShowAllActivitiesChange=(ev: any)=>{\r\n        if(ev.target.checked){\r\n            this.setState({\r\n                gridLabel: \"All Activities\",\r\n                showAllActivities: true,\r\n                showAllActivitiesLoading: true\r\n            }, ()=>{\r\n                this._getDataFromDB();\r\n            });\r\n        }\r\n        else{\r\n            this.setState({\r\n                gridLabel: \"My Activities\",\r\n                showAllActivities: false,\r\n                showAllActivitiesLoading: true\r\n            }, ()=>{\r\n                this._getDataFromDB();\r\n            });\r\n        }\r\n    }    \r\n    componentDidMount(){\r\n        this._getDataFromDB();\r\n    }\r\n    \r\n    _getDataFromDB = () => {        \r\n        let userEmail = this.state.showAllActivities ? null : this.context.userName;\r\n        ActivityGridService.getActivitiesForUser(userEmail, 1, null)\r\n        .then((result)=>{\r\n            let items: IActivityGridModel[] = result.data as IActivityGridModel[];\r\n            let groupedItems = this._groupActivitiesById(items);\r\n            let currUserObj = this.context;\r\n            let gridObj= groupAndSortGridItems(groupedItems,\"ExperimentId\",\"Experiment: \",\"ActivityDate\",\"ExperimentStartDate\",currUserObj);\r\n            let newGridLabel = gridObj.ItemsArr ? this.state.gridLabel + \" (\"+ gridObj.ItemsArr.length.toString() +\")\": \"\";    \r\n            console.log(\"gridObj\",gridObj);\r\n            this.setState({\r\n                activities: gridObj.ItemsArr,\r\n                groups: gridObj.GroupArr,\r\n                isLoading: false,\r\n                showAllActivitiesLoading: false,\r\n                gridLabel: newGridLabel,\r\n                errorMessage: \"\"\r\n            });            \r\n        })\r\n        .catch(error => {\r\n            this.setState({\r\n                activities: [],\r\n                isLoading: false,\r\n                showAllActivitiesLoading: false,\r\n                errorMessage: \"Error Occured!\\n\"+error                \r\n            });\r\n        });\r\n    }\r\n    _checkIfGroupedItemExists = (proPValueStr:string,itemToAdd:string) :boolean =>{\r\n        let isPresent = false;\r\n        let valueArr =  proPValueStr.split(\",\");\r\n        if(valueArr && valueArr.length>0){\r\n            if(valueArr.indexOf(itemToAdd)!==-1){\r\n                isPresent = true;\r\n            }\r\n        }\r\n        return isPresent\r\n    }\r\n    _groupActivitiesById = (rawArray: IActivityGridModel[]) => {            \r\n        let groupedArr: IActivityGridModel[]=[];\r\n        rawArray.forEach((item, index)=>{\r\n            let groupedItem = groupedArr.filter(i => {return i.ActivityId==item.ActivityId});\r\n            if(groupedItem.length<1){\r\n                groupedArr.push(item);\r\n            }\r\n            else{\r\n                if (groupedItem[0].ShiftName != item.ShiftName && item.ShiftName!=null){\r\n                    if(!this._checkIfGroupedItemExists(groupedItem[0].ShiftName,item.ShiftName)){\r\n                        groupedItem[0].ShiftName = groupedItem[0].ShiftName+\",\"+ item.ShiftName;\r\n                    }\r\n                }\r\n                if (groupedItem[0].LocationName != item.LocationName && item.LocationName!=null){\r\n                    if(!this._checkIfGroupedItemExists(groupedItem[0].LocationName,item.LocationName)){\r\n                        groupedItem[0].LocationName = groupedItem[0].LocationName+\",\"+ item.LocationName;\r\n                    }\r\n                }\r\n                if (groupedItem[0].EquipmentName != item.EquipmentName && item.EquipmentName!=null){\r\n                    if(!this._checkIfGroupedItemExists(groupedItem[0].EquipmentName,item.EquipmentName)){\r\n                        groupedItem[0].EquipmentName = groupedItem[0].EquipmentName+\",\" + item.EquipmentName;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        console.log(groupedArr);\r\n        return groupedArr;        \r\n    }\r\n    _getGroups = (items: IActivityGridModel[]) => {        \r\n        let groups: IGroup[]=[];        \r\n        if(items.length > 0){\r\n            items.forEach((item, index)=>{ \r\n                let _key = item.ExperimentId ? item.ExperimentId.toString() : \"noex\";\r\n                let _name = item.ExperimentName ? (\"Experiment: \" + item.ExperimentName) : \"Stand-alone Activities\";\r\n                let group = groups.filter(g => {return g.key==_key});            \r\n                if(group.length > 0){            \r\n                    group[0].count++;        \r\n                }\r\n                else{         \r\n                    //check if it's experiment owner\r\n                    let showEdit = item.Owner ? item.Owner.toUpperCase()===this.context.userName.toUpperCase() : false;\r\n                    //check if it's administrator\r\n                    showEdit = showEdit || this.context.isAdmin;       \r\n                    //check if the group is for standalone activities\r\n                    showEdit = showEdit && _key!==\"noex\";\r\n                    groups.push({\r\n                        key: _key,\r\n                        name: _name,\r\n                        startIndex: index,\r\n                        count: 1,\r\n                        data: showEdit\r\n                    });                 \r\n                }\r\n            });\r\n        }\r\n        return groups;\r\n    }\r\n    _getEditLink = (item: IActivityGridModel): string=>{ \r\n        let editLink = \"/PlanActivity?id=\";\r\n        if(item.LocationName){\r\n            let locArr = item.LocationName?.split(\",\");\r\n            if(locArr.indexOf(AppConfig.ActivityForm.officeSpaceUsageLocationName)!==-1){\r\n                editLink = \"/PlanOfficeSpace?id=\";\r\n            }\r\n        }\r\n        return editLink;       \r\n    }\r\n    checkIsPastRecord = (item:IActivityGridModel):boolean =>{\r\n        let flag:boolean = true;\r\n        let currActivityDate = moment(item.ActivityDate);\r\n        let currDate = moment(new Date());\r\n        let diffDates = currDate.diff(currActivityDate,'days');\r\n        if(diffDates>0){\r\n            flag = false;\r\n        }\r\n        return flag;\r\n    }\r\n    _getColumns = () => {        \r\n        return [\r\n            /* {\r\n                key: \"ActivityId\",\r\n                name: \"Id\",\r\n                fieldName: \"ActivityId\",\r\n                minWidth: 50,\r\n                maxWidth: 50,\r\n            },\r\n            {\r\n                key: \"ExperimentId\",\r\n                name: \"Ex Id\",\r\n                fieldName: \"ExperimentId\",\r\n                minWidth: 50,\r\n                maxWidth: 50,\r\n            },*/\r\n            {\r\n                key: \"Edit\",\r\n                name: \"Edit\",\r\n                fieldName: \"ActivityId\",\r\n                minWidth: 50,\r\n                maxWidth: 50,\r\n                onRender: (item: IActivityGridModel) => {\r\n                    let linkURL = this._getEditLink(item);\r\n                return <div>\r\n                            {this.checkIsPastRecord(item) && (\r\n                            item.BookedByEmail.toUpperCase()===this.context.userName.toUpperCase() \r\n                            || item.BookedForEmail.toUpperCase()===this.context.userName.toUpperCase() \r\n                            || item.Owner?.toUpperCase()===this.context.userName.toUpperCase() \r\n                            || this.context.isAdmin)?(\r\n                                <Link to={linkURL + item.ActivityId.toString()}>\r\n                                    <FontIcon iconName=\"EditSolid12\" title=\"Edit Activity\" style={{color: \"#4f4e4d\"}}/>  \r\n                                </Link>): \r\n                                (<Link to={linkURL + item.ActivityId.toString()+\"&view=1\"}>\r\n                                    <FontIcon iconName=\"LockSolid\" title=\"View-Only Activity\" style={{color: \"#4f4e4d\"}}/>  \r\n                                </Link>)}\r\n                        </div>\r\n                }\r\n            }, \r\n            {\r\n                key: \"ActivityName\",\r\n                name: \"Activity\",\r\n                fieldName: \"ActivityName\",\r\n                minWidth: 350,\r\n                maxWidth: 400,\r\n            },\r\n            {\r\n                key: \"ActivityDate\",\r\n                name: \"Date\",\r\n                fieldName: \"ActivityDate\",\r\n                minWidth: 60,\r\n                maxWidth: 70,\r\n                onRender: (item: IActivityGridModel) => {\r\n                    return <span>{moment.utc(item.ActivityDate).format(\"MM/DD/YYYY\")}</span>;\r\n                }\r\n            },\r\n            {\r\n                key: \"ShiftName\",\r\n                name: \"Shift(s)\",\r\n                fieldName: \"ShiftName\",\r\n                minWidth: 150,\r\n                maxWidth: 170,\r\n                onRender: (item: IActivityGridModel) => {\r\n                    if(!item.ShiftName){\r\n                        return <span></span>;\r\n                    }\r\n                    else{\r\n                        let uniqShiftArr = item.ShiftName.split(',');\r\n                        return (<div>\r\n                            { uniqShiftArr.map((shift,key)=>{return <div key={key}>{shift}</div>})}\r\n                            </div>\r\n                        );\r\n                    }\r\n                }\r\n            },\r\n            {\r\n                key: \"LocationName\",\r\n                name: \"Location(s)\",\r\n                fieldName: \"LocationName\",\r\n                minWidth: 100,\r\n                maxWidth: 120,\r\n                onRender: (item: IActivityGridModel) => {\r\n                    if(!item.LocationName){\r\n                        return <span></span>;\r\n                    }\r\n                    else{\r\n                        let uniqLocArr = item.LocationName.split(',');\r\n                        return (<div>\r\n                            { uniqLocArr.map((loc,key)=>{return <div key={key}>{loc}</div>})}\r\n                            </div>\r\n                        );\r\n                    }\r\n                }\r\n            },\r\n            {\r\n                key: \"EquipmentName\",\r\n                name: \"Equipment(s)\",\r\n                fieldName: \"EquipmentName\",\r\n                minWidth: 150,\r\n                maxWidth: 170,\r\n                onRender: (item: IActivityGridModel) => {\r\n                    if(!item.EquipmentName){\r\n                        return <span></span>;\r\n                    }\r\n                    else{\r\n                        let uniqEquipArr = item.EquipmentName.split(',');\r\n                        return (<div>\r\n                            { uniqEquipArr.map((eq,key)=>{return <div key={key}>{eq}</div>})}\r\n                            </div>\r\n                        );\r\n                    }\r\n                }\r\n                \r\n            },\r\n            {\r\n                key: \"BookedForEmail\",\r\n                name: \"Person\",\r\n                fieldName: \"BookedForEmail\",\r\n                minWidth: 100,\r\n                maxWidth: 120,\r\n            }\r\n        ];\r\n    }\r\n}    ","import * as React from 'react';\r\nimport { UserInfoContext } from '../../Main';\r\nimport { IExperiment, IExperimentProps, IExperimentState, IProject, IExperimentErrMsgs, IValidationObj } from './IExperiment';\r\nimport { PrimaryButton, DefaultButton } from 'office-ui-fabric-react/lib/Button';\r\nimport { TextField } from 'office-ui-fabric-react/lib/TextField';\r\nimport { Dropdown, IDropdownOption } from 'office-ui-fabric-react/lib/Dropdown';\r\nimport { Dialog, DialogType, DialogFooter } from 'office-ui-fabric-react/lib/Dialog';\r\nimport { DetailsList, IColumn,Selection, IDetailsListStyles,SelectionMode, ConstrainMode, CheckboxVisibility } from 'office-ui-fabric-react/lib/DetailsList';\r\nimport { Spinner, SpinnerType, SpinnerLabelPosition } from 'office-ui-fabric-react/lib/Spinner';\r\nimport { MessageBar, MessageBarType } from 'office-ui-fabric-react/lib/MessageBar';\r\nimport { Label } from 'office-ui-fabric-react/lib/Label';\r\nimport FLatDatePickr from '../utils/FLatDatePickr';\r\nimport moment from 'moment';\r\nimport ExperimentOwnerPicker from '../Common/BookedForEmail';\r\nimport { IUserPersonaField, IActivity } from '../Activity/interfaces/IActivityForm';\r\nimport * as Utils from \"../utils/Utils\";\r\nimport CreateActivityForm from \"../Activity/CreateActivityForm\";\r\nimport './Experiment.css';\r\nimport ExperimentService from \"../../services/experiment-service\";\r\nimport { Redirect } from 'react-router-dom';\r\nimport { IActivityGridModel } from \"../../Models/IActivityGridModel\";\r\nimport { validateExpFields } from './ExperimentService';\r\nimport ButtonWithDialog from '../Common/dialogs/ButtonWithDialog';\r\nimport AppConfig from '../../Constans';\r\nimport { BlockingSpinner } from '../Common/dialogs/BlockingSpinner';\r\nimport * as _ from 'lodash';\r\nimport EditActivityForm from '../Activity/EditActivityForm';\r\nconst uuidv4 = require('uuid/v4');\r\nenum MessageText{\r\n  \"AddExperiment\"=\"You will be able to add activities after you save the experiment.\",\r\n  \"NoActivities\"=\"Click on Add Activity button to add the first activity to this experiment.\",\r\n  \"NoEditPastExp\"= \"The system doesn't allow updates to Experiment Details which have start dates in the past!\",\r\n  \"NoAdminExpOwner\"=\"Permission Denied: Only a system administrator or the experiment owner can edit an experiment.\",\r\n  \"UnsavedChangesLost\"= \"Your unsaved changes in the experiment details section will be lost. Do you still want to close?\",\r\n  \"ExptDetailsSaved\"= \"Experiment details saved successfully.\",\r\n  \"DeleteActToolTip\"=\"Enabled if none of the selected activities occur in the past.\",\r\n  \"DeleteExptConfirm\"=\"Are you sure you want to delete this experiment and all associated activities?\",\r\n  \"DeleteActConfirm\"=\"Are you sure you want to delete the selected activity/activities?\",\r\n  \"DeleteNotesError\"=\"Please mention the reason for deleting this experiment.\",\r\n  \"DeletedExperiment\"=\"Deleted experiments can't be edited.\",\r\n  \"NoExperimentWithId\"=\"Couldn't find an experiment with this id\",\r\n  \"LoadingActivitForm\"=\"Loading Activity Form...\",\r\n  \"CloneActivitForm\"=\"Cloning Activity...\",\r\n  \"CreatedActivity\"=\"Please fill all the required fields before saving the experiment.\",\r\n  \"ReloadActivity\"=\"Reloading Activities..\",\r\n  \"DeleteActivity\"=\"Deleting...\",\r\n  \"UnsavedEditForm\"=\"Unsaved changes in the Edit form will be lost. Do you confirm?\",\r\n  \"UnsavedAddForm\"=\"Unsaved changes in the Add form will be lost. Do you confirm?\",\r\n  \"UnsavedAddEditForm\" = \"Unsaved changes in the Add/Edit form will be lost. Do you confirm?\",\r\n  \"UnsavedAddEditFormViewClick\" = \"Unsaved changes in the Add/Edit form will be lost. Do you confirm?\",\r\n  \"CloneExpConfirmation\" = \"This will create a copy of this experiment and take you there so you can update the date and other details. Do you want to proceed?\",\r\n  \"CloneActConfirmation\" = \"This will create a copy of this activity and display it below so you can update the date and other details. Do you want to proceed?\",\r\n  \"CloneSuccessMessage\" = \"Experiment Cloned successfully. You can update the dates and other details of the cloned experiment here.\",  \r\n  \"CloningExpLoaderTxt\" = \"Cloning...\",  \r\n}\r\nconst detailsListStyles:Partial<IDetailsListStyles> = {\r\n  headerWrapper:{\r\n      selectors: {\r\n          '& .ms-DetailsHeader-cell:hover': {\r\n              backgroundColor: 'white!important',\r\n          },\r\n      }\r\n  },\r\n}\r\nconst now = moment().format(AppConfig.PlanExperiment.ExpDateFormat);\r\nexport default class Experiment extends React.Component<IExperimentProps, IExperimentState> {\r\n  private _selection: Selection;\r\n  constructor(props: IExperimentProps) {\r\n    super(props);\r\n    \r\n    this._selection = new Selection({\r\n      onSelectionChanged: () => this._onItemSelectionChange()\r\n    });  \r\n    \r\n    Experiment.contextType = UserInfoContext;\r\n\r\n    this.state = {      \r\n      Experiment : {} as IExperiment,\r\n      ExperimentErrMsgs:{} as IExperimentErrMsgs,\r\n      TopLabel: \"Add Experiment\",\r\n      Projects: [],\r\n      ExperimentActivities: [],\r\n      ShowAddActivity: \"None\",\r\n      ShowDialog: \"None\",\r\n      PlanActivityLabel: \"Add An Activity\",\r\n      InfoMessage: MessageText.AddExperiment,\r\n      Mode: \"add\",\r\n      EID: 0,\r\n      AID:0,\r\n      SaveExpProcessing: false,\r\n      RedirectUri: \"\", \r\n      PlanexLoading: true,\r\n      HeaderMessage: \"\",\r\n      HeaderMessageType: MessageBarType.error,\r\n      DisableForm: false,\r\n      DisableAdd: false,\r\n      DisableDelete: false,\r\n      SelectedActivities: [],\r\n      PreviousStartDate: new Date(now),\r\n      ExperimentNotSaved: false,\r\n      HideDeleteDialog: true,\r\n      DeleteNotes: \"\",\r\n      DeleteErrorMessage: \"\",\r\n      FormActionLoading:false,\r\n      FormAction:\"LoadForm\",\r\n      FormActionMsg:'',\r\n      FormId:uuidv4(),\r\n      HideCloneDialog: true,\r\n    }\r\n  }\r\n\r\n  public render() {\r\n    const { ShowDialog, HeaderMessage, HeaderMessageType, HideDeleteDialog, DeleteNotes, DeleteErrorMessage,\r\n      Experiment, EID,TopLabel, Projects, ExperimentActivities, ShowAddActivity, InfoMessage, Mode, SaveExpProcessing,\r\n      FormActionLoading, FormActionMsg,ExperimentNotSaved,RedirectUri, PlanexLoading, ExperimentErrMsgs,DisableForm, \r\n      SelectedActivities,AID, FormId,HideCloneDialog,DisableAdd, DisableDelete} = this.state;\r\n      var expDate = Experiment.StartDate?Experiment.StartDate:null;\r\n    return (\r\n      <div style={{width:\"100%\", textAlign:\"center\",overflow:\"auto\"}}>                          \r\n        { PlanexLoading ? <div style={{paddingTop: \"50px\"}}><Spinner type={SpinnerType.large} label=\"Loading...\"></Spinner></div> : \r\n          <div className=\"ms-Grid\">\r\n            <div className=\"ms-Grid-row\" style={{minHeight:\"30px\"}}></div>\r\n            {\r\n              HeaderMessage ? \r\n                <div className=\"ms-Grid-row\" style={{\r\n                  width: \"90%\",\r\n                  overflow: \"auto\",\r\n                  margin: \"0 auto\",\r\n                  padding:\"0px 0px 10px 0px\"}}>\r\n                  <MessageBar key={\"HeaderMessageType\"}  onDismiss={this.onDismissHeaderMessage} messageBarType={HeaderMessageType} dismissButtonAriaLabel=\"Close\">{HeaderMessage}</MessageBar>\r\n                </div> : \"\"\r\n            }\r\n            <div className=\"ms-Grid-row\" style={{\r\n              boxShadow: \"rgba(0, 0, 0, 0.133) 0px 1.6px 3.6px 0px, rgba(0, 0, 0, 0.11) 0px 0.3px 0.9px 0px\", \r\n              width: \"90%\",\r\n              overflow: \"auto\",\r\n              margin: \"0 auto\",\r\n              padding:\"10px 0px 10px 10px\"}}>\r\n              <div className=\"ms-Grid\" dir=\"ltr\" style={{padding:\"0px\", width: \"99%\", textAlign:\"left\"}}>\r\n                <div className=\"ms-Grid-row\"style={{width:\"100%\",overflow:\"auto\",margin:\"0 auto\",paddingBottom:\"10px\"}}>\r\n                  <div className=\"ms-Grid-col ms-sm4 ms-md4 ms-lg4\" style={{padding:\"0px\"}}>\r\n                    <div style={{fontSize: \"12pt\", fontWeight: \"bold\", textAlign:\"left\"}}>\r\n                      {TopLabel}\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"ms-Grid-col ms-sm8 ms-md8 ms-lg8\"  style={{padding:\"0px\"}}>\r\n                    { Utils.strEqualsCI(Mode, \"EDIT\") ?\r\n                      <div style={{float:\"right\", paddingLeft:\"15px\"}}>\r\n                        {/* <PrimaryButton text=\"Delete\" onClick={this.onDeleteExperiment}></PrimaryButton> */}\r\n                          <ButtonWithDialog key={'Delete'}\r\n                            CustClassName ={\"BlockingDialog\"}\r\n                            iconString={'Delete'}\r\n                            hideDialog={HideDeleteDialog}\r\n                            buttonTxt={'Delete'}\r\n                            onBtnClick={this.onClickDeleteExp}\r\n                            buttonType={'Primary'}\r\n                            dialogTitle={'Delete'}\r\n                            subText={'Are you sure you want to delete the experiment and associated activities?'}\r\n                            isBlocking={true}\r\n                            handleAction={this.onClickDeleteConfirmation}\r\n                            actionBtnTxt={'Delete'}\r\n                            disabled={DisableForm}\r\n                            dismisBtnTxt={'Cancel'}\r\n                        >\r\n                          <div>\r\n                              <TextField\r\n                                  multiline\r\n                                  label=\"Notes\"\r\n                                  name=\"deleteNotes\"\r\n                                  placeholder=\"Reason for deleting\"\r\n                                  value={DeleteNotes}\r\n                                  errorMessage={DeleteErrorMessage}\r\n                                  onChange={this.onChangeDeleteNotes}\r\n                              />\r\n                          </div>                                               \r\n                    </ButtonWithDialog>\r\n                      </div> : \"\"\r\n                    }\r\n                    { Utils.strEqualsCI(Mode, \"EDIT\") ? \r\n                      <div style={{float:\"right\", paddingLeft:\"15px\"}}>\r\n                        <ButtonWithDialog key={'Clone'}\r\n                          CustClassName ={\"BlockingDialog\"}\r\n                          iconString={'Clone'}\r\n                          hideDialog={HideCloneDialog}\r\n                          buttonTxt={'Clone Experiment'}\r\n                          onBtnClick={this.onClickCloneExperiment}\r\n                          buttonType={'Primary'}\r\n                          dialogTitle={'Clone Experiment?'}\r\n                          subText={\"This will create a copy of this experiment with all its activities. Do you want to proceed?\"}\r\n                          isBlocking={false}\r\n                          handleAction={this.onClickConfirmCloneExperiment}\r\n                          actionBtnTxt={'OK'}\r\n                          dismisBtnTxt={'Cancel'}>                                            \r\n                        </ButtonWithDialog>\r\n                      </div> : \"\"\r\n                    }\r\n                    <div style={{float:\"right\", paddingLeft:\"15px\"}}>\r\n                      <PrimaryButton text=\"Close\" onClick={this.onCloseExperiment}></PrimaryButton>\r\n                    </div>\r\n                    <div style={{float:\"right\", paddingLeft:\"15px\"}}>\r\n                      <PrimaryButton text=\"Save\" disabled={DisableForm} onClick={this.onSaveExperiment}></PrimaryButton>\r\n                    </div>\r\n                    <div style={{float:\"right\", paddingLeft:\"15px\"}}>\r\n                      {!SaveExpProcessing || <Spinner type={SpinnerType.large} hidden={false}></Spinner>}\r\n                    </div>\r\n                  </div>\r\n                </div>                 \r\n                  <div className=\"ms-Grid-row\">\r\n                    <div className=\"ms-Grid-col ms-sm5 ms-md5 ms-lg5\">\r\n                      <TextField disabled={DisableForm} required={true} label=\"Experiment Name\" errorMessage={ExperimentErrMsgs.ExperimentName} value={Experiment.Name} onChange={this.onChangeExperimentName}></TextField>\r\n                    </div>\r\n                    <div className=\"ms-Grid-col ms-sm2 ms-md2 ms-lg2\">\r\n                      <Dropdown \r\n                        disabled={DisableForm} \r\n                        required={true} \r\n                        errorMessage={ExperimentErrMsgs.ProjectId}\r\n                        label=\"Project / Study\" \r\n                        selectedKey = {Experiment.ProjectId}                      \r\n                        options={Projects?.map((p, index)=>{return {key: p.Id, text: p.Name}})}\r\n                        onChange={this.onProjectChange}></Dropdown>\r\n                    </div>\r\n                    <div className=\"ms-Grid-col ms-sm2 ms-md2 ms-lg2\">\r\n                      <FLatDatePickr viewForm={DisableForm} required={true} showNonFormLabel={false} labelHead=\"Start Date\" dateInput={expDate} updateFunc={this.onSelectExpDate}></FLatDatePickr>\r\n                      {ExperimentErrMsgs.StartDate?this.renderErrorMsgForField(ExperimentErrMsgs.StartDate,'StartDate'):''}\r\n                    </div> \r\n                    <div className=\"ms-Grid-col ms-sm3 ms-md3 ms-lg3\">\r\n                      <Label className={'requiredLabel'}>Experiment Owner</Label>\r\n                      <div style={{backgroundColor: \"#fff\"}}>\r\n                        <ExperimentOwnerPicker                                              \r\n                          viewForm={DisableForm}\r\n                          required={true}\r\n                          description={'Set an experiment owner'}\r\n                          placeholderTxt={'Start typing the name to search'}\r\n                          property={'ExperimentOwner'}\r\n                          updatePeoplePickerChange={this.onSelectExperimentOwner}\r\n                          people={Experiment.Owner ? Experiment.Owner : []}\r\n                        />\r\n                      </div>\r\n                      {ExperimentErrMsgs.ExperimentOwner?this.renderErrorMsgForField(ExperimentErrMsgs.ExperimentOwner,'ExperimentOwner'):''}\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"ms-Grid-row\">\r\n                    <div className=\"ms-Grid-col ms-sm12 ms-md12 ms-lg12\">\r\n                      <TextField disabled={DisableForm} label=\"Description\" value={Experiment.Description} onChange={this.onChangeExperimentDesc}></TextField>\r\n                    </div>                     \r\n                  </div>              \r\n                </div>           \r\n            </div>\r\n            <div className=\"ms-Grid-row\" style={{minHeight:\"20px\"}}></div>\r\n            <div className=\"ms-Grid-row\" style={{\r\n              boxShadow: \"rgba(0, 0, 0, 0.133) 0px 1.6px 3.6px 0px, rgba(0, 0, 0, 0.11) 0px 0.3px 0.9px 0px\", \r\n              width: \"90%\",\r\n              overflow: \"auto\",\r\n              margin: \"0 auto\",\r\n              padding:\"10px 0px 10px 10px\"}}>\r\n              <div className=\"ms-Grid\" dir=\"ltr\" style={{padding:\"0px\", width: \"99%\", textAlign:\"left\"}}>\r\n                <div className=\"ms-Grid-row\"style={{width:\"100%\",overflow:\"auto\",margin:\"0 auto\",paddingBottom:\"10px\"}}>                  \r\n                  <div className=\"ms-Grid-col ms-sm4 ms-md4 ms-lg4\" style={{padding:\"0px\"}}>\r\n                    <div style={{fontSize: \"12pt\", fontWeight: \"bold\", textAlign:\"left\"}}>\r\n                      Activities\r\n                    </div>\r\n                  </div>\r\n                  {\r\n                      Utils.strEqualsCI(Mode, \"add\") ? \"\" : \r\n                      <div className=\"ms-Grid-col ms-sm8 ms-md8 ms-lg8\"  style={{padding:\"0px\"}}>                      \r\n                        <div style={{float:\"right\", marginLeft:\"15px\"}} title={MessageText.DeleteActToolTip}>\r\n                          <PrimaryButton  text=\"Delete Activity\" disabled={ExperimentActivities.length ===0 || (SelectedActivities.length===0) || DisableDelete} onClick={this.onClickDeleteMulActivities}></PrimaryButton>\r\n                        </div>\r\n                        <div style={{float:\"right\", paddingLeft:\"15px\"}}>\r\n                          <PrimaryButton text=\"Clone Activity\" disabled={DisableAdd ||ExperimentActivities.length ===0 || (SelectedActivities.length!==1)} onClick={this.onClickCloneActivity}></PrimaryButton>\r\n                        </div>\r\n                        <div style={{float:\"right\", paddingLeft:\"15px\"}}>\r\n                          <PrimaryButton text=\"Edit Activity\" disabled={ExperimentActivities.length ===0||(SelectedActivities.length!==1)} onClick={this.onClickEditActivity} ></PrimaryButton>\r\n                        </div>\r\n                        <div style={{float:\"right\", paddingLeft:\"15px\"}}>\r\n                          <PrimaryButton text=\"View Activity\" disabled={ExperimentActivities.length ===0||(SelectedActivities.length!==1)} onClick={this.onClickViewActivity}></PrimaryButton>\r\n                        </div>\r\n                        <div style={{float:\"right\", paddingLeft:\"15px\"}}>\r\n                          <PrimaryButton text=\"Add Activity\" disabled={DisableAdd || ShowAddActivity===\"Add\"} onClick={this.onClickAddActivity}></PrimaryButton>\r\n                        </div>\r\n                      </div>\r\n                  }\r\n                  {ShowDialog === \"None\"?'':this.renderConfirm()}\r\n                </div>\r\n                <div className=\"ms-Grid-row\">\r\n                  { FormActionMsg?this.renderTimmerMessages(FormActionMsg):\"\"}\r\n                  {FormActionLoading?this.loadSpinner(InfoMessage,FormActionLoading):''}\r\n                </div>\r\n                <div className=\"ms-Grid-row\"style={{width:\"100%\",overflow:\"auto\",margin:\"0 auto\",paddingBottom:\"10px\"}}>                  \r\n                  <div className=\"ms-Grid-col ms-sm12 ms-md12 ms-lg12\" style={{padding:\"0px\"}}>\r\n                  {\r\n                    ExperimentActivities.length > 0 ? \r\n                      <DetailsList\r\n                        items= {ExperimentActivities} //{this.sortActivities(ExperimentActivities)}\r\n                        columns={this.getActivityColumns()}\r\n                        constrainMode={ ConstrainMode.horizontalConstrained }\r\n                        checkboxVisibility={CheckboxVisibility.always}\r\n                        onShouldVirtualize={ () => false }\r\n                        selection={this._selection} \r\n                        selectionMode={SelectionMode.multiple}  \r\n                        selectionPreservedOnEmptyClick={false}\r\n                        styles={detailsListStyles}            \r\n                      ></DetailsList> : <span>{InfoMessage}</span>\r\n                  }\r\n                  </div>\r\n                </div>                \r\n              </div>\r\n            </div>\r\n            <div className=\"ms-Grid-row\" style={{minHeight:\"20px\"}}></div>\r\n            <div className=\"ms-Grid-row\" style={{\r\n              boxShadow: \"rgba(0, 0, 0, 0.133) 0px 1.6px 3.6px 0px, rgba(0, 0, 0, 0.11) 0px 0.3px 0.9px 0px\", \r\n              width: \"90%\",\r\n              overflow: \"auto\",\r\n              margin: \"0 auto\",\r\n              padding:\"10px 0px 00px 10px\"}}>\r\n              {\r\n                (ShowAddActivity===\"Add\") ? \r\n                <div className=\"ms-Grid\" dir=\"ltr\" style={{padding:\"0px\", width: \"99%\", textAlign:\"left\"}}>\r\n                  <div className=\"ms-Grid-row\"style={{width:\"100%\",overflow:\"auto\",margin:\"0 auto\",paddingBottom:\"0px\"}}>                  \r\n                    <div className=\"ms-Grid-col ms-sm12 ms-md12 ms-lg12\" style={{padding:\"0px\"}}>\r\n                      <CreateActivityForm key={\"Create\"+FormId} handleActivityActions={this.handleActivityActions} NotPopActions ={true} \r\n                      ExpData={{ExpId:EID,ExpOwnerEmail:Experiment.Owner[0]?.Email,ExpStartDate:Experiment.StartDate,\r\n                      ExperimentNotSaved:ExperimentNotSaved}}/>\r\n                    </div>\r\n                  </div>                               \r\n                </div> : \"\"\r\n              }\r\n              {\r\n                (ShowAddActivity===\"Edit\" ||ShowAddActivity===\"View\") ? \r\n                <div className=\"ms-Grid\" dir=\"ltr\" style={{padding:\"0px\", width: \"99%\", textAlign:\"left\"}}>\r\n                  <div className=\"ms-Grid-row\"style={{width:\"100%\",overflow:\"auto\",margin:\"0 auto\",paddingBottom:\"0px\"}}>                  \r\n                    <div className=\"ms-Grid-col ms-sm12 ms-md12 ms-lg12\" style={{padding:\"0px\"}}>\r\n                      <EditActivityForm key={\"Edit\"+FormId} Id={AID} viewForm={ShowAddActivity===\"View\"?true:false} \r\n                      handleActivityActions={this.handleActivityActions} NotPopActions ={true} \r\n                      ExpData={{ExpId:EID,ExpOwnerEmail:Experiment.Owner[0]?.Email,ExpStartDate:Experiment.StartDate,ExperimentNotSaved:ExperimentNotSaved}}/>\r\n                    </div>\r\n                  </div>                               \r\n                </div> : \"\"\r\n              }\r\n            </div>\r\n          </div>\r\n        }\r\n        {RedirectUri ? <Redirect to={RedirectUri}></Redirect> : \"\"}\r\n      </div>\r\n    );\r\n  }\r\n  sortActivities = (activities:any) :any[] =>{\r\n    var sortedItems:any[] = [];\r\n    sortedItems =  _.orderBy(activities,(a,b) =>{\r\n      return new Date(a.ActivityDate);\r\n    });\r\n    return sortedItems;\r\n  }\r\n  renderErrorMsgForField(msg:string,key:any){\r\n    return(\r\n         <div role=\"alert\" key={key}>\r\n            <p className=\"ms-TextField-errorMessage alertMsg\">\r\n                <span data-automation-id=\"error-message\">{msg}</span>\r\n            </p>\r\n        </div>\r\n    );\r\n  }\r\n  loadSpinner = (labelTxt:string,isLoading:boolean) => {\r\n    return (\r\n        <div className=\"centeredContainer\">\r\n            <BlockingSpinner label={labelTxt} hideDialog={!isLoading}/>\r\n        </div>\r\n    );\r\n  }\r\n  handleActivityActions = (property:any,actionType:\"LoadForm\"|\"CreatedActivity\"|\"DeleteActivity\"|\"ClonedActivity\"|\"UpdatedActivity\"|\"CloseForm\"|\"ViewToEdit\") => {\r\n    switch (actionType) {\r\n      case \"LoadForm\":      \r\n        this.setState({\r\n          FormActionLoading:false,\r\n          FormAction:\"LoadForm\",\r\n          InfoMessage: MessageText.NoActivities\r\n        });\r\n        break;\r\n      case \"CloseForm\":      \r\n        this.setState({\r\n          ShowAddActivity: \"None\", \r\n          FormActionLoading:false,\r\n          FormAction:\"LoadForm\",\r\n          InfoMessage: MessageText.NoActivities\r\n        });\r\n        break;\r\n      case \"CreatedActivity\":       \r\n        this.reloadActivityGrid();\r\n        this.setState({\r\n          ShowAddActivity: \"None\", \r\n          // FormActionLoading:false,\r\n          FormAction:\"ShowMessage\",\r\n          FormActionMsg:\"Created Activity Successfully!\"\r\n        });\r\n        setTimeout(() => {\r\n              this.setState({ FormActionMsg: '' })\r\n        }, 2500);\r\n        break;\r\n      case \"UpdatedActivity\":       \r\n        this.reloadActivityGrid();\r\n        this.setState({\r\n          ShowAddActivity: \"None\", \r\n          // FormActionLoading:false,\r\n          FormAction:\"ShowMessage\",\r\n          FormActionMsg:\"Updated Activity Successfully!\"\r\n        });\r\n        setTimeout(() => {\r\n              this.setState({ FormActionMsg: '' })\r\n        }, 2500);\r\n        break;\r\n      case \"ClonedActivity\":       \r\n        this.reloadActivityGrid();\r\n        this.setState({\r\n          ShowAddActivity: \"Edit\", \r\n          // FormActionLoading:false,\r\n          AID: parseInt(property), \r\n          FormAction:\"ShowMessage\",\r\n          FormActionMsg:\"Cloned Activity Successfully. Opened Edit activity form of the cloned activity\"\r\n        });\r\n        setTimeout(() => {\r\n              this.setState({ FormActionMsg: '' })\r\n        }, 2500);\r\n        break;\r\n      case \"DeleteActivity\":       \r\n        this.reloadActivityGrid();\r\n        this.setState({\r\n          ShowAddActivity: \"None\", \r\n          // FormActionLoading:false,\r\n          AID: parseInt(property), \r\n          FormAction:\"ShowMessage\",\r\n          FormActionMsg:\"Deleted Activity Successfully.  \"\r\n        });\r\n        setTimeout(() => {\r\n              this.setState({ FormActionMsg: '' })\r\n        }, 2500);\r\n        break;\r\n        case \"ViewToEdit\":\r\n          this.setState({\r\n            ShowAddActivity: \"Edit\"\r\n          });\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n  reloadActivityGrid() {\r\n    const {Experiment} = this.state;\r\n    this.setState({\r\n      FormActionLoading: true,\r\n      InfoMessage: MessageText.ReloadActivity,\r\n    });\r\n    ExperimentService.getActivitiesForExp(Experiment.Id).then(response => {                      \r\n      if (response) { \r\n        let _activities: IActivityGridModel[] = [];\r\n          _activities = response as IActivityGridModel[];\r\n        this.setState({\r\n          PlanexLoading: false,\r\n          InfoMessage:'',\r\n          FormActionLoading:false,\r\n          ExperimentActivities: this.reduecActivityArray([..._activities])\r\n        });\r\n      }\r\n    });\r\n  }\r\n  renderTimmerMessages(msg:string){\r\n    return(\r\n        <MessageBar messageBarType={MessageBarType.success} className={\"formupdateInfo\"}>\r\n            {msg}\r\n        </MessageBar>\r\n    );\r\n  }\r\n  deleteMulActivities = () => {\r\n    const {SelectedActivities,Experiment} = this.state;\r\n    if (SelectedActivities.length>0) {\r\n      let notes = \"Delete activities from experiment \" + Experiment.Id+\" by \"+this.context.userName;\r\n      let idArray = _.map(SelectedActivities,'ActivityId');\r\n      this.setState({\r\n        InfoMessage: MessageText.DeleteActivity,\r\n        FormActionLoading: true,\r\n        ShowDialog:\"None\",\r\n        ShowAddActivity:\"None\"\r\n      });\r\n      ExperimentService.deleteActivities({ActivityIds:idArray,Notes:notes}).then((data) => { \r\n        this.reloadActivityGrid();\r\n        this.setState({\r\n            ShowAddActivity:\"None\",\r\n            Mode: \"EDIT\",\r\n            InfoMessage: '',\r\n            FormActionLoading: false,\r\n          }); \r\n      });\r\n    }\r\n    else{\r\n      this.setState({\r\n        ShowDialog:\"None\"\r\n      });\r\n    }\r\n  }\r\n  onClickDeleteMulActivities = () =>{\r\n    const {ShowAddActivity} = this.state;\r\n    let flag:boolean = true;\r\n    if(flag){\r\n      flag = false;\r\n      this.setState({ \r\n        ShowDialog:\"DeletePrompt\"\r\n      });\r\n    }\r\n  }\r\n  addActClickState = () =>{\r\n    this.setState({\r\n      ShowAddActivity: \"Add\",\r\n      FormActionLoading:true,\r\n      FormAction:\"LoadForm\",\r\n      ShowDialog:\"None\",\r\n      FormId: uuidv4(),\r\n      InfoMessage: MessageText.LoadingActivitForm,\r\n    });\r\n  }\r\n  onClickAddActivity=(ev: any)=>{\r\n    const {ShowAddActivity} = this.state;\r\n    let flag:boolean = true;\r\n    if(ShowAddActivity ===\"Edit\"){\r\n      flag = false;\r\n      this.setState({ \r\n        ShowDialog:\"UnsavedEditForm\"\r\n      });\r\n    }\r\n    if(flag){\r\n     this.addActClickState();\r\n    }\r\n  }\r\n  viewActClickState = () =>{\r\n    const {SelectedActivities} = this.state;\r\n    let acitvityId =SelectedActivities.length>0?SelectedActivities[0].ActivityId:0;\r\n    this.setState({\r\n      ShowAddActivity: \"View\",\r\n      FormActionLoading:true,\r\n      AID:acitvityId,\r\n      ShowDialog:\"None\",\r\n      FormAction:\"LoadForm\",\r\n      FormId: uuidv4(),\r\n      InfoMessage: MessageText.LoadingActivitForm,\r\n    });\r\n  }\r\n  onClickViewActivity=(ev: any)=>{   \r\n    const {ShowAddActivity} = this.state;\r\n    let flag:boolean = true;\r\n    if(ShowAddActivity ===\"Edit\" || ShowAddActivity ===\"Add\"){\r\n      flag = false;\r\n      this.setState({ \r\n        ShowDialog:\"UnsavedAddEditFormViewClick\"\r\n      });\r\n    }\r\n    if(flag){\r\n      this.viewActClickState();\r\n    }\r\n  }\r\n  editActClickState = () =>{\r\n    const {SelectedActivities} = this.state;\r\n    let acitvityId =SelectedActivities.length>0?SelectedActivities[0].ActivityId:0;\r\n    this.setState({\r\n      ShowAddActivity: \"Edit\",\r\n      FormActionLoading:true,\r\n      AID:acitvityId,\r\n      ShowDialog:\"None\",\r\n      FormAction:\"LoadForm\",\r\n      FormId: uuidv4(),\r\n      InfoMessage: MessageText.LoadingActivitForm,\r\n    });\r\n  }\r\n  onClickEditActivity=(ev: any)=>{    \r\n    const {ShowAddActivity} = this.state;\r\n    let flag:boolean = true;\r\n    if(ShowAddActivity ===\"Add\"){\r\n      flag = false;\r\n      this.setState({ \r\n        ShowDialog:\"UnsavedAddForm\"\r\n      });\r\n    }\r\n    if(flag){\r\n      this.editActClickState();\r\n    }\r\n  }\r\n  cloneActClickState = () =>{\r\n    const {SelectedActivities,Experiment} = this.state;\r\n    let acitvityId =SelectedActivities.length>0?SelectedActivities[0].ActivityId:0;\r\n    this.setState({\r\n      FormActionLoading:true,\r\n      FormAction:\"LoadForm\",\r\n      ShowAddActivity: \"None\",\r\n      ShowDialog:\"None\",\r\n      InfoMessage: MessageText.CloneActivitForm,\r\n    });\r\n    let jsonObj:any = {ActivityId:acitvityId};\r\n    ExperimentService.CloneActivity(jsonObj).then((data:any) => {\r\n      if(data && data.id){\r\n        this.reloadActivityGrid();\r\n        this.setState({\r\n          ShowAddActivity: \"Edit\",\r\n          FormActionLoading:true,\r\n          AID:data.id,\r\n          FormAction:\"LoadForm\",\r\n          FormId: uuidv4(),\r\n          InfoMessage: MessageText.LoadingActivitForm,\r\n        });\r\n      }\r\n    }).catch((error) =>{\r\n        console.log(\"Clone act error\", error);\r\n    });   \r\n  }\r\n  onClickCloneActivity=(ev: any)=>{\r\n    const {ShowAddActivity} = this.state;\r\n    let flag:boolean = true;\r\n    if(ShowAddActivity ===\"Add\" || ShowAddActivity ===\"Edit\"){\r\n      flag = false;\r\n      this.setState({ \r\n        ShowDialog:\"UnsavedAddEditForm\"\r\n      });\r\n    }\r\n    if(flag){\r\n      flag = false;\r\n      this.setState({ \r\n        ShowDialog:\"CloneActConfirmation\"\r\n      });\r\n    }\r\n    if(flag){\r\n        this.cloneActClickState();\r\n    }\r\n  }\r\n  toggleHideDialog = () =>{\r\n    this.setState({\r\n      ShowDialog:\"None\"\r\n    });\r\n  }\r\n  confirmationAction = () =>{\r\n    const {ShowDialog} = this.state;\r\n    switch (ShowDialog) {\r\n      case \"UnsavedEditForm\":\r\n        this.addActClickState();\r\n        break;\r\n      case \"UnsavedAddForm\":\r\n        this.editActClickState();\r\n        break;\r\n      case \"UnsavedAddEditFormViewClick\":\r\n       this.viewActClickState();\r\n        break;\r\n      case \"UnsavedAddEditForm\":\r\n        this.setState({\r\n          ShowAddActivity:\"None\",\r\n          ShowDialog:\"CloneActConfirmation\"\r\n        });\r\n        break;\r\n      case \"CloneActConfirmation\":\r\n        this.cloneActClickState();\r\n        break;\r\n      case \"CloseExpForm\":\r\n          this.setState({RedirectUri: \"/Home\"});\r\n        break;\r\n      case \"DeletePrompt\":\r\n          this.deleteMulActivities();\r\n        break;\r\n      default:\r\n        this.toggleHideDialog();\r\n        break;\r\n    }\r\n  }\r\n  renderConfirm =():JSX.Element =>{\r\n    const dialogContentProps = {\r\n      type: DialogType.normal,\r\n      title: 'Missing Subject',\r\n      closeButtonAriaLabel: 'Close',\r\n      subText: 'Do you want to send this message without a subject?',\r\n    };\r\n    const {ShowDialog} = this.state;\r\n    var hideDialog:boolean =true;\r\n    switch (ShowDialog) {\r\n      case \"None\":\r\n        dialogContentProps.title ='';\r\n        dialogContentProps.subText ='';\r\n        hideDialog = true;\r\n        break;\r\n      case \"UnsavedEditForm\":\r\n        dialogContentProps.title ='Unsaved Edit Form';\r\n        dialogContentProps.subText = MessageText.UnsavedEditForm;\r\n        hideDialog = false;\r\n        break;\r\n      case \"UnsavedAddForm\":\r\n        dialogContentProps.title ='Unsaved Add Form';\r\n        dialogContentProps.subText = MessageText.UnsavedAddForm;\r\n        hideDialog = false;\r\n        break;\r\n      case \"UnsavedAddEditFormViewClick\":\r\n        dialogContentProps.title ='Unsaved Add/Edit Form';\r\n        dialogContentProps.subText = MessageText.UnsavedAddEditFormViewClick;\r\n        hideDialog = false;\r\n        break;\r\n      case \"UnsavedAddEditForm\":\r\n        dialogContentProps.title ='Unsaved Add/Edit Form';\r\n        dialogContentProps.subText = MessageText.UnsavedAddEditForm;\r\n        hideDialog = false;\r\n        break;\r\n      case \"CloneActConfirmation\":\r\n          dialogContentProps.title ='Clone?';\r\n          dialogContentProps.subText = MessageText.CloneActConfirmation;\r\n          hideDialog = false;\r\n          break;\r\n      case \"CloseExpForm\":\r\n          dialogContentProps.title ='Unsaved Form';\r\n          dialogContentProps.subText = MessageText.UnsavedChangesLost;\r\n          hideDialog = false;\r\n          break;\r\n      case \"DeletePrompt\":\r\n          dialogContentProps.title ='Delete?';\r\n          dialogContentProps.subText = MessageText.DeleteActConfirm;\r\n          hideDialog = false;\r\n          break;\r\n      default:\r\n        break;\r\n    }\r\n    return (\r\n        <>\r\n        <Dialog\r\n          hidden={hideDialog}\r\n          onDismiss={this.toggleHideDialog}\r\n          dialogContentProps={dialogContentProps}\r\n          modalProps={{\r\n              isBlocking: true,\r\n              // styles: {main: {maxWidth: 450}},\r\n          }}\r\n        >\r\n          <DialogFooter>\r\n            <PrimaryButton onClick={this.confirmationAction.bind(this)} text=\"Yes\" />\r\n            <DefaultButton onClick={this.toggleHideDialog.bind(this)} text=\"No\" />\r\n          </DialogFooter>\r\n        </Dialog>\r\n        </>\r\n    );\r\n  }\r\n  componentDidMount(){\r\n    this.loadMasterData().then((res)=>{\r\n      const {FormMode, ExpId} = this.props;    \r\n      switch(FormMode.toUpperCase()){\r\n        case \"ADD\":\r\n          this.loadAddForm();\r\n          break;\r\n        case \"EDIT\": \r\n          this.loadEditForm(ExpId);\r\n          this.setState({\r\n            Mode: \"edit\",\r\n            EID: ExpId,\r\n            TopLabel: \"Edit Experiment\"\r\n          });\r\n          break;\r\n      }\r\n    });\r\n  }\r\n  componentDidUpdate(prevProps:IExperimentProps, prevState:IExperimentState) {\r\n    const {Experiment} = this.state;\r\n    if(this.props.ExpId!==prevProps.ExpId && this.props.ParentId!==prevProps.ParentId){     \r\n      this.loadEditForm(this.props.ExpId);\r\n      this.setState({\r\n        Mode: \"edit\",\r\n        FormActionLoading:true,\r\n        InfoMessage:\"Loading...\",\r\n        EID: this.props.ExpId,\r\n        TopLabel: \"Edit Experiment\"\r\n      });\r\n    }\r\n  }\r\n  \r\n  loadMasterData=()=>{\r\n    return new Promise((resolve, reject) => {\r\n      ExperimentService.getProjects().then((res) => {\r\n        let _projects = res.data as IProject[];\r\n        this.setState({\r\n          Projects: _projects\r\n        });\r\n        resolve(true);\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n        reject(error);\r\n      });   \r\n    });\r\n  }\r\n  validateForm=()=>{\r\n    const {Mode, Experiment} = this.state;\r\n    if(Utils.strEqualsCI(Mode, \"EDIT\")){\r\n      //validate if experiment is active\r\n      if(Experiment.StatusId!==1){\r\n        this.setState({\r\n          DisableForm: true,\r\n          DisableAdd: true,\r\n          HeaderMessage: MessageText.DeletedExperiment,\r\n          HeaderMessageType: MessageBarType.error\r\n        });\r\n      }\r\n      else{\r\n        var currActivityDate = moment(Experiment.StartDate);\r\n        var currDate = moment(new Date());\r\n        var diffDates = currDate.diff(currActivityDate,'days');\r\n        //validate start date\r\n        if(diffDates>0){\r\n          this.setState({\r\n            DisableForm: true,\r\n            HeaderMessage: MessageText.NoEditPastExp,\r\n            HeaderMessageType: MessageBarType.error\r\n          });\r\n        }\r\n        //validate permissions\r\n        if(!this.context.isAdmin && !Utils.strEqualsCI(this.context.userName, Experiment.Owner[0].Email)){         \r\n          this.setState({\r\n            DisableForm: true,\r\n            DisableAdd: true,\r\n            HeaderMessage: MessageText.NoAdminExpOwner,\r\n            HeaderMessageType: MessageBarType.error\r\n          });\r\n        }\r\n      }\r\n    }\r\n  }\r\n  setCurrentUserAsOwner = ():IUserPersonaField =>{\r\n    let currUserAsOwner:IUserPersonaField = {} as IUserPersonaField;\r\n    currUserAsOwner.DisplayName = this.context.name;\r\n    currUserAsOwner.Email = this.context.userName;\r\n    return currUserAsOwner;\r\n  }\r\n  loadAddForm=()=>{   \r\n    const {Experiment} = this.state;\r\n    Experiment.Owner = [] as IUserPersonaField[];\r\n    let curUserProfile = this.setCurrentUserAsOwner();\r\n    Experiment.Owner.push(curUserProfile);\r\n    Experiment.StartDate = new Date(now);\r\n      this.setState({\r\n        Mode: \"add\",\r\n        Experiment,\r\n        PlanexLoading: false\r\n      });  \r\n  }\r\n  loadEditForm=(expId: number)=>{\r\n    const promises=[];\r\n    promises.push(ExperimentService.getExperiment(expId));\r\n    promises.push(ExperimentService.getActivitiesForExp(expId));\r\n    Promise.all(promises)\r\n        .then(responses => {     \r\n          if(responses[0]!=null){\r\n            if (responses && responses.length > 0) {            \r\n              let _experiment = responses[0] as IExperiment;\r\n              let _activities: IActivityGridModel[] = [];\r\n              if(responses.length>1){\r\n                _activities = responses[1] as IActivityGridModel[];                  \r\n              }            \r\n              this.setState({\r\n                PlanexLoading: false,\r\n                FormActionLoading:false,\r\n                InfoMessage:'',\r\n                Experiment: _experiment,\r\n                ExperimentActivities: this.reduecActivityArray([..._activities]),\r\n                PreviousStartDate: _experiment.StartDate\r\n              }, () => {\r\n                this.validateForm();\r\n              });\r\n            }\r\n          }\r\n          else{\r\n            this.setState({\r\n              PlanexLoading: false,\r\n              DisableForm: true,\r\n              HeaderMessage: MessageText.NoExperimentWithId,\r\n              HeaderMessageType: MessageBarType.error\r\n            });\r\n          }\r\n        })\r\n        .catch(error => {\r\n          console.log(error);\r\n      });\r\n  }\r\n  reduecActivityArray=(activities: IActivityGridModel[])=>{\r\n    let groupedArr: IActivityGridModel[]=[];    \r\n    if(activities.length>0){      \r\n      activities.forEach((item, index)=>{          \r\n          let groupedItem = groupedArr.filter(i => {return i.ActivityId==item.ActivityId});\r\n          if(groupedItem.length!==1){\r\n              groupedArr.push(item);\r\n          }\r\n          else{\r\n            groupedItem[0].ShiftName = this.checkAndReduceField(groupedItem[0],\"ShiftName\",item.ShiftName);\r\n            groupedItem[0].LocationName = this.checkAndReduceField(groupedItem[0],\"LocationName\",item.LocationName);\r\n            groupedItem[0].EquipmentName = this.checkAndReduceField(groupedItem[0],\"EquipmentName\",item.EquipmentName);\r\n          }\r\n      });      \r\n    }\r\n    return this.sortActivities(groupedArr);  \r\n  }      \r\n  checkAndReduceField=(item: IActivityGridModel, fieldName: string, fieldValue: string): string=>{    \r\n    switch(fieldName){\r\n      case \"ShiftName\": {        \r\n        return (item.ShiftName != null && item.ShiftName.split(\"|\").indexOf(fieldValue)<0) ? item.ShiftName + \"|\" + fieldValue : item.ShiftName;\r\n      }\r\n      case \"LocationName\": {\r\n        return (item.LocationName != null && item.LocationName.split(\"|\").indexOf(fieldValue)<0) ? item.LocationName + \"|\" + fieldValue : item.LocationName;\r\n      }\r\n      case \"EquipmentName\": {\r\n        return (item.EquipmentName != null && item.EquipmentName.split(\"|\").indexOf(fieldValue)<0) ? item.EquipmentName + \"|\" + fieldValue : item.EquipmentName;\r\n      }\r\n      default:\r\n        return \"\";\r\n    }\r\n  }\r\n  _onItemSelectionChange = () => {\r\n    const {ExperimentActivities} = this.state;    \r\n    let selIndices = this._selection.getSelectedIndices();        \r\n    let _activities: IActivityGridModel[]=[];\r\n    let _disableDelete = false;\r\n    selIndices.map((item: number)=>{\r\n      _activities.push(ExperimentActivities[item]);\r\n      let _currActivityDate = moment(ExperimentActivities[item].ActivityDate);\r\n      let _currDate = moment(new Date());\r\n      let _diffDates = _currDate.diff(_currActivityDate,'days');\r\n      if(_diffDates > 0){\r\n        _disableDelete=true;\r\n      }\r\n    });\r\n    this.setState({\r\n      SelectedActivities: _activities,\r\n      DisableDelete: _disableDelete\r\n    });\r\n  }\r\n  onChangeExperimentName=(ev: any)=>{\r\n    const _experiment = this.state.Experiment;\r\n    _experiment.Name = ev.target.value;\r\n    this.setState({Experiment: _experiment, ExperimentNotSaved: true});\r\n  }\r\n  onProjectChange=(event: React.FormEvent<HTMLDivElement>, option?: IDropdownOption, index?: number)=>{\r\n    if(option){\r\n      const _experiment = this.state.Experiment;\r\n      _experiment.ProjectId = parseInt(option.key.toString());\r\n      this.setState({Experiment: _experiment, ExperimentNotSaved: true});\r\n    }\r\n  }\r\n  onSelectExpDate = (updatedDate:any) => {    \r\n    if (updatedDate){\r\n      const _experiment = this.state.Experiment;\r\n      const _previousStartDate = _experiment.StartDate;\r\n      _experiment.StartDate = updatedDate as Date;\r\n      this.setState({\r\n        Experiment: _experiment,\r\n        PreviousStartDate: _previousStartDate,\r\n        ExperimentNotSaved: true\r\n      });\r\n    }\r\n  };\r\n  onSelectExperimentOwner = (items:IUserPersonaField[], property:string) => {   \r\n      const _experiment = this.state.Experiment;\r\n      _experiment.Owner = items.length>0?items:[];\r\n      this.setState({Experiment: _experiment, ExperimentNotSaved: true});\r\n  }\r\n  onChangeExperimentDesc=(ev: any)=>{\r\n    const _experiment = this.state.Experiment;\r\n    _experiment.Description = ev.target.value;\r\n    this.setState({Experiment: _experiment, ExperimentNotSaved: true});\r\n  }\r\n  onDeleteExperiment=(ev: any)=>{\r\n    let _promptValue = window.confirm(MessageText.DeleteExptConfirm);  \r\n    if(_promptValue){\r\n      \r\n    }\r\n  }\r\n  onCloseExperiment=(ev: any)=>{\r\n    const {ExperimentNotSaved,ShowAddActivity} = this.state;\r\n    if(ExperimentNotSaved || ShowAddActivity ===\"Edit\" || ShowAddActivity ===\"Add\"){ \r\n      this.setState({ \r\n        ShowDialog:\"CloseExpForm\"\r\n      });\r\n    }  \r\n    else{\r\n      this.setState({RedirectUri: \"/Home\"});\r\n    }  \r\n  }\r\n  onSaveExperiment=(ev: any)=>{\r\n    ev.preventDefault();\r\n    const mode = this.state.Mode;    \r\n    if(Utils.strEqualsCI(mode, \"ADD\")){\r\n      const {Experiment} = this.state;\r\n      let validatonObj:IValidationObj = validateExpFields(Experiment);\r\n      if (validatonObj.isValid) {\r\n        this.setState({\r\n          SaveExpProcessing: true,\r\n\r\n        });\r\n        ExperimentService.addExperiment(Experiment).then((data) => {\r\n          const _experiment = this.state.Experiment;\r\n          _experiment.Id = data.output.ExperimentId;\r\n          _experiment.StatusId = 1;\r\n            this.setState({\r\n              Experiment: _experiment,\r\n              EID: _experiment.Id,\r\n              Mode: \"EDIT\",\r\n              SaveExpProcessing: false,\r\n              ExperimentErrMsgs: validatonObj.ErrorMsgs,\r\n              InfoMessage: MessageText.NoActivities,\r\n              RedirectUri: \"/PlanExperiment?id=\" + data.output.ExperimentId,\r\n              TopLabel: \"Edit Experiment\",\r\n              ExperimentNotSaved: false,\r\n              HeaderMessage: MessageText.ExptDetailsSaved,\r\n              HeaderMessageType: MessageBarType.success,\r\n              // FormId:uuidv4()\r\n            });\r\n        })\r\n      .then(()=>{\r\n        this.validateForm();\r\n        });\r\n      }\r\n      else{\r\n          this.setState({\r\n            ExperimentErrMsgs: validatonObj.ErrorMsgs,\r\n          });\r\n      }\r\n    }\r\n    else if(Utils.strEqualsCI(mode, \"EDIT\")){\r\n      const {Experiment} = this.state;\r\n      let validatonObj:IValidationObj = validateExpFields(Experiment);\r\n      if (validatonObj.isValid) {\r\n        this.setState({\r\n          SaveExpProcessing: true,\r\n        });        \r\n        Experiment.UpdateActivities = Experiment.StartDate !== this.state.PreviousStartDate;\r\n        ExperimentService.updateExperiment(Experiment).then((data) => {\r\n          console.log(data);\r\n            if(data.length > 0){\r\n              let _activities = data[0] as IActivityGridModel[];\r\n              this.setState({\r\n                Mode: \"EDIT\",\r\n                SaveExpProcessing: false,\r\n                ExperimentActivities: this.reduecActivityArray([..._activities]),\r\n                ExperimentNotSaved: false,\r\n                FormId:uuidv4()\r\n              });\r\n            }\r\n            else{\r\n              this.setState({\r\n                Mode: \"EDIT\",\r\n                SaveExpProcessing: false,\r\n                ExperimentNotSaved: false\r\n              });\r\n            } \r\n      })\r\n      .then(()=>{\r\n        this.validateForm();\r\n        });\r\n      }\r\n    } \r\n       \r\n  }  \r\n  onDismissHeaderMessage=(ev: any)=>{\r\n    this.setState({HeaderMessage: \"\"});\r\n  }\r\n  onClickDeleteExp = () =>{\r\n    let _hideDeleteDialog = this.state.HideDeleteDialog;\r\n    this.setState({\r\n      HideDeleteDialog: !_hideDeleteDialog,\r\n      DeleteNotes: \"\"\r\n    }) \r\n  }\r\n  onChangeDeleteNotes=(ev: any)=>{\r\n    this.setState({DeleteNotes: ev.target.value})\r\n  }\r\n  onClickDeleteConfirmation= () =>{\r\n    const {DeleteNotes} = this.state;\r\n    if(DeleteNotes.trim().length > 0){\r\n        let notesWithUserProfile = DeleteNotes +\" - Deleted by \" + this.context.userName; \r\n        ExperimentService.deleteExperiment(this.state.Experiment.Id, notesWithUserProfile)\r\n        .then(response => {\r\n            this.setState({\r\n              DeleteNotes:\"\", \r\n              HideDeleteDialog:true,  \r\n              DisableForm: true,\r\n              HeaderMessage: \"Experiment deleted successfully. \" + MessageText.DeletedExperiment,\r\n              HeaderMessageType: MessageBarType.error\r\n            });\r\n        }).catch(error => {\r\n            this.setState({\r\n                HideDeleteDialog: true,\r\n                HeaderMessage:AppConfig.ActivityForm.DeleteErrorMessage + error\r\n            });\r\n            console.log(error);\r\n        });         \r\n    }\r\n    else {\r\n      this.setState({HideDeleteDialog:false, DeleteErrorMessage: MessageText.DeleteNotesError});\r\n    }\r\n  }\r\n  onClickCloneExperiment=(ev: any)=>{\r\n    const {HideCloneDialog} = this.state;\r\n    this.setState({\r\n      HideCloneDialog:!HideCloneDialog\r\n    });\r\n  }\r\n  onClickConfirmCloneExperiment=(ev: any)=>{\r\n    const {HideCloneDialog, Experiment} = this.state;\r\n    this.setState({\r\n      HideCloneDialog:!HideCloneDialog,\r\n      FormActionLoading:true,\r\n      InfoMessage:MessageText.CloningExpLoaderTxt\r\n    });    \r\n    ExperimentService.cloneExperiment(Experiment.Id).then((res)=>{\r\n      const _url = \"/PlanExperiment?id=\" + res.CloneExpId +\"&ParentId=\"+ Experiment.Id;\r\n      this.setState({\r\n        RedirectUri: _url,\r\n        DisableForm:false,\r\n        InfoMessage:'Loading...',\r\n        HeaderMessageType:MessageBarType.success,\r\n        HeaderMessage:MessageText.CloneSuccessMessage});\r\n      });\r\n  }\r\n  getActivityColumns=():IColumn[]=>{\r\n    let _columns = [\r\n      {\r\n        key: \"ActivityDate\",\r\n        name: \"Date\",\r\n        fieldName: \"ActivityDate\",\r\n        minWidth: 90,\r\n        maxWidth: 110,\r\n        onRender: (item: IActivityGridModel) => {\r\n          return <div>{moment.utc(item.ActivityDate).format(\"MM/DD/YYYY\")}</div>;\r\n        },\r\n      },\r\n      {\r\n        key: \"ActivityName\",\r\n        name: \"Activity Name\",\r\n        fieldName: \"ActivityName\",\r\n        minWidth: 200,\r\n        maxWidth: 250,\r\n      },      \r\n      {\r\n        key: \"ShiftName\", \r\n        name: \"Shift(s)\",\r\n        fieldName: \"ShiftName\",\r\n        minWidth: 150,\r\n        maxWidth: 180,\r\n        onRender: (item: IActivityGridModel) => {\r\n          if(!item.ShiftName){\r\n              return <span></span>;\r\n          }\r\n          else{\r\n              return (<div>\r\n                  { item.ShiftName.split(\"|\").map((eq,key)=>{return <div key={key}>{eq}</div>})}\r\n                  </div>\r\n              );\r\n          }\r\n        }\r\n      },\r\n      {\r\n        key: \"LocationName\",\r\n        name: \"Location(s)\",\r\n        fieldName: \"LocationName\",\r\n        minWidth: 150,\r\n        maxWidth: 180,\r\n        onRender: (item: IActivityGridModel) => {\r\n          if(!item.LocationName){\r\n              return <span></span>;\r\n          }\r\n          else{\r\n              return (<div>\r\n                  { item.LocationName.split(\"|\").map((eq,key)=>{return <div key={key}>{eq}</div>})}\r\n                  </div>\r\n              );\r\n          }\r\n        }\r\n      },      \r\n      {\r\n        key: \"EquipmentName\",\r\n        name: \"Equipment(s)\",\r\n        fieldName: \"EquipmentName\",\r\n        minWidth: 150,\r\n        maxWidth: 180,\r\n        onRender: (item: IActivityGridModel) => {\r\n          if(!item.EquipmentName){\r\n              return <span></span>;\r\n          }\r\n          else{\r\n              return (<div>\r\n                  { item.EquipmentName.split(\"|\").map((eq,key)=>{return <div key={key}>{eq}</div>})}\r\n                  </div>\r\n              );\r\n          }\r\n        }\r\n      },\r\n      {\r\n        key: \"BookedForName\",\r\n        name: \"Person\",\r\n        fieldName: \"BookedForName\",\r\n        minWidth: 200,\r\n        maxWidth: 220,\r\n      },\r\n      {\r\n        key: \"ActivityDescription\",\r\n        name: \"Description\",\r\n        fieldName: \"ActivityDescription\",\r\n        minWidth: 200,\r\n        maxWidth: 250,\r\n      },\r\n    ];\r\n    return _columns;\r\n  }\r\n}\r\n\r\n","import * as React from 'react';\r\nimport { ActivityGrid } from '../Components/ActivityGrid/ActivityGrid';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\n\r\nexport interface IMyActivitesProps {\r\n    handleRedirection:(selectedKey:any)=>void;\r\n}\r\n\r\nexport class MyActivites extends React.Component<RouteComponentProps & IMyActivitesProps, {}> {\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.state = {\r\n    }\r\n    this.props.handleRedirection('5');\r\n  }\r\n\r\n  public render() {\r\n    return (\r\n      <ActivityGrid/>\r\n    );\r\n  }\r\n}\r\n","import { IExperimentErrMsgs, IExperiment, IValidationObj } from \"./IExperiment\";\r\nimport { IUserPersonaField } from \"../Activity/interfaces/IActivityForm\";\r\n\r\nexport const InitalExpErrrMsgs:IExperimentErrMsgs = { \r\n    ExperimentName: '',\r\n    StartDate: '',\r\n    Remarks: '',\r\n    ExperimentOwner: '',\r\n    ProjectId: ''\r\n}\r\nexport const validateExpFields = (newExperiment:IExperiment) :IValidationObj => {\r\n    var validationObj:IValidationObj ={\r\n        isValid:true,\r\n        ErrorMsgs:{...InitalExpErrrMsgs}\r\n    };\r\n    try {\r\n        if (isNaN(new Date(newExperiment.StartDate).getTime())) {\r\n            validationObj.ErrorMsgs.StartDate = \"Activity Date is required field.\";\r\n            validationObj.isValid = false;\r\n        }\r\n        if (!newExperiment.ProjectId) {\r\n            validationObj.ErrorMsgs.ProjectId = 'Project/Study is required field.';\r\n            validationObj.isValid = false;\r\n        }\r\n        if (!newExperiment.Name) {\r\n            validationObj.ErrorMsgs.ExperimentName = 'Experiment Name is required field.';\r\n            validationObj.isValid = false;\r\n        }\r\n        else{\r\n            if(newExperiment.Name.trim() === ''){\r\n                validationObj.ErrorMsgs.ExperimentName = 'Experiment Name cannot be empty.';\r\n                validationObj.isValid = false;\r\n            }\r\n        }\r\n        let owner:IUserPersonaField[] = newExperiment.Owner;\r\n        if (owner.length < 1) {\r\n            validationObj.ErrorMsgs.ExperimentOwner = \"Experiment Owner is required field.\";\r\n            validationObj.isValid = false;\r\n        } \r\n    } catch (error) {\r\n        console.log(error);\r\n        validationObj.isValid = false;\r\n    }\r\n    return validationObj;\r\n}\r\n    \r\n    ","import * as React from 'react';\r\nimport queryString from 'query-string';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\nimport AppConfig from '../Constans';\r\nimport Experiment from \"../Components/Experiment/Experiment\";\r\nconst uuidv4 = require('uuid/v4');\r\n\r\ninterface IPlanExperimentState{\r\n    isViewForm:boolean;\r\n    isNewForm:boolean;\r\n    itemId:string;\r\n    formKey:any;  \r\n    ParentId:string;\r\n}\r\ninterface IPlanExperimentProps{\r\n    handleRedirection:(selectedKey:any)=>void;\r\n}\r\nexport class PlanExperiment extends React.Component<RouteComponentProps &IPlanExperimentProps,IPlanExperimentState> {\r\n    constructor(props:RouteComponentProps &IPlanExperimentProps) {\r\n        super(props);\r\n        this.state ={\r\n            isViewForm :false,\r\n            isNewForm:true,\r\n            itemId: \"0\",\r\n            ParentId: \"0\",\r\n            formKey:uuidv4()\r\n        };\r\n        this.props.handleRedirection('1');       \r\n    }\r\n    render() {\r\n        const {ParentId,isNewForm,itemId,formKey} = this.state;\r\n        var formMode = isNewForm?\"add\":\"edit\";\r\n        return (\r\n            <div>                     \r\n              <Experiment FormMode = {formMode}  ParentId={+ParentId} ExpId = {+itemId} key={formKey}/>\r\n            </div>\r\n        );\r\n    } \r\n    componentDidUpdate(prevProps:any, prevState:IPlanExperimentState) {\r\n        const values = queryString.parse(this.props.location.search);        \r\n        if(values){\r\n            let _idValue: string = \"\";\r\n            let _pidValue: string = \"\";\r\n\r\n            for (const key in values) {\r\n                if(key.toUpperCase() === AppConfig.PlanExperiment.IdParam.toUpperCase()){\r\n                    _idValue = values[key] as string;                                        \r\n                }  \r\n                if(key.toUpperCase() === AppConfig.PlanExperiment.ParentIdParam.toUpperCase()){\r\n                    _pidValue = values[key] as string;                                        \r\n                }  \r\n            }       \r\n            if(_idValue !== \"\" && prevState.itemId !==_idValue){\r\n                this.setState({\r\n                    isNewForm: false,\r\n                    itemId: _idValue,\r\n                    ParentId:_pidValue \r\n                });\r\n            }          \r\n        }\r\n    }\r\n       \r\n    componentDidMount() {\r\n        const values = queryString.parse(this.props.location.search);        \r\n        if(values){\r\n            let _idValue: string = \"\";\r\n\r\n            for (const key in values) {\r\n                if(key.toUpperCase() === AppConfig.PlanExperiment.IdParam.toUpperCase()){\r\n                    _idValue = values[key] as string;                                        \r\n                }  \r\n            }       \r\n            if(_idValue !== \"\"){\r\n                this.setState({\r\n                    isNewForm: false,\r\n                    itemId: _idValue,\r\n                    formKey:uuidv4()    \r\n                });\r\n            }          \r\n        }\r\n    }\r\n}\r\n","import React, {Component} from 'react';\r\nimport {AzureAD, AuthenticationState} from 'react-aad-msal';\r\nimport {authProvider} from './authProvider';\r\nimport {Spinner, SpinnerSize} from 'office-ui-fabric-react/lib/Spinner';\r\nimport {ActionButton} from 'office-ui-fabric-react';\r\nimport {initializeIcons} from '@uifabric/icons';\r\nimport { createBrowserHistory } from \"history\";\r\n\r\nimport './CSS/fabric.min.css';\r\nimport {MainApp} from './Main';\r\nconst history = createBrowserHistory();\r\ninitializeIcons();\r\n\r\nclass App extends Component {\r\n    logoinCall = () => {\r\n        authProvider.login();\r\n    };\r\n    render() {        \r\n        return (\r\n            <>\r\n                <AzureAD provider={authProvider} forceLogin={true}>\r\n                    {({authenticationState, accountInfo}) => {                   \r\n                        return (\r\n                            <React.Fragment>\r\n                                {authenticationState ===\r\n                                    AuthenticationState.Authenticated && (\r\n                                   <MainApp history={history} accountInfo={accountInfo} />\r\n                                )}\r\n                                {authenticationState ===\r\n                                    AuthenticationState.InProgress && (\r\n                                    <div className=\"centeredContainer\">\r\n                                        <Spinner size={SpinnerSize.large} />\r\n                                    </div>\r\n                                )}\r\n                                {authenticationState ===\r\n                                    AuthenticationState.Unauthenticated && (\r\n                                    <div className=\"centeredContainer\">\r\n                                        Authenticating user...\r\n                                        <ActionButton\r\n                                            onClick={this.logoinCall}\r\n                                            allowDisabledFocus\r\n                                        >\r\n                                            Force Retry\r\n                                        </ActionButton>\r\n                                    </div>\r\n                                )}\r\n                            </React.Fragment>\r\n                        );\r\n                    }}\r\n                </AzureAD>\r\n            </>\r\n        );\r\n    }\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n    <App />,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import * as React from 'react';\r\nimport AppConfig from '../../Constans';\r\n\r\nexport const AppFooter = () => (\r\n    <footer className=\"footer\">\r\n        <div className=\"AppFooter\">\r\n            <div\r\n                dangerouslySetInnerHTML={{__html: AppConfig.Footer}}\r\n            ></div>\r\n        </div>\r\n    </footer>\r\n);","import * as React from 'react';\r\nimport {Persona, PersonaSize,IPersonaStyles,IPersonaCoinStyles} from 'office-ui-fabric-react/lib/Persona';\r\nimport {Panel, PanelType} from 'office-ui-fabric-react/lib/Panel';\r\nimport {Depths} from '@uifabric/fluent-theme/lib/fluent/FluentDepths';\r\nimport {\r\n    Pivot,\r\n    PivotItem,\r\n    PivotLinkFormat,\r\n    IPivotStyles\r\n} from 'office-ui-fabric-react/lib/Pivot';\r\nimport {Redirect, RouteComponentProps} from 'react-router-dom';\r\n\r\nimport {authProvider} from '../../authProvider';\r\nimport { IMainHeaderProps, IMainHeaderState } from './IMainHeader';\r\n\r\nconst pivotStyle:Partial<IPivotStyles> = {\r\n    root: {textAlign: 'center'},\r\n    linkIsSelected:{\r\n        selectors: {\r\n            '::before': {\r\n                backgroundColor: 'white',\r\n            },\r\n        }\r\n    }\r\n};\r\nconst coinStyles:Partial<IPersonaCoinStyles>= {\r\n    initials: {\r\n        color: 'white!important',\r\n    },\r\n};\r\nconst personaStyles:Partial<IPersonaStyles> = {\r\n    primaryText: {\r\n        fontWeight: '600',\r\n    },\r\n    tertiaryText: {\r\n        display: 'block',\r\n    },\r\n};\r\nexport class MainHeader extends React.Component<RouteComponentProps &IMainHeaderProps,IMainHeaderState> {\r\n    constructor(props:RouteComponentProps & IMainHeaderProps) {\r\n        super(props);\r\n        this.state = {\r\n            isOpen: false,\r\n            selectedKey: '0',\r\n            isNavigate:false\r\n        };\r\n    }\r\n    componentDidMount() {\r\n        const {selectedKey}: any = this.props;\r\n        this.setState({\r\n            selectedKey\r\n        });\r\n    }\r\n    componentDidUpdate(prevProps:IMainHeaderProps, prevState:IMainHeaderState) {\r\n        const {selectedKey}: any = this.props;\r\n        if(this.state.selectedKey !==selectedKey){\r\n            this.setState({\r\n                selectedKey,\r\n                isNavigate:false\r\n            });\r\n        }\r\n    }\r\n    handleUserInfoPanelClick = () => {\r\n        this.setState(previous => {\r\n            return {\r\n                isOpen: !previous.isOpen,\r\n            };\r\n        });\r\n    };\r\n    logoutCall = () => {\r\n        authProvider.logout();\r\n    }\r\n    handlePivotClick = (item:PivotItem|undefined):void=>{\r\n        var itemProps:any = item?.props.headerButtonProps;\r\n        var redirectURI:string = itemProps[\"data-linktext\"] as string;\r\n        this.setState({\r\n            selectedKey: item?.props.itemKey,\r\n            isNavigate:true\r\n        });\r\n        this.props.history.push(redirectURI);\r\n        this.props.handleRedirection(item?.props.itemKey);\r\n    }\r\n    renderTertiaryText = () => {\r\n        return (\r\n            <ul className={'accountCntrlinks'}>\r\n                <li>\r\n                    <span className={'spanLink'} onClick={this.logoutCall}>\r\n                        Sign out{' '}\r\n                    </span>\r\n                </li>\r\n            </ul>\r\n        );\r\n    }\r\n    render() {\r\n        const {userDetail, appImageURL, appLogoText} = this.props;\r\n        const {isOpen, selectedKey, isNavigate} = this.state;\r\n        return (\r\n            <>\r\n                <header className=\"App-header\">\r\n                    <div className=\"row AppHeaderSection\">\r\n                        <div className=\"AppLogo\">\r\n                            {appImageURL ? (\r\n                                <img\r\n                                    src={appImageURL}\r\n                                    alt=\"mainLogo\"\r\n                                    className={'AppLogoImage'}\r\n                                />\r\n                            ) : (\r\n                                <div className={'MainAppLogoDiv'}>\r\n                                    <div\r\n                                        className={'AppLogoImg headerLogDiv'}\r\n                                    ></div>\r\n                                    <div style={{paddingLeft: \"10px\"}}>{appLogoText}</div>\r\n                                </div>\r\n                            )}\r\n                        </div>\r\n                        <div className=\"AppHeaderTxt\">\r\n                            <Pivot\r\n                                aria-label=\"Main Navigation\"\r\n                                linkFormat={PivotLinkFormat.links}\r\n                                styles={pivotStyle}\r\n                                className={'Navigation'}\r\n                                selectedKey={selectedKey||'0'}\r\n                                onLinkClick={this.handlePivotClick.bind(this)}>\r\n                                <PivotItem\r\n                                    headerText=\"Home\"\r\n                                    headerButtonProps={{\r\n                                        'data-order': 1,\r\n                                        'data-title': 'Home',\r\n                                        \"data-linktext\":'/Home'\r\n                                    }}\r\n                                    itemKey=\"0\"\r\n                                >\r\n                                    {isNavigate?<Redirect to={'/Home'} />:''}\r\n                                </PivotItem>\r\n                                <PivotItem  headerButtonProps={{\"data-linktext\":'/PlanExperiment'}} headerText=\"Plan Experiment\" itemKey=\"1\">\r\n                                    {isNavigate? <Redirect to={'/PlanExperiment'} />:''}\r\n                                </PivotItem>\r\n                                <PivotItem headerButtonProps={{\"data-linktext\":'/PlanActivity'}} headerText=\"Plan Lab Activity\" itemKey=\"2\">\r\n                                    {isNavigate?<Redirect to={'/PlanActivity'} />:'' }\r\n                                </PivotItem>\r\n                                <PivotItem headerButtonProps={{\"data-linktext\":'/PlanOfficeSpace'}} headerText=\"Plan Office Usage\" itemKey=\"3\">\r\n                                    {isNavigate?<Redirect to={'/PlanOfficeSpace'} />:'' }\r\n                                </PivotItem>\r\n                                <PivotItem headerButtonProps={{\"data-linktext\":'/Calendar'}} headerText=\"Calendar\" itemKey=\"4\">\r\n                                    {isNavigate?<Redirect to={'/Calendar'} />:'' }\r\n                                </PivotItem>\r\n                                <PivotItem headerButtonProps={{\"data-linktext\":'/MyActivities'}} headerText=\"My Activities\" itemKey=\"5\">\r\n                                    {isNavigate?<Redirect to={'/MyActivities'} />:'' }\r\n                                </PivotItem>\r\n                            </Pivot>\r\n                        </div>\r\n                        {userDetail && (\r\n                            <div className=\"AppUserInfo\">\r\n                                <div\r\n                                    className=\"AppUserInfoDiv\"\r\n                                    onClick={this.handleUserInfoPanelClick}\r\n                                >\r\n                                    <Persona\r\n                                        coinSize={35}\r\n                                        className={'infoBtnHeaderPerson'}\r\n                                        secondaryText={userDetail.userName}\r\n                                        text={userDetail.name}\r\n                                        size={PersonaSize.size24}\r\n                                        coinProps={{styles: coinStyles}}\r\n                                        hidePersonaDetails={true}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                </header>\r\n                {userDetail && (\r\n                    <Panel\r\n                        headerText=\"My Account\"\r\n                        isOpen={isOpen}\r\n                        isLightDismiss={true}\r\n                        isBlocking={false}\r\n                        type={PanelType.smallFixedFar}\r\n                        onDismiss={this.handleUserInfoPanelClick}\r\n                        closeButtonAriaLabel=\"Close\"\r\n                    >\r\n                        <div\r\n                            className={'accountHeader'}\r\n                            style={{boxShadow: Depths.depth4}}\r\n                        >\r\n                            <Persona\r\n                                coinSize={90}\r\n                                className={'infoBtnHeaderPerson'}\r\n                                secondaryText={userDetail.userName}\r\n                                tertiaryText={'signout'}\r\n                                showSecondaryText={true}\r\n                                text={userDetail.name}\r\n                                size={PersonaSize.size24}\r\n                                coinProps={{styles: coinStyles}}\r\n                                onRenderTertiaryText={this.renderTertiaryText}\r\n                                styles={personaStyles}\r\n                            />\r\n                        </div>\r\n                    </Panel>\r\n                )}\r\n            </>\r\n        );\r\n    }\r\n}\r\n","export interface IPathNames{\r\n    PathName:string;\r\n    PathKey:string;\r\n}\r\nexport const PathNames:IPathNames[] =[\r\n    {\r\n        PathName:'/Home',\r\n        PathKey:'0' \r\n    },\r\n    {\r\n        PathName:'/PlanExperiment',\r\n        PathKey:'1' \r\n    },\r\n    {\r\n        PathName:'/PlanActivity',\r\n        PathKey:'2' \r\n    },\r\n    {\r\n        PathName:'/PlanOfficeSpace',\r\n        PathKey:'3' \r\n    },\r\n    {\r\n        PathName:'/Calendar',\r\n        PathKey:'4' \r\n    },\r\n    {\r\n        PathName:'/MyActivities',\r\n        PathKey:'5' \r\n    }\r\n]","import * as React from 'react';\r\nimport {Link,Icon} from 'office-ui-fabric-react';\r\nimport {Redirect} from 'react-router-dom';\r\nimport { useBoolean } from '@uifabric/react-hooks';\r\ninterface IPageNotFoundProps {\r\n}\r\n\r\nconst PageNotFound: React.FunctionComponent<IPageNotFoundProps> = (props) => {\r\nconst [shouldRedirect, { toggle: toggleRedirect }] = useBoolean(false);\r\n  return (\r\n    <div className=\"centeredContainer\" style={{textAlign:\"center\",top: '45%'}}>\r\n            <h1>404 - Page Not found</h1>\r\n            {shouldRedirect?<Redirect to={'/Home'} />:''}\r\n            <h3>\r\n                <Link onClick={toggleRedirect} style={{fontSize:24,color:\"black\"}}>\r\n                <Icon iconName=\"NavigateBack\"\r\n                    className=\"iconPadClasss\"/>\r\n                    Home\r\n                </Link>\r\n            </h3>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PageNotFound;\r\n","import * as React from 'react';\r\nimport {Router, Route, Switch, RouteComponentProps} from 'react-router-dom';\r\nimport * as _ from 'lodash';\r\nimport {Spinner, SpinnerSize} from 'office-ui-fabric-react/lib/Spinner';\r\nimport {Home} from '../routes';\r\nimport { PathNames } from './PathNames';\r\nimport { IAccountInfo } from './IMainApp';\r\nimport AppConfig from '../Constans';\r\nimport { MainHeader } from './Headers';\r\nimport PageNotFound from '../routes/PageNotFound';\r\nimport { createBrowserHistory } from \"history\";\r\n\r\nconst history = createBrowserHistory();\r\nconst PlanActivity = React.lazy(() => import('../routes')\r\n    .then(({ PlanActivity }) => {return ({ default: PlanActivity });}));\r\nconst CalendarMain = React.lazy(() => import('../Components/Calendar/CalendarMain'));\r\nconst MyActivites = React.lazy(() => import('../routes')\r\n    .then(({ MyActivites }) => {return ({ default: MyActivites });}));\r\nconst PlanOfficeSpace = React.lazy(() => import('../routes')\r\n    .then(({ PlanOfficeSpace }) => {return ({ default: PlanOfficeSpace });}));\r\nconst PlanExperiment = React.lazy(() => import('../routes')\r\n    .then(({ PlanExperiment }) => {return ({ default: PlanExperiment });}));\r\n\r\ninterface IAppRouteState{\r\n    selectedKey: string;\r\n}\r\ninterface IAppRouteProps{\r\n    selectedKey: string;\r\n    accountInfo:IAccountInfo;\r\n}\r\nexport default class AppRoute extends React.Component<RouteComponentProps & IAppRouteProps,IAppRouteState>{\r\n    constructor(props:RouteComponentProps &IAppRouteProps) {\r\n        super(props);\r\n        this.state={\r\n            selectedKey: '0'\r\n        };\r\n    }\r\n    componentDidMount(){\r\n        var pathName = window.location.pathname;\r\n        let selectedKey:string = this.getSelectedKeyFromConfig(pathName);\r\n        this.setState({\r\n            selectedKey\r\n        });\r\n    }\r\n    getSelectedKeyFromConfig = (pathName:string):string =>{\r\n        let selectedKey:string = '0';\r\n        let filteredPathNames:any= _.filter(PathNames, {PathName:pathName});\r\n        if(filteredPathNames.length>0){\r\n            selectedKey = filteredPathNames[0].PathKey;\r\n        }\r\n        return selectedKey;\r\n    }\r\n    componentDidUpdate(prevProps:IAppRouteProps, prevState:IAppRouteState) {\r\n        const {selectedKey} = this.props;\r\n        if(prevProps.selectedKey!== selectedKey){\r\n            this.setState({\r\n                selectedKey\r\n            });\r\n        }\r\n    }    \r\n    handleClick = (selectedKey:any)=>{\r\n        this.setState({\r\n            selectedKey\r\n        });\r\n    }\r\n    render(){    \r\n        const {selectedKey}:any = this.state;\r\n        const {accountInfo}:any = this.props;\r\n        return(\r\n            <Router history={history}>\r\n                <MainHeader\r\n                        {...this.props}\r\n                        iconName={AppConfig.Icons.appIconName}\r\n                        appImageURL={AppConfig.Images.AppHeaderImage}\r\n                        appLogoText={AppConfig.Headings.AppLogoText}\r\n                        userDetail={accountInfo.account}\r\n                        selectedKey={selectedKey}\r\n                        handleRedirection={this.handleClick}\r\n                    />\r\n                <React.Suspense\r\n                    fallback={\r\n                        <div className=\"centeredContainer\">\r\n                            <Spinner size={SpinnerSize.large} />\r\n                        </div>\r\n                    }>\r\n                    <Switch>\r\n                        <Route exact path=\"/\"  render={(props) =>  {return (<Home handleRedirection={this.handleClick}/>)}} />\r\n                        <Route path=\"/Home\" render={(props) =>  {return (<Home handleRedirection={this.handleClick}/>)}}  />\r\n                        <Route path=\"/PlanActivity\" render={(props) =>  {return (<PlanActivity {...props} handleRedirection={this.handleClick}/>)}}  />\r\n                        <Route path=\"/PlanExperiment\" render={(props) =>  {return (<PlanExperiment {...props} handleRedirection={this.handleClick}/>)}}  />\r\n                        <Route path=\"/PlanOfficeSpace\" render={(props) =>  {return (<PlanOfficeSpace {...props} handleRedirection={this.handleClick}/>)}}  />\r\n                        <Route path=\"/Calendar\" render={(props) =>  {return (<CalendarMain {...props} handleRedirection={this.handleClick}/>)}} />\r\n                        <Route path=\"/MyActivities\" render={(props) =>  {return (<MyActivites {...props} handleRedirection={this.handleClick}/>)}} />\r\n                        <Route component={PageNotFound} />\r\n                    </Switch>\r\n                </React.Suspense>\r\n            </Router>\r\n        ); \r\n    }    \r\n};\r\n\r\n\r\n","import * as axios from 'axios';\r\n\r\nvar SystemAdminService = {\r\n    // SendEmail: () => {\r\n    getSystemAdmin() {\r\n        return new Promise((resolve, reject) => {\r\n            axios\r\n                .get('/api/SystemAdmin')\r\n                .then(systemAdmin => {\r\n                    resolve(systemAdmin.data);\r\n                })\r\n                .catch(error => {\r\n                    console.log(error.response);\r\n                    reject(error);\r\n                });\r\n        });\r\n    },\r\n};\r\nexport default SystemAdminService;\r\n","import * as React from 'react';\r\nimport * as _ from 'lodash';\r\nimport '../CSS/MainApp.css';\r\nimport {AppFooter} from './Headers';\r\nimport { IMainAppProps, IMainApprState, ISystemAdmin } from './IMainApp';\r\nimport  AppRoute  from '../Main/AppRoute';\r\nimport CacheManager from '../services/CachecManager';\r\nimport {getAuthenticatedClient} from '../services/graph-service';\r\nimport SystemAdminService from '../services/systemadmin-service';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\n\r\nexport const UserInfoContext = React.createContext({name:'',userName:'',isAdmin:false});\r\nexport class MainApp extends React.Component<RouteComponentProps & IMainAppProps,IMainApprState>  {\r\n    constructor(props:RouteComponentProps & IMainAppProps) {\r\n        super(props);\r\n        this.state = {\r\n            selectedKey:'0',\r\n            systemAdmins:[],\r\n            isLoaded: false,\r\n        };\r\n    }    \r\n    getAccessToken = async () => {\r\n        await getAuthenticatedClient();\r\n    }\r\n    componentDidMount() {\r\n        const {accountInfo} = this.props; \r\n        CacheManager.createCacheItem('accountInfo',\r\n        JSON.stringify(accountInfo),1);       \r\n        this.getAccessToken();\r\n        this.getSytstemAdminData().then((systemAdmins:ISystemAdmin[]) => {\r\n            // console.log(systemAdmins);\r\n            if (systemAdmins.length > 0) {\r\n                let isUserArr:any = _.filter(systemAdmins,(sysAdmin) =>{\r\n                    return sysAdmin.SystemAdminEmailId.toUpperCase() === accountInfo.account.userName.toUpperCase()\r\n                });\r\n               let isUserAdmin:boolean = false;\r\n               isUserAdmin = isUserArr?.length>0?true:false;\r\n               accountInfo.account.isAdmin = isUserAdmin;\r\n                this.setState({\r\n                    isLoaded:true,\r\n                    systemAdmins:systemAdmins\r\n                });\r\n            } \r\n            else {\r\n                console.log(\"No System admins\");\r\n            }           \r\n        })\r\n        .catch(error => {\r\n            this.setState({\r\n                isLoaded:true,                \r\n            });\r\n            console.log(\"System Admins not found\",error);\r\n        });\r\n      \r\n    } \r\n    getSytstemAdminData = () :Promise<ISystemAdmin[]>=> {\r\n        return new Promise((resolve, reject) => {\r\n            SystemAdminService.getSystemAdmin()\r\n                .then(systemAdmins => resolve(systemAdmins))\r\n                .catch(error => {\r\n                    reject(error);\r\n                });\r\n        });\r\n    }   \r\n    render() {\r\n        const {accountInfo} = this.props;\r\n        const {selectedKey} = this.state;\r\n        return (\r\n            <div className=\"App\">\r\n                <div className=\"HeaderSection\">\r\n                </div>\r\n                <div className=\"AppBody\">\r\n                    <UserInfoContext.Provider value={accountInfo.account}>\r\n                        <AppRoute  {...this.props} selectedKey={selectedKey}  accountInfo={accountInfo}/>\r\n                    </UserInfoContext.Provider>\r\n                </div>\r\n                <AppFooter />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n","let AppConfig = {\r\n    id: '5db054fadd74b4130864041b',\r\n    Icons: {\r\n        appIconName: '',\r\n    },\r\n    Images: {\r\n        AppHeaderImage: '',\r\n    },\r\n    Headings: {\r\n        AppLogoText: 'TRN Digital - SWFT',\r\n        MainAppHeading: 'SWFT',\r\n        sectionAppHeading: 'TRN Digital - SWFT',\r\n        sectionQuestionsHeading: 'TRN Digital - SWFT',\r\n    },\r\n    UserTimeZone: 'Asia/Kolkata', //'America/New_York',//'Asia/Kolkata',\r\n    DateFormats: {\r\n        NoTimeDate:\"MM/DD/YYYY\",\r\n        dateFormat: 'DD-MM-YYYY hh:mm:ss A',\r\n        viewFormDateFormat: 'DD-MM-YYYY hh:mm:ss A (zZ)',\r\n        flatPickrOutputFormat: 'YYYY-MM-DD HH:mm:ss',\r\n        flatPickrInputFormat: 'MM/DD/YYYY hh:mm A',\r\n        utcDateFormat: 'YYYY-MM-DDTHH:mm:SSZ',\r\n    },\r\n    ActivityForm: {\r\n        FormRedirectionTimmer:3500,\r\n        IdParam:'ID',\r\n        ViewParam:'VIEW',\r\n        OfcAndIndiActivityType:'Single',\r\n        TBDRejectDispName: 'TBD',\r\n        TBDRejectShiftId: 1,\r\n        showTBD: true,\r\n        AtivityDateFormat: 'YYYY-MM-DDT00:00:00',\r\n        NoShiftsErrorMsg: 'No shifts to Display',\r\n        NoLocationEquipmentErrorMsg: 'No Locations and activities',\r\n        ErrorDataFetchMessage: 'Error: Fetch failed to get Shift-Location-Equipment Data.Please inform the administration',\r\n        ErrorValidationMessage: 'Please complete the required fields before proceeding to save the form.',\r\n        ErrorLSADataFetchMessage: 'Error: Fetch failed to get Shift-Location-Availability Data for the table.Please inform the administration',\r\n        CreationErrorMessage:'Activity Creation failed.\\n',\r\n        CloneErrorMessage:'Activity Clone failed.\\n',\r\n        UpdateErrorMessage:'Activity Update failed.\\n',\r\n        DeleteErrorMessage:'Activity Delete failed.\\n',\r\n        FullyBookedAlertMsg:'The location(s) are fully booked for the selected shift(s) and day.',\r\n        FullyBookedDialogMsg:'The location(s) are fully booked for the selected shift(s) and day. By clicking, yes below, you are acknowledging that your booking will create an overcapacity scenario. By proceeding with this, you are fully responsible for ensuring that this overcapacity conflict is mitigated prior to this event. Failure to comply is going against established work rules, and compromising the health and safety of others.',\r\n        officeSpaceUsageLocation: process.env.REACT_APP_OFFICE_LOCATION_ID?parseInt(process.env.REACT_APP_OFFICE_LOCATION_ID):13,\r\n        officeSpaceUsageLocationName:  process.env.REACT_APP_OFFICE_LOCATION_NAME?process.env.REACT_APP_OFFICE_LOCATION_NAME:\"Office\",\r\n        InactiveStatusId: 2,\r\n    },\r\n    Calendar: {\r\n        Heading: 'Activity Calendar',\r\n        NextDateDispString: 'ddd DD-MMM',\r\n        CalendarDateFormat: 'YYYY-MM-DDT00:00:00'\r\n    },\r\n    PlanExperiment:{\r\n        IdParam: 'ID',\r\n        ParentIdParam: 'PARENTID',\r\n        ViewParam: 'VIEW',\r\n        FormRedirectionTimmer:2000,\r\n        ExpDateFormat: 'YYYY-MM-DDT00:00:00',\r\n    },\r\n    Footer: '© TRN Digital 2020',\r\n};\r\nexport default AppConfig;\r\n","import AppConfig from '../../Constans';\r\nconst moment = require('moment');\r\n\r\nexport function groupByEquipment (rawArray) {            \r\n    let groupedArr=[];\r\n    rawArray.forEach((item, index)=>{\r\n        let groupedItem = groupedArr.filter(i => {return i.ActivityId===item.ActivityId && i.ShiftId===item.ShiftId});\r\n        if(groupedItem.length<1){\r\n            groupedArr.push(item);\r\n        }\r\n        else{                \r\n            if (groupedItem[0].EquipmentName != item.EquipmentName && item.EquipmentName!=null){\r\n                groupedItem[0].EquipmentName = groupedItem[0].EquipmentName+\",\" + item.EquipmentName\r\n            }\r\n        }\r\n    });    \r\n    return groupedArr;        \r\n}\r\nexport function formatCalDate(date) {\r\n    if (date) {\r\n        return moment(date).format(AppConfig.Calendar.CalendarDateFormat);\r\n    } else {\r\n        return moment().format(AppConfig.Calendar.CalendarDateFormat);\r\n    }\r\n}\r\nexport function strEqualsCI(string1, string2){\r\n    return string1.toUpperCase()===string2.toUpperCase();\r\n}\r\nexport function getDateString(date, format){\r\n    if(date){\r\n        let _d = new Date(date);\r\n        if(format){\r\n            switch(format){\r\n                case \"Da DD-MM\": \r\n                    return getDayName(_d.getDay(), false, false) + \" \" + _d.getDate().toString().padStart(2,'0') + \"-\" + getMonthName(_d.getMonth(), false, false);                                        \r\n                default:\r\n                    return _d.toISOString();\r\n            }\r\n        }\r\n        else{\r\n            return _d.toISOString();\r\n        }\r\n    }\r\n    else{\r\n        return \"\";\r\n    }\r\n}\r\nexport function getDayName(dayNumber, long, allcaps){\r\n    var days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];    \r\n    return (\r\n        (long) ? \r\n            ( allcaps ? days[dayNumber].toUpperCase() : days[dayNumber]) : \r\n                ( allcaps ? days[dayNumber].toUpperCase().substring(0,3) : days[dayNumber].substring(0,3)));\r\n}\r\nexport function getMonthName(monthNumber, long, allcaps){\r\n    var months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];    \r\n    return (\r\n        (long) ? \r\n            ( allcaps ? months[monthNumber].toUpperCase() : months[monthNumber]) : \r\n                ( allcaps ? months[monthNumber].toUpperCase().substring(0,3) : months[monthNumber].substring(0,3)));\r\n}","import {MsalAuthProvider, LoginType} from 'react-aad-msal';\r\n\r\nexport const scopes = {\r\n    scopes: ['user.read', 'people.read'],\r\n};\r\nexport const authProvider = new MsalAuthProvider(\r\n    {\r\n        auth: {\r\n            authority: `https://login.microsoftonline.com/${process.env.REACT_APP_AAD_TENANT_ID}`,\r\n            clientId: process.env.REACT_APP_AAD_CLIENT_ID,\r\n            postLogoutRedirectUri: window.location.origin,\r\n            redirectUri: window.location.origin,\r\n            validateAuthority: true,\r\n\r\n            // After being redirected to the \"redirectUri\" page, should user\r\n            // be redirected back to the Url where their login originated from?\r\n            navigateToLoginRequestUrl: false,\r\n        },\r\n        cache: {\r\n            cacheLocation: 'localStorage',\r\n            storeAuthStateInCookie: true,\r\n        },\r\n    },\r\n    scopes,\r\n    {\r\n        loginType: LoginType.Redirect,\r\n    },\r\n    {\r\n        tokenRefreshUri: window.location.origin + '/auth.html',\r\n    },\r\n);\r\n","const uuidv1 = require('uuid/v1');\r\nuuidv1();\r\n\r\nvar CacheManager = {\r\n    storageType: window.localStorage,\r\n    storagekeyString: 'ObsidianSWFT2020_',\r\n    storageitem: {\r\n        key: '',\r\n        ExpiryDate: '',\r\n        value: '',\r\n        createdDate: '',\r\n    },\r\n\r\n    createCacheItem: (key, jsonObj, expiryHrs) => {\r\n        let storageObj = {},\r\n            now = new Date().getTime(),\r\n            keyStr = CacheManager.storagekeyString + key;\r\n        storageObj.value = jsonObj;\r\n        storageObj.created = now;\r\n        storageObj.expireTime = expiryHrs * 3600000; //miliseconds\r\n        CacheManager.storageType.setItem(keyStr, JSON.stringify(storageObj));\r\n    },\r\n    removeCacheItem: key => {\r\n        let keyStr = '';\r\n        keyStr = CacheManager.storagekeyString + key;\r\n        CacheManager.storageType.removeItem(keyStr);\r\n    },\r\n    updateCacheItem: (key, jsonObj, expiryHrs) => {\r\n        CacheManager.removeCacheItem(key);\r\n        CacheManager.createCacheItem(key, jsonObj, expiryHrs);\r\n    },\r\n    getCacheItem: key => {\r\n        let cacheObj = '',\r\n            jsonObj = '',\r\n            keyStr = '';\r\n        try {\r\n            keyStr = CacheManager.storagekeyString + key;\r\n            cacheObj = CacheManager.storageType.getItem(keyStr);\r\n            jsonObj = JSON.parse(cacheObj);\r\n            return jsonObj;\r\n        } catch (err) {\r\n            console.log(err);\r\n            return jsonObj;\r\n        }\r\n    },\r\n    isCacheExpired: key => {\r\n        let flag = true,\r\n            cacheItem = null,\r\n            now = new Date().getTime();\r\n        try {\r\n            cacheItem = CacheManager.getCacheItem(key);\r\n            if (cacheItem && cacheItem.value) {\r\n                let cacheLapseTime = 0;\r\n                cacheLapseTime = cacheItem.created + cacheItem.expireTime;\r\n                if (cacheLapseTime - now > 0) {\r\n                    flag = true;\r\n                } else {\r\n                    flag = false;\r\n                }\r\n            } else {\r\n                flag = false;\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n            flag = false;\r\n        }\r\n        return flag;\r\n    },\r\n};\r\nexport default CacheManager;\r\n","import {authProvider, scopes} from '../authProvider';\r\nimport CacheManager from './CachecManager';\r\n\r\nvar graph = require('@microsoft/microsoft-graph-client');\r\nexport async function getAuthenticatedClient(accessToken) {\r\n    let isCahce = false,\r\n        validToken = '',\r\n        newAccInfo = {},\r\n        accountInfo = {};\r\n    try {\r\n        isCahce = CacheManager.isCacheExpired('accountInfo');\r\n    } catch (err) {\r\n        console.log(err);\r\n        isCahce = false;\r\n    }\r\n    if (isCahce && accessToken) {\r\n        validToken = accessToken;\r\n    } else {\r\n        try {\r\n            newAccInfo = await authProvider.acquireTokenSilent(scopes);\r\n            const cacheAccountInfo = CacheManager.getCacheItem('accountInfo');\r\n            accountInfo = JSON.parse(cacheAccountInfo.value);\r\n            accountInfo.jwtAccessToken = newAccInfo.accessToken;\r\n            accountInfo.account = newAccInfo.account;\r\n            CacheManager.updateCacheItem(\r\n                'accountInfo',\r\n                JSON.stringify(accountInfo),\r\n                1,\r\n            );\r\n            validToken = newAccInfo.accessToken;\r\n        } catch (err) {\r\n            console.log('account Info error', err);\r\n            newAccInfo = await authProvider.acquireTokenSilent(scopes);\r\n            const cacheAccountInfo = CacheManager.getCacheItem('accountInfo');        \r\n            accountInfo = JSON.parse(cacheAccountInfo.value);\r\n            accountInfo.jwtAccessToken = newAccInfo.accessToken;\r\n            accountInfo.account = newAccInfo.account;\r\n            CacheManager.updateCacheItem(\r\n                'accountInfo',\r\n                JSON.stringify(accountInfo),\r\n                72\r\n            );\r\n            validToken = newAccInfo.accessToken;\r\n        }\r\n    }\r\n    // Initialize Graph client\r\n    const client = graph.Client.init({\r\n        // Use the provided access token to authenticate\r\n        // requests\r\n        debugLogging: true,\r\n        authProvider: done => {\r\n            done(null, validToken);\r\n        },\r\n    });\r\n    return client;\r\n}\r\n\r\nexport function searchForOnlyPeople(searchText, accessToken) {\r\n    const client = getAuthenticatedClient(accessToken);\r\n    return new Promise((resolve, reject) => {\r\n        client\r\n            .api('/users')\r\n            .filter(`startswith(displayName,'${searchText}')`)\r\n            .select('displayName,givenName,surname,mail,userPrincipalName,id')\r\n            .top(25)\r\n            .get((err, res) => {\r\n                if (err) {\r\n                    //this._handleError(err);\r\n                    reject(err.message);\r\n                    return;\r\n                }\r\n                //callback(err, (res) ? res.value : []);\r\n                resolve(res ? res.value : []);\r\n                return;\r\n            });\r\n    });\r\n}\r\n\r\nexport async function searchForPeople(searchText, accessToken) {\r\n    const client = await getAuthenticatedClient(accessToken);\r\n    const users = client\r\n        .api('/users')\r\n        .filter(`startswith(displayName,'${searchText}')`)\r\n        .select('displayName,givenName,surname,mail,userPrincipalName,id')\r\n        .top(25)\r\n        .get();\r\n    const groups = client\r\n        .api('/groups')\r\n        .filter(\r\n            `startswith(displayName,'${searchText}') and groupTypes/any(c:c+eq+'Unified')`,\r\n        )\r\n        .select('displayName,givenName,surname,mail,userPrincipalName,id')\r\n        .top(25)\r\n        .get();\r\n    return Promise.all([users, groups]).then(requestData => {\r\n        const newData = [].concat.apply(\r\n            [],\r\n            requestData.map(data => (data.value.length > 0 ? data.value : [])),\r\n        );\r\n        //resolve(requestData);\r\n        return newData;\r\n    });\r\n}\r\n\r\n// GET user/id/photo/$value for each person\r\nexport async function getProfilePics(personas, accessToken) {\r\n    const client =  await getAuthenticatedClient(accessToken);\r\n    return new Promise((resolve, reject) => {\r\n        client\r\n            .api(`users/${personas.props.id}/photo/$value`)\r\n            .header('Cache-Control', 'no-cache')\r\n            .responseType('blob')\r\n            .get((err, res) => {\r\n                if (err) {\r\n                    reject(err);\r\n                } else {\r\n                    personas.imageUrl = window.URL.createObjectURL(res);\r\n                    personas.initialsColor = null;\r\n                }\r\n            });\r\n    });\r\n}\r\n\r\n// GET me/people\r\nexport async function getPeople(accessToken) {\r\n    const client = await getAuthenticatedClient(accessToken);\r\n    return new Promise((resolve, reject) => {\r\n        client\r\n            .api('/me/people')\r\n            .filter(\"personType/class eq 'Person'\")\r\n            .select(\r\n                'displayName,givenName,surname,scoredEmailAddresses,userPrincipalName',\r\n            )\r\n            .top(25)\r\n            .get((err, res) => {\r\n                if (err) {\r\n                    reject(err.message);\r\n                    return;\r\n                }\r\n                resolve(res ? res.value : []);\r\n                return;\r\n            });\r\n    });\r\n}\r\n","import React from 'react';\r\nimport {Dialog, DialogType} from 'office-ui-fabric-react/lib/Dialog';\r\nimport {Spinner,SpinnerSize} from 'office-ui-fabric-react/lib/Spinner';\r\nimport { IBlockingSpinnerProps } from './IBlockingSpinner';\r\nexport const BlockingSpinner = (props:IBlockingSpinnerProps) => {\r\n    return (\r\n        <div>\r\n            <Dialog\r\n                hidden={props.hideDialog}\r\n                dialogContentProps={{\r\n                    type: DialogType.largeHeader,\r\n                    title: '',\r\n                    subText: '',\r\n                    styles:{content:{borderTop:0} }\r\n                }}\r\n                modalProps={{\r\n                    isBlocking: true,\r\n                    styles: {main: {minWidth: 200,minHeight: 100}},\r\n                }}\r\n            >\r\n                <Spinner\r\n                    label={props.label}\r\n                    ariaLive=\"assertive\"\r\n                    labelPosition=\"right\"\r\n                    size={SpinnerSize.large}\r\n                />\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}\r\n\r\n","import * as axios from 'axios';\r\nimport AppConfig from '../Constans';\r\nvar moment = require('moment');\r\n\r\nfunction processCalendarData(calenderDate) {\r\n    let jsonObj = {};\r\n    try {\r\n        jsonObj.CalenderDate = calenderDate\r\n            ? moment(calenderDate).format(AppConfig.Calendar.CalendarDateFormat)\r\n            : '';\r\n    } catch (error) {\r\n        console.log(error.response);\r\n        jsonObj = false;\r\n    }\r\n    return jsonObj;\r\n}\r\nvar CalendarDataService = {\r\n    getCalendarData(activityDate) {\r\n        return new Promise((resolve, reject) => {\r\n            let payLoadObj = processCalendarData(activityDate);\r\n            if (!payLoadObj) {\r\n                let msg =\r\n                    'Error in processing Data. Activity Date is not found';\r\n                reject(msg);\r\n            }\r\n            axios\r\n                .post('/api/Calendar', {jsonObj: payLoadObj})\r\n                .then(calendarData => { \r\n                    resolve(calendarData.data);\r\n                })\r\n                .catch(error => {\r\n                    console.log(error.response);\r\n                    reject(error);\r\n                });\r\n        });\r\n    },\r\n    getLocationdata() {\r\n        return new Promise((resolve, reject) => {\r\n            axios\r\n                .get('/api/Location')\r\n                .then(locations => {\r\n                    resolve(locations.data);\r\n                })\r\n                .catch(error => {\r\n                    console.log(error.response);\r\n                    reject(error);\r\n                });\r\n        });\r\n    },\r\n};\r\nexport default CalendarDataService;\r\n","import * as _ from 'lodash';\r\nimport AppConfig from '../../Constans';\r\nimport CalendarDatatService from '../../services/calendar-service';\r\nimport ShiftService from '../../services/shift-service';\r\nimport * as Utils from \"../utils/Utils\";\r\nimport LocationService from '../../services/location-service';\r\n\r\nconst moment = require('moment');\r\nexport const today = new Date();\r\n\r\nexport function formatCalDate(date) {\r\n    if (date) {\r\n        return moment.utc(date).format(AppConfig.Calendar.CalendarDateFormat);\r\n    } else {\r\n        return moment().format(AppConfig.Calendar.CalendarDateFormat);\r\n    }\r\n}\r\n\r\nexport function getLocationsformLocEquip(locationEquipArr) {\r\n    var arrayTofilter = [...locationEquipArr],\r\n    locationIdArr = [], resultantArr = [];\r\n    _.each(arrayTofilter,(locEquipRecord) => {\r\n        if(locationIdArr.indexOf(locEquipRecord.LocationId) === -1){\r\n            locationIdArr.push(locEquipRecord.LocationId);\r\n            let obj = {};\r\n            var equipNames  =_.map(_.filter(locationEquipArr,{LocationId:locEquipRecord.LocationId}),'EquipmentName');\r\n            obj.LocationId = locEquipRecord.LocationId;\r\n            obj.LocationName = locEquipRecord.LocationName;\r\n            obj.LocationDescription = locEquipRecord.LocationDescription;\r\n            obj.LocationCapacity = locEquipRecord.LocationCapacity;\r\n            obj.EquipmentArr = [];\r\n            if(equipNames && equipNames.length>0){\r\n                obj.EquipmentArr = equipNames;\r\n            }\r\n            resultantArr.push({...obj});\r\n        }\r\n    });\r\n    return resultantArr;\r\n}\r\nexport function filterByLocationIdDate(calData, locationId, date) {\r\n    var filteredCalData = [];\r\n    filteredCalData = _.filter(calData, {\r\n        LocationId: locationId,\r\n        ActivityDate: date,\r\n    });\r\n    return filteredCalData;\r\n}\r\nexport function formatActivityHeaderDate(date){\r\n    let _d = new Date(date);\r\n    // return Utils.getDateString(_d, \"Da DD-MM\");\r\n    return moment.utc(_d).format(AppConfig.Calendar.NextDateDispString);\r\n}\r\nexport function filterByLocationShiftIdDate(calData, locationId, date,shiftId) {\r\n    var filteredCalData = [];\r\n    filteredCalData = _.filter(calData, {\r\n        LocationId: locationId,\r\n        ActivityDate: date,\r\n        ShiftId: shiftId,\r\n    });\r\n    return filteredCalData;\r\n}\r\nexport function formLocationDateJson(nextDatesArr, locationData, shiftData, calendarData, currUserEmail) {    \r\n    var resultantJsonArr = [];\r\n    for (let index = 0; index < locationData.length; index++) {\r\n        const eachLocation = locationData[index];\r\n        let obj = {};\r\n        obj.LocationCapacity = eachLocation.LocationCapacity;\r\n        obj.LocationDescription = eachLocation.LocationDescription;\r\n        obj.LocationId = eachLocation.LocationId;\r\n        obj.LocationName = eachLocation.LocationName;\r\n        obj.CalData = [];\r\n        let shiftObjDataObj = [];\r\n        for (let jndex = 0; jndex < nextDatesArr.length; jndex++) {\r\n            const shiftObjArr = [];\r\n            //remeber tbd is removed here\r\n            for (let sndex = 0; sndex < shiftData.length - 1; sndex++) {\r\n                const eachShiftObj = shiftData[sndex];\r\n                var shiftObjLocal = {\r\n                    ShiftId: eachShiftObj.Id,\r\n                    ShiftName: eachShiftObj.Name,\r\n                    ActivityNumber: 0,\r\n                    ShiftColor: 'White',\r\n                    isStar: false,\r\n                };\r\n                shiftObjArr.push(JSON.parse(JSON.stringify(shiftObjLocal)));\r\n            }\r\n            const eachNextDates = nextDatesArr[jndex];\r\n            var objNextDates = {\r\n                DayIndex: eachNextDates.DayIndex,\r\n                ShiftData: shiftObjArr.splice(0),\r\n                Date: eachNextDates.DateStringDB,\r\n            };\r\n            shiftObjDataObj.push(JSON.parse(JSON.stringify(objNextDates)));\r\n        }\r\n        obj.CalData = shiftObjDataObj.splice(0);\r\n        resultantJsonArr.push(obj);\r\n    }\r\n    console.log('ResultantObj', resultantJsonArr);\r\n    console.log('calendarData', calendarData);\r\n    var completeObj = {};\r\n    var returnObj = groupCalendarDataByLocByShift(calendarData, resultantJsonArr, currUserEmail);\r\n    var actCountObjArr = countShiftWiseTotalPerDay(nextDatesArr, shiftData, returnObj.activitiesData);\r\n    completeObj.calendarData = returnObj.calendarData;\r\n    completeObj.activitiesData = returnObj.activitiesData;\r\n    completeObj.totolCountArr = actCountObjArr;\r\n    console.log(completeObj);\r\n    return completeObj;\r\n}\r\n/**\r\n * Returns array for calendar row with the number of uniq users per shift per day in all locations\r\n * @param {next 7 days array} nextDatesArr \r\n * @param {four shifts data} shiftData \r\n * @param {Calendar activities data} calendarData \r\n */\r\nfunction countShiftWiseTotalPerDay(nextDatesArr,shiftData, calendarData){\r\n    var resultantArr = []; \r\n    for (let jndex = 0; jndex < nextDatesArr.length; jndex++) {\r\n        const eachNextDates = nextDatesArr[jndex];\r\n        const shiftObjArr = [];\r\n        //remeber tbd is removed here\r\n        for (let sndex = 0; sndex < shiftData.length - 1; sndex++) {\r\n            const eachShiftObj = shiftData[sndex];\r\n            var filterByShiftDate = _.map(_.filter(calendarData,{ActivityDate:eachNextDates.DateStringDB,ShiftId:eachShiftObj.Id}),'BookedForEmail');\r\n            var uiqActIds = filterByShiftDate?_.uniq(filterByShiftDate):[];   \r\n            var shiftObjLocal = {\r\n                    ShiftId: eachShiftObj.Id,\r\n                    ShiftName: eachShiftObj.Name,\r\n                    ActivityNumber: uiqActIds?uiqActIds.length:0,\r\n                    ShiftColor: 'White',\r\n                    isStar: false,\r\n                };\r\n            shiftObjArr.push({...shiftObjLocal});\r\n        }\r\n        var objNextDates = {\r\n            DayIndex: eachNextDates.DayIndex,\r\n            ShiftData: shiftObjArr.splice(0),\r\n            Date: eachNextDates.DateStringDB,\r\n            TotalInLocation:0\r\n        };\r\n        resultantArr.push({...objNextDates});\r\n    }\r\n    return resultantArr;\r\n}\r\nfunction groupCalendarDataByLocByShift(calendarData, locationDateJson, currUserEmail) {\r\n    var resultantGroupedArr = locationDateJson,groupedEquipmentsArr= [];\r\n    for (let index = 0; index < resultantGroupedArr.length; index++) {\r\n        const eachLocationDateJson = resultantGroupedArr[index];\r\n        var locCapacity = eachLocationDateJson.LocationCapacity;\r\n        _.each(eachLocationDateJson.CalData, function (dayobj) {\r\n            let groupByLocationAndDate = _.filter(calendarData, {\r\n                LocationId: eachLocationDateJson.LocationId,\r\n                ActivityDate: dayobj.Date,\r\n            });\r\n            let groupedByEquip = Utils.groupByEquipment(groupByLocationAndDate); \r\n            dayobj.TotalInLocation = groupedByEquip.length > 0 ? groupedByEquip.length : 0;\r\n            if (groupedByEquip.length > 0) {\r\n              _.forEach(groupedByEquip, (value)=>{groupedEquipmentsArr.push(value)});\r\n                let groupByShift = _.groupBy(groupedByEquip, 'ShiftId');\r\n                if (groupByShift) {\r\n                    _.each(dayobj.ShiftData, function (shiftObj) {\r\n                        var shiftActivities = groupByShift[shiftObj.ShiftId];\r\n                        if (shiftActivities) {\r\n                            var bookedForArr = [];\r\n                            bookedForArr =  _.map(shiftActivities,'BookedForEmail');\r\n                            // bookedByArr = _.map(shiftActivities,'BookedByEmail');\r\n                            // let allPersonEmail = bookedForArr.concat(bookedByArr);\r\n                            let uniqPersons = _.uniq(bookedForArr);\r\n                            shiftObj.ActivityNumber = uniqPersons.length;\r\n                            shiftObj.ShiftColor = indicateShiftColor(uniqPersons.length,locCapacity);\r\n                            shiftObj.isStar = isCurrUserData(shiftActivities,currUserEmail);\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        });\r\n    }\r\n    var returnObj ={};\r\n    returnObj.calendarData = resultantGroupedArr;\r\n    returnObj.activitiesData = groupedEquipmentsArr;\r\n    return returnObj;\r\n}\r\n\r\nfunction indicateShiftColor(noOfActivities,locCapacity){\r\n    if(noOfActivities === 0 ) {\r\n        return 'White';\r\n    }\r\n    if(noOfActivities< locCapacity) {\r\n        return 'Green';\r\n    }\r\n    if(noOfActivities === locCapacity) {\r\n        return 'Grey';\r\n    }\r\n    if(noOfActivities> locCapacity) {\r\n        return 'Red';\r\n    } \r\n}\r\nfunction isCurrUserData(shiftActivities,currUserEmail){\r\n    // var allBookedByEmails = _.map(shiftActivities,'BookedByEmail');\r\n    var allBookedForEmails = _.map(shiftActivities,'BookedForEmail');\r\n    if(allBookedForEmails && allBookedForEmails.indexOf(currUserEmail)!==-1){\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\nexport function getShiftDataForCalendar() {\r\n    return new Promise((resolve, reject) => {\r\n        ShiftService.getShiftsData()\r\n            .then(shifts => resolve(shifts))\r\n            .catch(error => {\r\n                reject(error);\r\n            });\r\n    });\r\n}\r\nexport function getCalendarDataByDate(activityDate) {\r\n    return new Promise((resolve, reject) => {\r\n        CalendarDatatService.getCalendarData(activityDate)\r\n            .then(calData => {    \r\n                resolve(calData);\r\n            })\r\n            .catch(error => {\r\n                reject(error);\r\n            });\r\n    });\r\n}\r\nexport function getLocationsEquipments() {\r\n    return new Promise((resolve, reject) => {\r\n        CalendarDatatService.getLocationdata()\r\n            .then(locationEquipData => resolve(locationEquipData))\r\n            .catch(error => {\r\n                reject(error);\r\n            });\r\n    });\r\n}\r\nconst daysArr = ['Day1', 'Day2', 'Day3', 'Day4', 'Day5', 'Day6', 'Day7'];\r\nexport function getNextDaysArr(startDate, daysToAdd) {\r\n    var strdateSting= moment(startDate).format(AppConfig.DateFormats.NoTimeDate);\r\n    var aryDates = [];\r\n    if (daysToAdd > 0) {\r\n        aryDates = [];\r\n        for (var i = 0; i <= daysToAdd; i++) {\r\n            var currentDate = new Date(strdateSting);\r\n            currentDate.setDate(currentDate.getDate() + i);\r\n            // var  nextDateObjStr = moment.utc(currentDate).format(AppConfig.DateFormats.NoTimeDate);\r\n            var  nextDateObj = currentDate;//new Date(nextDateObjStr);\r\n            var arrdateObj = {};\r\n            arrdateObj.DayIndex = daysArr[i];\r\n            arrdateObj.Day = Utils.getDayName(currentDate.getDay(), true, false);\r\n            arrdateObj.DateObj = nextDateObj;\r\n            arrdateObj.DateString = moment(nextDateObj).format(AppConfig.Calendar.NextDateDispString);\r\n            arrdateObj.DateStringDB =  moment(nextDateObj).format(AppConfig.Calendar.CalendarDateFormat) + '.000Z';\r\n            aryDates.push({...arrdateObj});\r\n        }\r\n    }\r\n    console.log(aryDates);\r\n    return aryDates;\r\n}\r\n\r\nexport const CalendarLinks = [\r\n    {\r\n        order: 1,\r\n        Name: 'View  My Scheduled Activities',\r\n        RedirectURI: '/MyActivities',\r\n    },\r\n    {\r\n        order: 2,\r\n        Name: 'Plan an experiment (series of activities)',\r\n        RedirectURI: '/PlanExperiment',\r\n    },\r\n    {\r\n        order: 2,\r\n        Name: 'Plan an individual activity',\r\n        RedirectURI: '/PlanExperiment',\r\n    },\r\n    {\r\n        order: 3,\r\n        Name: 'Plan office space usage',\r\n        RedirectURI: '/PlanActivity',\r\n    },\r\n];\r\n","import * as axios from 'axios';\r\nimport AppConfig from '../Constans';\r\n\r\nfunction processShiftLocationAvailability(activityObj) {\r\n    let jsonObj = {};\r\n    try {\r\n        jsonObj.ActivityDate = activityObj.activityDate\r\n            ? activityObj.activityDate\r\n            : '';\r\n    } catch (error) {\r\n        console.log(error.response);\r\n        jsonObj = false;\r\n    }\r\n    return jsonObj;\r\n}\r\nvar ShiftService = {\r\n    // SendEmail: () => {\r\n    getShiftsData() {\r\n        return new Promise((resolve, reject) => {\r\n            axios\r\n                .get('/api/Shifts')\r\n                .then(shifts => {\r\n                    resolve(shifts.data);\r\n                })\r\n                .catch(error => {\r\n                    console.log(error.response);\r\n                    reject(error);\r\n                });\r\n        });\r\n    },\r\n    getShiftLocationAvaliability(activityObj) {\r\n        return new Promise((resolve, reject) => {\r\n            let payLoadObj = processShiftLocationAvailability(activityObj);\r\n            if (!payLoadObj) {\r\n                let msg = 'Error in processing Data. Activity Date not found';\r\n                reject(msg);\r\n            }\r\n            axios\r\n                .post('/api/Shifts/GetLocationAvailability', {\r\n                    jsonObj: payLoadObj,\r\n                })\r\n                .then(shiftLocationAvailabilities => {\r\n                    resolve(shiftLocationAvailabilities.data);\r\n                })\r\n                .catch(error => {\r\n                    console.log(error.response);\r\n                    reject(error);\r\n                });\r\n        });\r\n    },\r\n};\r\nexport default ShiftService;\r\n"],"sourceRoot":""}